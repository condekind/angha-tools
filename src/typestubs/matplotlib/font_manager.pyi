"""
This type stub file was generated by pyright.
"""

import json
import os
import sys
import logging
from matplotlib import cbook, ft2font, get_cachedir
from typing import Any, Optional

"""
A module for finding, managing, and using fonts across platforms.

This module provides a single :class:`FontManager` instance that can
be shared across backends and platforms.  The :func:`findfont`
function returns the best TrueType (TTF) font file in the local or
system font path that matches the specified :class:`FontProperties`
instance.  The :class:`FontManager` also handles Adobe Font Metrics
(AFM) font files for use by the PostScript backend.

The design is based on the `W3C Cascading Style Sheet, Level 1 (CSS1)
font specification <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_.
Future versions may implement the Level 2 or 2.1 specifications.

Experimental support is included for using `fontconfig` on Unix
variant platforms (Linux, OS X, Solaris).  To enable it, set the
constant ``USE_FONTCONFIG`` in this file to ``True``.  Fontconfig has
the advantage that it is the standard way to look up fonts on X11
platforms, so if a font is installed, it is much more likely to be
found.
"""
_log = logging.getLogger(__name__)
USE_FONTCONFIG = False
font_scalings = { 'xx-small': 0.579,'x-small': 0.694,'small': 0.833,'medium': 1,'large': 1.2,'x-large': 1.44,'xx-large': 1.728,'larger': 1.2,'smaller': 0.833,None: 1 }
stretch_dict = { 'ultra-condensed': 100,'extra-condensed': 200,'condensed': 300,'semi-condensed': 400,'normal': 500,'semi-expanded': 600,'expanded': 700,'extra-expanded': 800,'ultra-expanded': 900 }
weight_dict = { 'ultralight': 100,'light': 200,'normal': 400,'regular': 400,'book': 400,'medium': 500,'roman': 500,'semibold': 600,'demibold': 600,'demi': 600,'bold': 700,'heavy': 800,'extra bold': 800,'black': 900 }
font_family_aliases = 'serif', 'sans-serif', 'sans serif', 'cursive', 'fantasy', 'monospace', 'sans'
MSFolders = r'Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders'
MSFontDirectories = [r'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts', r'SOFTWARE\Microsoft\Windows\CurrentVersion\Fonts']
X11FontDirectories = ["/usr/X11R6/lib/X11/fonts/TTF/", "/usr/X11/lib/X11/fonts", "/usr/share/fonts/", "/usr/local/share/fonts/", "/usr/lib/openoffice/share/fonts/truetype/"]
OSXFontDirectories = ["/Library/Fonts/", "/Network/Library/Fonts/", "/System/Library/Fonts/", "/opt/local/share/fonts" ""]
if not USE_FONTCONFIG and sys.platform != 'win32':
    home = os.environ.get('HOME')
def get_fontext_synonyms(fontext):
    """
    Return a list of file extensions extensions that are synonyms for
    the given file extension *fileext*.
    """
    ...

def list_fonts(directory, extensions):
    """
    Return a list of all fonts matching any of the extensions,
    possibly upper-cased, found recursively under the directory.
    """
    ...

def win32FontDirectory():
    """
    Return the user-specified font directory for Win32.  This is
    looked up from the registry key::

      \\\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Fonts

    If the key is not found, $WINDIR/Fonts will be returned.
    """
    ...

def win32InstalledFonts(directory: Optional[Any] = ..., fontext=...):
    """
    Search for fonts in the specified font directory, or use the
    system directories if none given.  A list of TrueType font
    filenames are returned by default, or AFM fonts if *fontext* ==
    'afm'.
    """
    ...

def OSXInstalledFonts(directories: Optional[Any] = ..., fontext=...):
    """
    Get list of font files on OS X - ignores font suffix by default.
    """
    ...

@lru_cache()
def _call_fc_list():
    """Cache and list the font filenames known to `fc-list`.
    """
    ...

def get_fontconfig_fonts(fontext=...):
    """List the font filenames known to `fc-list` having the given extension.
    """
    ...

def findSystemFonts(fontpaths: Optional[Any] = ..., fontext=...):
    """
    Search for fonts in the specified font paths.  If no paths are
    given, will use a standard set of system paths, as well as the
    list of fonts tracked by fontconfig if fontconfig is installed and
    available.  A list of TrueType fonts are returned by default with
    AFM fonts as an option.
    """
    ...

@cbook.deprecated("2.1")
def weight_as_number(weight):
    """
    Return the weight property as a numeric value.  String values
    are converted to their corresponding numeric value.
    """
    ...

class FontEntry(object):
    """
    A class for storing Font properties.  It is used when populating
    the font lookup dictionary.
    """
    def __init__(self, fname=..., name=..., style=..., variant=..., weight=..., stretch=..., size=...):
        self.fname = ...
        self.name = ...
        self.style = ...
        self.variant = ...
        self.weight = ...
        self.stretch = ...
    
    def __repr__(self):
        ...
    


def ttfFontProperty(font):
    """
    Extract information from a TrueType font file.

    Parameters
    ----------
    font : `.FT2Font`
        The TrueType font file from which information will be extracted.

    Returns
    -------
    `FontEntry`
        The extracted font properties.

    """
    ...

def afmFontProperty(fontpath, font):
    """
    Extract information from an AFM font file.

    Parameters
    ----------
    font : `.AFM`
        The AFM font file from which information will be extracted.

    Returns
    -------
    `FontEntry`
        The extracted font properties.

    """
    ...

def createFontList(fontfiles, fontext=...):
    """
    A function to create a font lookup list.  The default is to create
    a list of TrueType fonts.  An AFM font list can optionally be
    created.
    """
    ...

class FontProperties(object):
    """
    A class for storing and manipulating font properties.

    The font properties are those described in the `W3C Cascading
    Style Sheet, Level 1
    <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ font
    specification.  The six properties are:

      - family: A list of font names in decreasing order of priority.
        The items may include a generic font family name, either
        'serif', 'sans-serif', 'cursive', 'fantasy', or 'monospace'.
        In that case, the actual font to be used will be looked up
        from the associated rcParam in :file:`matplotlibrc`.

      - style: Either 'normal', 'italic' or 'oblique'.

      - variant: Either 'normal' or 'small-caps'.

      - stretch: A numeric value in the range 0-1000 or one of
        'ultra-condensed', 'extra-condensed', 'condensed',
        'semi-condensed', 'normal', 'semi-expanded', 'expanded',
        'extra-expanded' or 'ultra-expanded'

      - weight: A numeric value in the range 0-1000 or one of
        'ultralight', 'light', 'normal', 'regular', 'book', 'medium',
        'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',
        'extra bold', 'black'

      - size: Either an relative value of 'xx-small', 'x-small',
        'small', 'medium', 'large', 'x-large', 'xx-large' or an
        absolute font size, e.g., 12

    The default font property for TrueType fonts (as specified in the
    default :file:`matplotlibrc` file) is::

      sans-serif, normal, normal, normal, normal, scalable.

    Alternatively, a font may be specified using an absolute path to a
    .ttf file, by using the *fname* kwarg.

    The preferred usage of font sizes is to use the relative values,
    e.g.,  'large', instead of absolute font sizes, e.g., 12.  This
    approach allows all text sizes to be made larger or smaller based
    on the font manager's default font size.

    This class will also accept a `fontconfig
    <https://www.freedesktop.org/wiki/Software/fontconfig/>`_ pattern, if it is
    the only argument provided.  See the documentation on `fontconfig patterns
    <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.
    This support does not require fontconfig to be installed.  We are merely
    borrowing its pattern syntax for use here.

    Note that matplotlib's internal font manager and fontconfig use a
    different algorithm to lookup fonts, so the results of the same pattern
    may be different in matplotlib than in other applications that use
    fontconfig.
    """
    def __init__(self, family: Optional[Any] = ..., style: Optional[Any] = ..., variant: Optional[Any] = ..., weight: Optional[Any] = ..., stretch: Optional[Any] = ..., size: Optional[Any] = ..., fname: Optional[Any] = ..., _init: Optional[Any] = ...):
        ...
    
    def _parse_fontconfig_pattern(self, pattern):
        ...
    
    def __hash__(self):
        ...
    
    def __eq__(self, other):
        ...
    
    def __ne__(self, other):
        ...
    
    def __str__(self):
        ...
    
    def get_family(self):
        """
        Return a list of font names that comprise the font family.
        """
        ...
    
    def get_name(self):
        """
        Return the name of the font that best matches the font
        properties.
        """
        ...
    
    def get_style(self):
        """
        Return the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        """
        ...
    
    get_slant = ...
    def get_variant(self):
        """
        Return the font variant.  Values are: 'normal' or
        'small-caps'.
        """
        ...
    
    def get_weight(self):
        """
        Set the font weight.  Options are: A numeric value in the
        range 0-1000 or one of 'light', 'normal', 'regular', 'book',
        'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold',
        'heavy', 'extra bold', 'black'
        """
        ...
    
    def get_stretch(self):
        """
        Return the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'.
        """
        ...
    
    def get_size(self):
        """
        Return the font size.
        """
        ...
    
    def get_size_in_points(self):
        ...
    
    def get_file(self):
        """
        Return the filename of the associated font.
        """
        ...
    
    def get_fontconfig_pattern(self):
        """
        Get a fontconfig pattern suitable for looking up the font as
        specified with fontconfig's ``fc-match`` utility.

        See the documentation on `fontconfig patterns
        <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        """
        ...
    
    def set_family(self, family):
        """
        Change the font family.  May be either an alias (generic name
        is CSS parlance), such as: 'serif', 'sans-serif', 'cursive',
        'fantasy', or 'monospace', a real font name or a list of real
        font names.  Real font names are not supported when
        `text.usetex` is `True`.
        """
        ...
    
    set_name = ...
    def set_style(self, style):
        """
        Set the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        """
        ...
    
    set_slant = ...
    def set_variant(self, variant):
        """
        Set the font variant.  Values are: 'normal' or 'small-caps'.
        """
        ...
    
    def set_weight(self, weight):
        """
        Set the font weight.  May be either a numeric value in the
        range 0-1000 or one of 'ultralight', 'light', 'normal',
        'regular', 'book', 'medium', 'roman', 'semibold', 'demibold',
        'demi', 'bold', 'heavy', 'extra bold', 'black'
        """
        ...
    
    def set_stretch(self, stretch):
        """
        Set the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded' or
        'ultra-expanded', or a numeric value in the range 0-1000.
        """
        ...
    
    def set_size(self, size):
        """
        Set the font size.  Either an relative value of 'xx-small',
        'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'
        or an absolute font size, e.g., 12.
        """
        ...
    
    def set_file(self, file):
        """
        Set the filename of the fontfile to use.  In this case, all
        other properties will be ignored.
        """
        ...
    
    def set_fontconfig_pattern(self, pattern):
        """
        Set the properties by parsing a fontconfig *pattern*.

        See the documentation on `fontconfig patterns
        <https://www.freedesktop.org/software/fontconfig/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        """
        ...
    
    def copy(self):
        """Return a deep copy of self"""
        ...
    


@cbook.deprecated("2.1")
def ttfdict_to_fnames(d):
    """
    flatten a ttfdict to all the filenames it contains
    """
    ...

class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        ...
    


def _json_decode(o):
    ...

def json_dump(data, filename):
    """Dumps a data structure as JSON in the named file.
    Handles FontManager and its fields."""
    ...

def json_load(filename):
    """Loads a data structure as JSON from the named file.
    Handles FontManager and its fields."""
    ...

def _normalize_font_family(family):
    ...

class TempCache(object):
    """
    A class to store temporary caches that are (a) not saved to disk
    and (b) invalidated whenever certain font-related
    rcParams---namely the family lookup lists---are changed or the
    font cache is reloaded.  This avoids the expensive linear search
    through all fonts every time a font is looked up.
    """
    invalidating_rcparams = ...
    def __init__(self):
        ...
    
    def make_rcparams_key(self):
        ...
    
    def get(self, prop):
        ...
    
    def set(self, prop, value):
        ...
    


class FontManager(object):
    """
    On import, the :class:`FontManager` singleton instance creates a
    list of TrueType fonts based on the font properties: name, style,
    variant, weight, stretch, and size.  The :meth:`findfont` method
    does a nearest neighbor search to find the font that most closely
    matches the specification.  If no good enough match is found, a
    default font is returned.
    """
    __version__ = ...
    def __init__(self, size: Optional[Any] = ..., weight=...):
        self.default_size = ...
        self.ttffiles = ...
        self.defaultFamily = ...
        self.defaultFont = ...
        self.ttflist = ...
        self.afmfiles = ...
        self.afmlist = ...
    
    def get_default_weight(self):
        """
        Return the default font weight.
        """
        ...
    
    @staticmethod
    def get_default_size():
        """
        Return the default font size.
        """
        ...
    
    def set_default_weight(self, weight):
        """
        Set the default font weight.  The initial value is 'normal'.
        """
        ...
    
    def update_fonts(self, filenames):
        """
        Update the font dictionary with new font files.
        Currently not implemented.
        """
        ...
    
    def score_family(self, families, family2):
        """
        Returns a match score between the list of font families in
        *families* and the font family name *family2*.

        An exact match at the head of the list returns 0.0.

        A match further down the list will return between 0 and 1.

        No match will return 1.0.
        """
        ...
    
    def score_style(self, style1, style2):
        """
        Returns a match score between *style1* and *style2*.

        An exact match returns 0.0.

        A match between 'italic' and 'oblique' returns 0.1.

        No match returns 1.0.
        """
        ...
    
    def score_variant(self, variant1, variant2):
        """
        Returns a match score between *variant1* and *variant2*.

        An exact match returns 0.0, otherwise 1.0.
        """
        ...
    
    def score_stretch(self, stretch1, stretch2):
        """
        Returns a match score between *stretch1* and *stretch2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *stretch1* and *stretch2*, normalized
        between 0.0 and 1.0.
        """
        ...
    
    def score_weight(self, weight1, weight2):
        """
        Returns a match score between *weight1* and *weight2*.

        The result is 0.0 if both weight1 and weight 2 are given as strings
        and have the same value.

        Otherwise, the result is the absolute value of the difference between the
        CSS numeric values of *weight1* and *weight2*, normalized
        between 0.05 and 1.0.
        """
        ...
    
    def score_size(self, size1, size2):
        """
        Returns a match score between *size1* and *size2*.

        If *size2* (the size specified in the font file) is 'scalable', this
        function always returns 0.0, since any font size can be generated.

        Otherwise, the result is the absolute distance between *size1* and
        *size2*, normalized so that the usual range of font sizes (6pt -
        72pt) will lie between 0.0 and 1.0.
        """
        ...
    
    def findfont(self, prop, fontext=..., directory: Optional[Any] = ..., fallback_to_default: bool = ..., rebuild_if_missing: bool = ...):
        """
        Search the font list for the font that most closely matches
        the :class:`FontProperties` *prop*.

        :meth:`findfont` performs a nearest neighbor search.  Each
        font is given a similarity score to the target font
        properties.  The first font with the highest score is
        returned.  If no matches below a certain threshold are found,
        the default font (usually DejaVu Sans) is returned.

        `directory`, is specified, will only return fonts from the
        given directory (or subdirectory of that directory).

        The result is cached, so subsequent lookups don't have to
        perform the O(n) nearest neighbor search.

        If `fallback_to_default` is True, will fallback to the default
        font family (usually "DejaVu Sans" or "Helvetica") if
        the first lookup hard-fails.

        See the `W3C Cascading Style Sheet, Level 1
        <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ documentation
        for a description of the font finding algorithm.
        """
        ...
    


_is_opentype_cff_font_cache = {  }
def is_opentype_cff_font(filename):
    """
    Returns True if the given font is a Postscript Compact Font Format
    Font embedded in an OpenType wrapper.  Used by the PostScript and
    PDF backends that can not subset these fonts.
    """
    ...

fontManager = None
_fmcache = None
_get_font = lru_cache(64)(ft2font.FT2Font)
def get_font(filename, hinting_factor: Optional[Any] = ...):
    ...

if USE_FONTCONFIG and sys.platform != 'win32':
    def fc_match(pattern, fontext):
        ...
    
    _fc_match_cache = {  }
    def findfont(prop, fontext=...):
        ...
    
else:
    _fmcache = None
    cachedir = get_cachedir()
    fontManager = None
    _lookup_cache = { 'ttf': TempCache(),'afm': TempCache() }
    def _rebuild():
        ...
    
    def findfont(prop, **kw):
        ...
    
