"""
This type stub file was generated by pyright.
"""

import six
import numpy as np
from .path import Path
from typing import Any, Optional

"""
This module contains functions to handle markers.  Used by both the
marker functionality of `~matplotlib.axes.Axes.plot` and
`~matplotlib.axes.Axes.scatter`.

All possible markers are defined here:

============================== ===============================================
marker                         description
============================== ===============================================
`"."`                          point
`","`                          pixel
`"o"`                          circle
`"v"`                          triangle_down
`"^"`                          triangle_up
`"<"`                          triangle_left
`">"`                          triangle_right
`"1"`                          tri_down
`"2"`                          tri_up
`"3"`                          tri_left
`"4"`                          tri_right
`"8"`                          octagon
`"s"`                          square
`"p"`                          pentagon
`"P"`                          plus (filled)
`"*"`                          star
`"h"`                          hexagon1
`"H"`                          hexagon2
`"+"`                          plus
`"x"`                          x
`"X"`                          x (filled)
`"D"`                          diamond
`"d"`                          thin_diamond
`"|"`                          vline
`"_"`                          hline
TICKLEFT                       tickleft
TICKRIGHT                      tickright
TICKUP                         tickup
TICKDOWN                       tickdown
CARETLEFT                      caretleft (centered at tip)
CARETRIGHT                     caretright (centered at tip)
CARETUP                        caretup (centered at tip)
CARETDOWN                      caretdown (centered at tip)
CARETLEFTBASE                  caretleft (centered at base)
CARETRIGHTBASE                 caretright (centered at base)
CARETUPBASE                    caretup (centered at base)
`"None"`, `" "` or `""`        nothing
``'$...$'``                    render the string using mathtext.
`verts`                        a list of (x, y) pairs used for Path vertices.
                               The center of the marker is located at (0,0) and
                               the size is normalized.
path                           a `~matplotlib.path.Path` instance.
(`numsides`, `style`, `angle`) The marker can also be a tuple (`numsides`,
                               `style`, `angle`), which will create a custom,
                               regular symbol.

                               `numsides`:
                                   the number of sides

                               `style`:
                                   the style of the regular symbol:

                                   0
                                     a regular polygon
                                   1
                                     a star-like symbol
                                   2
                                     an asterisk
                                   3
                                     a circle (`numsides` and `angle` is
                                     ignored)

                               `angle`:
                                   the angle of rotation of the symbol
============================== ===============================================

For backward compatibility, the form (`verts`, 0) is also accepted,
but it is equivalent to just `verts` for giving a raw set of vertices
that define the shape.

`None` is the default which means 'nothing', however this table is
referred to from other docs for the valid inputs from marker inputs and in
those cases `None` still means 'default'.
"""
_empty_path = Path(np.empty((0, 2)))
class MarkerStyle(object):
    markers = ...
    filled_markers = ...
    fillstyles = ...
    _half_fillstyles = ...
    _point_size_reduction = ...
    def __init__(self, marker: Optional[Any] = ..., fillstyle: Optional[Any] = ...):
        """
        MarkerStyle

        Attributes
        ----------
        markers : list of known marks

        fillstyles : list of known fillstyles

        filled_markers : list of known filled markers.

        Parameters
        ----------
        marker : string or array_like, optional, default: None
            See the descriptions of possible markers in the module docstring.

        fillstyle : string, optional, default: 'full'
            'full', 'left", 'right', 'bottom', 'top', 'none'
        """
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, statedict):
        self.__dict__ = ...
    
    def _recache(self):
        ...
    
    if six.PY3:
        def __bool__(self):
            ...
        
    else:
        def __nonzero__(self):
            ...
        
    def is_filled(self):
        ...
    
    def get_fillstyle(self):
        ...
    
    def set_fillstyle(self, fillstyle):
        """
        Sets fillstyle

        Parameters
        ----------
        fillstyle : string amongst known fillstyles
        """
        ...
    
    def get_joinstyle(self):
        ...
    
    def get_capstyle(self):
        ...
    
    def get_marker(self):
        ...
    
    def set_marker(self, marker):
        ...
    
    def get_path(self):
        ...
    
    def get_transform(self):
        ...
    
    def get_alt_path(self):
        ...
    
    def get_alt_transform(self):
        ...
    
    def get_snap_threshold(self):
        ...
    
    def _set_nothing(self):
        ...
    
    def _set_custom_marker(self, path):
        ...
    
    def _set_path_marker(self):
        ...
    
    def _set_vertices(self):
        ...
    
    def _set_tuple_marker(self):
        ...
    
    def _set_mathtext_path(self):
        """
        Draws mathtext markers '$...$' using TextPath object.

        Submitted by tcb
        """
        ...
    
    def _half_fill(self):
        ...
    
    def _set_circle(self, reduction=...):
        ...
    
    def _set_pixel(self):
        ...
    
    def _set_point(self):
        ...
    
    _triangle_path = ...
    _triangle_path_u = ...
    _triangle_path_d = ...
    _triangle_path_l = ...
    _triangle_path_r = ...
    def _set_triangle(self, rot, skip):
        ...
    
    def _set_triangle_up(self):
        ...
    
    def _set_triangle_down(self):
        ...
    
    def _set_triangle_left(self):
        ...
    
    def _set_triangle_right(self):
        ...
    
    def _set_square(self):
        ...
    
    def _set_diamond(self):
        ...
    
    def _set_thin_diamond(self):
        ...
    
    def _set_pentagon(self):
        ...
    
    def _set_star(self):
        ...
    
    def _set_hexagon1(self):
        ...
    
    def _set_hexagon2(self):
        ...
    
    def _set_octagon(self):
        ...
    
    _line_marker_path = ...
    def _set_vline(self):
        ...
    
    def _set_hline(self):
        ...
    
    _tickhoriz_path = ...
    def _set_tickleft(self):
        ...
    
    def _set_tickright(self):
        ...
    
    _tickvert_path = ...
    def _set_tickup(self):
        ...
    
    def _set_tickdown(self):
        ...
    
    _tri_path = ...
    def _set_tri_down(self):
        ...
    
    def _set_tri_up(self):
        ...
    
    def _set_tri_left(self):
        ...
    
    def _set_tri_right(self):
        ...
    
    _caret_path = ...
    def _set_caretdown(self):
        ...
    
    def _set_caretup(self):
        ...
    
    def _set_caretleft(self):
        ...
    
    def _set_caretright(self):
        ...
    
    _caret_path_base = ...
    def _set_caretdownbase(self):
        ...
    
    def _set_caretupbase(self):
        ...
    
    def _set_caretleftbase(self):
        ...
    
    def _set_caretrightbase(self):
        ...
    
    _plus_path = ...
    def _set_plus(self):
        ...
    
    _x_path = ...
    def _set_x(self):
        ...
    
    _plus_filled_path = ...
    _plus_filled_path_t = ...
    def _set_plus_filled(self):
        ...
    
    _x_filled_path = ...
    _x_filled_path_t = ...
    def _set_x_filled(self):
        ...
    


