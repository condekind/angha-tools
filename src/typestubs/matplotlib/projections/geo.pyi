"""
This type stub file was generated by pyright.
"""

from matplotlib.axes import Axes
from matplotlib.ticker import Formatter
from matplotlib.transforms import Transform
from typing import Any, Optional

class GeoAxes(Axes):
    """An abstract base class for geographic projections."""
    class ThetaFormatter(Formatter):
        """
        Used to format the theta tick labels.  Converts the native
        unit of radians into degrees and adds a degree symbol.
        """
        def __init__(self, round_to=...):
            ...
        
        def __call__(self, x, pos: Optional[Any] = ...):
            ...
        
    
    
    RESOLUTION = ...
    def _init_axis(self):
        self.xaxis = ...
        self.yaxis = ...
    
    def cla(self):
        ...
    
    def _set_lim_and_transforms(self):
        self.transProjection = ...
        self.transAffine = ...
        self.transAxes = ...
        self.transData = ...
    
    def _get_affine_transform(self):
        ...
    
    def get_xaxis_transform(self, which=...):
        ...
    
    def get_xaxis_text1_transform(self, pad):
        ...
    
    def get_xaxis_text2_transform(self, pad):
        ...
    
    def get_yaxis_transform(self, which=...):
        ...
    
    def get_yaxis_text1_transform(self, pad):
        ...
    
    def get_yaxis_text2_transform(self, pad):
        ...
    
    def _gen_axes_patch(self):
        ...
    
    def _gen_axes_spines(self):
        ...
    
    def set_yscale(self, *args, **kwargs):
        ...
    
    set_xscale = ...
    def set_xlim(self, *args, **kwargs):
        ...
    
    set_ylim = ...
    def format_coord(self, lon, lat):
        'return a format string formatting the coordinate'
        ...
    
    def set_longitude_grid(self, degrees):
        """
        Set the number of degrees between each longitude grid.
        """
        ...
    
    def set_latitude_grid(self, degrees):
        """
        Set the number of degrees between each latitude grid.
        """
        ...
    
    def set_longitude_grid_ends(self, degrees):
        """
        Set the latitude(s) at which to stop drawing the longitude grids.
        """
        ...
    
    def get_data_ratio(self):
        '''
        Return the aspect ratio of the data itself.
        '''
        ...
    
    def can_zoom(self):
        """
        Return *True* if this axes supports the zoom box button functionality.

        This axes object does not support interactive zoom box.
        """
        ...
    
    def can_pan(self):
        """
        Return *True* if this axes supports the pan/zoom button functionality.

        This axes object does not support interactive pan/zoom.
        """
        ...
    
    def start_pan(self, x, y, button):
        ...
    
    def end_pan(self):
        ...
    
    def drag_pan(self, button, key, x, y):
        ...
    


class _GeoTransform(Transform):
    input_dims = ...
    output_dims = ...
    is_separable = ...
    def __init__(self, resolution):
        """
        Create a new geographical transform.

        Resolution is the number of steps to interpolate between each input
        line segment to approximate its path in curved space.
        """
        ...
    
    def __str__(self):
        ...
    
    def transform_path_non_affine(self, path):
        ...
    


class AitoffAxes(GeoAxes):
    name = ...
    class AitoffTransform(_GeoTransform):
        """The base Aitoff transform."""
        def transform_non_affine(self, ll):
            ...
        
        def inverted(self):
            ...
        
    
    
    class InvertedAitoffTransform(_GeoTransform):
        def transform_non_affine(self, xy):
            ...
        
        def inverted(self):
            ...
        
    
    
    def __init__(self, *args, **kwargs):
        ...
    
    def _get_core_transform(self, resolution):
        ...
    


class HammerAxes(GeoAxes):
    name = ...
    class HammerTransform(_GeoTransform):
        """The base Hammer transform."""
        def transform_non_affine(self, ll):
            ...
        
        def inverted(self):
            ...
        
    
    
    class InvertedHammerTransform(_GeoTransform):
        def transform_non_affine(self, xy):
            ...
        
        def inverted(self):
            ...
        
    
    
    def __init__(self, *args, **kwargs):
        ...
    
    def _get_core_transform(self, resolution):
        ...
    


class MollweideAxes(GeoAxes):
    name = ...
    class MollweideTransform(_GeoTransform):
        """The base Mollweide transform."""
        def transform_non_affine(self, ll):
            ...
        
        def inverted(self):
            ...
        
    
    
    class InvertedMollweideTransform(_GeoTransform):
        def transform_non_affine(self, xy):
            ...
        
        def inverted(self):
            ...
        
    
    
    def __init__(self, *args, **kwargs):
        ...
    
    def _get_core_transform(self, resolution):
        ...
    


class LambertAxes(GeoAxes):
    name = ...
    class LambertTransform(_GeoTransform):
        """The base Lambert transform."""
        def __init__(self, center_longitude, center_latitude, resolution):
            """
            Create a new Lambert transform.  Resolution is the number of steps
            to interpolate between each input line segment to approximate its
            path in curved Lambert space.
            """
            ...
        
        def transform_non_affine(self, ll):
            ...
        
        def inverted(self):
            ...
        
    
    
    class InvertedLambertTransform(_GeoTransform):
        def __init__(self, center_longitude, center_latitude, resolution):
            ...
        
        def transform_non_affine(self, xy):
            ...
        
        def inverted(self):
            ...
        
    
    
    def __init__(self, *args, **kwargs):
        ...
    
    def cla(self):
        ...
    
    def _get_core_transform(self, resolution):
        ...
    
    def _get_affine_transform(self):
        ...
    


