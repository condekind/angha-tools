"""
This type stub file was generated by pyright.
"""

import logging
import matplotlib as mpl
from typing import Any, Optional

r"""
This module supports embedded TeX expressions in matplotlib via dvipng
and dvips for the raster and postscript backends.  The tex and
dvipng/dvips information is cached in ~/.matplotlib/tex.cache for reuse between
sessions

Requirements:

* latex
* \*Agg backends: dvipng>=1.6
* PS backend: psfrag, dvips, and Ghostscript>=8.60

Backends:

* \*Agg
* PS
* PDF

For raster output, you can get RGBA numpy arrays from TeX expressions
as follows::

  texmanager = TexManager()
  s = ('\TeX\ is Number '
       '$\displaystyle\sum_{n=1}^\infty\frac{-e^{i\pi}}{2^n}$!')
  Z = texmanager.get_rgba(s, fontsize=12, dpi=80, rgb=(1,0,0))

To enable tex rendering of all text in your matplotlib figure, set
text.usetex in your matplotlibrc file or include these two lines in
your script::

  from matplotlib import rc
  rc('text', usetex=True)

"""
_log = logging.getLogger(__name__)
@mpl.cbook.deprecated("2.1")
def dvipng_hack_alpha():
    ...

class TexManager(object):
    """
    Convert strings to dvi files using TeX, caching the results to a directory.
    """
    cachedir = ...
    if cachedir is not None:
        texcache = ...
    else:
        texcache = ...
    rgba_arrayd = ...
    grey_arrayd = ...
    postscriptd = ...
    pscnt = ...
    serif = ...
    sans_serif = ...
    monospace = ...
    cursive = ...
    font_family = ...
    font_families = ...
    font_info = ...
    _rc_cache = ...
    _rc_cache_keys = ...
    def __init__(self):
        ...
    
    def get_basefile(self, tex, fontsize, dpi: Optional[Any] = ...):
        """
        Return a filename based on a hash of the string, fontsize, and dpi.
        """
        ...
    
    def get_font_config(self):
        """Reinitializes self if relevant rcParams on have changed."""
        ...
    
    def get_font_preamble(self):
        """
        Return a string containing font configuration for the tex preamble.
        """
        ...
    
    def get_custom_preamble(self):
        """Return a string containing user additions to the tex preamble."""
        ...
    
    def make_tex(self, tex, fontsize):
        """
        Generate a tex file to render the tex string at a specific font size.

        Return the file name.
        """
        ...
    
    _re_vbox = ...
    def make_tex_preview(self, tex, fontsize):
        """
        Generate a tex file to render the tex string at a specific font size.

        It uses the preview.sty to determine the dimension (width, height,
        descent) of the output.

        Return the file name.
        """
        ...
    
    def _run_checked_subprocess(self, command, tex):
        ...
    
    def make_dvi(self, tex, fontsize):
        """
        Generate a dvi file containing latex's layout of tex string.

        Return the file name.
        """
        ...
    
    def make_dvi_preview(self, tex, fontsize):
        """
        Generate a dvi file containing latex's layout of tex string.

        It calls make_tex_preview() method and store the size information
        (width, height, descent) in a separate file.

        Return the file name.
        """
        ...
    
    def make_png(self, tex, fontsize, dpi):
        """
        Generate a png file containing latex's rendering of tex string.

        Return the file name.
        """
        ...
    
    @mpl.cbook.deprecated("2.2")
    def make_ps(self, tex, fontsize):
        """
        Generate a postscript file containing latex's rendering of tex string.

        Return the file name.
        """
        ...
    
    @mpl.cbook.deprecated("2.2")
    def get_ps_bbox(self, tex, fontsize):
        """
        Return a list of PS bboxes for latex's rendering of the tex string.
        """
        ...
    
    def get_grey(self, tex, fontsize: Optional[Any] = ..., dpi: Optional[Any] = ...):
        """Return the alpha channel."""
        ...
    
    def get_rgba(self, tex, fontsize: Optional[Any] = ..., dpi: Optional[Any] = ..., rgb=...):
        """Return latex's rendering of the tex string as an rgba array."""
        ...
    
    def get_text_width_height_descent(self, tex, fontsize, renderer: Optional[Any] = ...):
        """Return width, height and descent of the text."""
        ...
    


