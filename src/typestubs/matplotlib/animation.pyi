"""
This type stub file was generated by pyright.
"""

import six
import abc
import contextlib
import logging
import platform
from typing import Any, Optional

if six.PY2:
    ...
else:
    ...
_log = logging.getLogger(__name__)
if platform.system() == 'Windows':
    subprocess_creation_flags = CREATE_NO_WINDOW = 134217728
else:
    subprocess_creation_flags = 0
def adjusted_figsize(w, h, dpi, n):
    '''Compute figure size so that pixels are a multiple of n

    Parameters
    ----------
    w, h : float
        Size in inches

    dpi : float
        The dpi

    n : int
        The target multiple

    Returns
    -------
    wnew, hnew : float
        The new figure size in inches.
    '''
    ...

class MovieWriterRegistry(object):
    '''Registry of available writer classes by human readable name.'''
    def __init__(self):
        self.avail = ...
    
    def set_dirty(self):
        """Sets a flag to re-setup the writers."""
        ...
    
    def register(self, name):
        """Decorator for registering a class under a name.

        Example use::

            @registry.register(name)
            class Foo:
                pass
        """
        ...
    
    def ensure_not_dirty(self):
        """If dirty, reasks the writers if they are available"""
        ...
    
    def reset_available_writers(self):
        """Reset the available state of all registered writers"""
        self.avail = ...
    
    def list(self):
        '''Get a list of available MovieWriters.'''
        ...
    
    def is_available(self, name):
        '''Check if given writer is available by name.

        Parameters
        ----------
        name : str

        Returns
        -------
        available : bool
        '''
        ...
    
    def __getitem__(self, name):
        ...
    


writers = MovieWriterRegistry()
class AbstractMovieWriter(six.with_metaclass(abc.ABCMeta)):
    '''
    Abstract base class for writing movies. Fundamentally, what a MovieWriter
    does is provide is a way to grab frames by calling grab_frame().

    setup() is called to start the process and finish() is called afterwards.

    This class is set up to provide for writing movie frame data to a pipe.
    saving() is provided as a context manager to facilitate this process as::

        with moviewriter.saving(fig, outfile='myfile.mp4', dpi=100):
            # Iterate over frames
            moviewriter.grab_frame(**savefig_kwargs)

    The use of the context manager ensures that setup() and finish() are
    performed as necessary.

    An instance of a concrete subclass of this class can be given as the
    ``writer`` argument of `Animation.save()`.
    '''
    @abc.abstractmethod
    def setup(self, fig, outfile, dpi: Optional[Any] = ...):
        '''
        Perform setup for writing the movie file.

        Parameters
        ----------
        fig: `matplotlib.figure.Figure` instance
            The figure object that contains the information for frames
        outfile: string
            The filename of the resulting movie file
        dpi: int, optional
            The DPI (or resolution) for the file.  This controls the size
            in pixels of the resulting movie file. Default is ``fig.dpi``.
        '''
        ...
    
    @abc.abstractmethod
    def grab_frame(self, **savefig_kwargs):
        '''
        Grab the image information from the figure and save as a movie frame.

        All keyword arguments in savefig_kwargs are passed on to the `savefig`
        command that saves the figure.
        '''
        ...
    
    @abc.abstractmethod
    def finish(self):
        '''Finish any processing for writing the movie.'''
        ...
    
    @contextlib.contextmanager
    def saving(self, fig, outfile, dpi, *args, **kwargs):
        '''
        Context manager to facilitate writing the movie file.

        ``*args, **kw`` are any parameters that should be passed to `setup`.
        '''
        ...
    


class MovieWriter(AbstractMovieWriter):
    '''Base class for writing movies.

    This class is set up to provide for writing movie frame data to a pipe.
    See examples for how to use these classes.

    Attributes
    ----------
    frame_format : str
        The format used in writing frame data, defaults to 'rgba'
    fig : `~matplotlib.figure.Figure`
        The figure to capture data from.
        This must be provided by the sub-classes.

    '''
    def __init__(self, fps=..., codec: Optional[Any] = ..., bitrate: Optional[Any] = ..., extra_args: Optional[Any] = ..., metadata: Optional[Any] = ...):
        '''MovieWriter

        Parameters
        ----------
        fps: int
            Framerate for movie.
        codec: string or None, optional
            The codec to use. If ``None`` (the default) the ``animation.codec``
            rcParam is used.
        bitrate: int or None, optional
            The bitrate for the saved movie file, which is one way to control
            the output file size and quality. The default value is ``None``,
            which uses the ``animation.bitrate`` rcParam.  A value of -1
            implies that the bitrate should be determined automatically by the
            underlying utility.
        extra_args: list of strings or None, optional
            A list of extra string arguments to be passed to the underlying
            movie utility. The default is ``None``, which passes the additional
            arguments in the ``animation.extra_args`` rcParam.
        metadata: Dict[str, str] or None
            A dictionary of keys and values for metadata to include in the
            output file. Some keys that may be of use include:
            title, artist, genre, subject, copyright, srcform, comment.
        '''
        self.fps = ...
        self.frame_format = ...
    
    @property
    def frame_size(self):
        '''A tuple ``(width, height)`` in pixels of a movie frame.'''
        ...
    
    def _adjust_frame_size(self):
        ...
    
    def setup(self, fig, outfile, dpi: Optional[Any] = ...):
        '''
        Perform setup for writing the movie file.

        Parameters
        ----------
        fig : matplotlib.figure.Figure
            The figure object that contains the information for frames
        outfile : string
            The filename of the resulting movie file
        dpi : int, optional
            The DPI (or resolution) for the file.  This controls the size
            in pixels of the resulting movie file. Default is fig.dpi.
        '''
        self.outfile = ...
        self.fig = ...
        self.dpi = ...
    
    def _run(self):
        ...
    
    def finish(self):
        '''Finish any processing for writing the movie.'''
        ...
    
    def grab_frame(self, **savefig_kwargs):
        '''
        Grab the image information from the figure and save as a movie frame.

        All keyword arguments in savefig_kwargs are passed on to the `savefig`
        command that saves the figure.
        '''
        ...
    
    def _frame_sink(self):
        '''Returns the place to which frames should be written.'''
        ...
    
    def _args(self):
        '''Assemble list of utility-specific command-line arguments.'''
        ...
    
    def cleanup(self):
        '''Clean-up and collect the process used to write the movie file.'''
        ...
    
    @classmethod
    def bin_path(cls):
        '''
        Returns the binary path to the commandline tool used by a specific
        subclass. This is a class method so that the tool can be looked for
        before making a particular MovieWriter subclass available.
        '''
        ...
    
    @classmethod
    def isAvailable(cls):
        '''
        Check to see if a MovieWriter subclass is actually available by
        running the commandline tool.
        '''
        ...
    
    @classmethod
    def _handle_subprocess(cls, process):
        ...
    


class FileMovieWriter(MovieWriter):
    '''`MovieWriter` for writing to individual files and stitching at the end.

    This must be sub-classed to be useful.
    '''
    def __init__(self, *args, **kwargs):
        self.frame_format = ...
    
    def setup(self, fig, outfile, dpi: Optional[Any] = ..., frame_prefix=..., clear_temp: bool = ...):
        '''Perform setup for writing the movie file.

        Parameters
        ----------
        fig : matplotlib.figure.Figure
            The figure to grab the rendered frames from.
        outfile : str
            The filename of the resulting movie file.
        dpi : number, optional
            The dpi of the output file. This, with the figure size,
            controls the size in pixels of the resulting movie file.
            Default is fig.dpi.
        frame_prefix : str, optional
            The filename prefix to use for temporary files.  Defaults to
            ``'_tmp'``.
        clear_temp : bool, optional
            If the temporary files should be deleted after stitching
            the final result.  Setting this to ``False`` can be useful for
            debugging.  Defaults to ``True``.

        '''
        self.fig = ...
        self.outfile = ...
        self.dpi = ...
        self.clear_temp = ...
        self.temp_prefix = ...
        self.fname_format_str = ...
    
    @property
    def frame_format(self):
        '''
        Format (png, jpeg, etc.) to use for saving the frames, which can be
        decided by the individual subclasses.
        '''
        ...
    
    @frame_format.setter
    def frame_format(self, frame_format):
        ...
    
    def _base_temp_name(self):
        ...
    
    def _frame_sink(self):
        ...
    
    def grab_frame(self, **savefig_kwargs):
        '''
        Grab the image information from the figure and save as a movie frame.
        All keyword arguments in savefig_kwargs are passed on to the `savefig`
        command that saves the figure.
        '''
        ...
    
    def finish(self):
        ...
    
    def cleanup(self):
        ...
    


@writers.register('pillow')
class PillowWriter(MovieWriter):
    @classmethod
    def isAvailable(cls):
        ...
    
    def __init__(self, *args, **kwargs):
        ...
    
    def setup(self, fig, outfile, dpi: Optional[Any] = ...):
        ...
    
    def grab_frame(self, **savefig_kwargs):
        ...
    
    def finish(self):
        ...
    


class FFMpegBase(object):
    '''Mixin class for FFMpeg output.

    To be useful this must be multiply-inherited from with a
    `MovieWriterBase` sub-class.
    '''
    exec_key = ...
    args_key = ...
    @property
    def output_args(self):
        ...
    
    @classmethod
    def _handle_subprocess(cls, process):
        ...
    


@writers.register('ffmpeg')
class FFMpegWriter(FFMpegBase, MovieWriter):
    '''Pipe-based ffmpeg writer.

    Frames are streamed directly to ffmpeg via a pipe and written in a single
    pass.
    '''
    def _args(self):
        ...
    


@writers.register('ffmpeg_file')
class FFMpegFileWriter(FFMpegBase, FileMovieWriter):
    '''File-based ffmpeg writer.

    Frames are written to temporary files on disk and then stitched
    together at the end.

    '''
    supported_formats = ...
    def _args(self):
        ...
    


class AVConvBase(FFMpegBase):
    '''Mixin class for avconv output.

    To be useful this must be multiply-inherited from with a
    `MovieWriterBase` sub-class.
    '''
    exec_key = ...
    args_key = ...
    @classmethod
    def _handle_subprocess(cls, process):
        ...
    


@writers.register('avconv')
class AVConvWriter(AVConvBase, FFMpegWriter):
    '''Pipe-based avconv writer.

    Frames are streamed directly to avconv via a pipe and written in a single
    pass.
    '''
    ...


@writers.register('avconv_file')
class AVConvFileWriter(AVConvBase, FFMpegFileWriter):
    '''File-based avconv writer.

    Frames are written to temporary files on disk and then stitched
    together at the end.
    '''
    ...


class ImageMagickBase(object):
    '''Mixin class for ImageMagick output.

    To be useful this must be multiply-inherited from with a
    `MovieWriterBase` sub-class.
    '''
    exec_key = ...
    args_key = ...
    @property
    def delay(self):
        ...
    
    @property
    def output_args(self):
        ...
    
    @classmethod
    def _init_from_registry(cls):
        ...
    
    @classmethod
    def isAvailable(cls):
        '''
        Check to see if a ImageMagickWriter is actually available.

        Done by first checking the windows registry (if applicable) and then
        running the commandline tool.
        '''
        ...
    


@writers.register('imagemagick')
class ImageMagickWriter(ImageMagickBase, MovieWriter):
    '''Pipe-based animated gif.

    Frames are streamed directly to ImageMagick via a pipe and written
    in a single pass.

    '''
    def _args(self):
        ...
    


@writers.register('imagemagick_file')
class ImageMagickFileWriter(ImageMagickBase, FileMovieWriter):
    '''File-based animated gif writer.

    Frames are written to temporary files on disk and then stitched
    together at the end.

    '''
    supported_formats = ...
    def _args(self):
        ...
    


def _included_frames(frame_list, frame_format):
    """frame_list should be a list of filenames"""
    ...

def _embedded_frames(frame_list, frame_format):
    """frame_list should be a list of base64-encoded png files"""
    ...

@writers.register('html')
class HTMLWriter(FileMovieWriter):
    supported_formats = ...
    args_key = ...
    @classmethod
    def isAvailable(cls):
        ...
    
    def __init__(self, fps=..., codec: Optional[Any] = ..., bitrate: Optional[Any] = ..., extra_args: Optional[Any] = ..., metadata: Optional[Any] = ..., embed_frames: bool = ..., default_mode=..., embed_limit: Optional[Any] = ...):
        self.embed_frames = ...
        self.default_mode = ...
    
    def setup(self, fig, outfile, dpi, frame_dir: Optional[Any] = ...):
        ...
    
    def grab_frame(self, **savefig_kwargs):
        ...
    
    def _run(self):
        class ProcessStandin(object):
            ...
        
        
    


class Animation(object):
    '''This class wraps the creation of an animation using matplotlib.

    It is only a base class which should be subclassed to provide
    needed behavior.

    This class is not typically used directly.

    Parameters
    ----------
    fig : matplotlib.figure.Figure
       The figure object that is used to get draw, resize, and any
       other needed events.

    event_source : object, optional
       A class that can run a callback when desired events
       are generated, as well as be stopped and started.

       Examples include timers (see :class:`TimedAnimation`) and file
       system notifications.

    blit : bool, optional
       controls whether blitting is used to optimize drawing.  Defaults
       to ``False``.

    See Also
    --------
    FuncAnimation,  ArtistAnimation

    '''
    def __init__(self, fig, event_source: Optional[Any] = ..., blit: bool = ...):
        self.frame_seq = ...
        self.event_source = ...
    
    def _start(self, *args):
        '''
        Starts interactive animation. Adds the draw frame command to the GUI
        handler, calls show to start the event loop.
        '''
        ...
    
    def _stop(self, *args):
        self.event_source = ...
    
    def save(self, filename, writer: Optional[Any] = ..., fps: Optional[Any] = ..., dpi: Optional[Any] = ..., codec: Optional[Any] = ..., bitrate: Optional[Any] = ..., extra_args: Optional[Any] = ..., metadata: Optional[Any] = ..., extra_anim: Optional[Any] = ..., savefig_kwargs: Optional[Any] = ...):
        '''Saves a movie file by drawing every frame.

        Parameters
        ----------

        filename : str
            The output filename, e.g., :file:`mymovie.mp4`.

        writer : :class:`MovieWriter` or str, optional
            A `MovieWriter` instance to use or a key that identifies a
            class to use, such as 'ffmpeg'. If ``None``, defaults to
            :rc:`animation.writer`.

        fps : number, optional
           Frames per second in the movie. Defaults to ``None``, which will use
           the animation's specified interval to set the frames per second.

        dpi : number, optional
           Controls the dots per inch for the movie frames.  This combined with
           the figure's size in inches controls the size of the movie.  If
           ``None``, defaults to :rc:`savefig.dpi`.

        codec : str, optional
           The video codec to be used. Not all codecs are supported
           by a given :class:`MovieWriter`. If ``None``, default to
           :rc:`animation.codec`.

        bitrate : number, optional
           Specifies the number of bits used per second in the compressed
           movie, in kilobits per second. A higher number means a higher
           quality movie, but at the cost of increased file size. If ``None``,
           defaults to :rc:`animation.bitrate`.

        extra_args : list, optional
           List of extra string arguments to be passed to the underlying movie
           utility. If ``None``, defaults to :rc:`animation.extra_args`.

        metadata : Dict[str, str], optional
           Dictionary of keys and values for metadata to include in
           the output file. Some keys that may be of use include:
           title, artist, genre, subject, copyright, srcform, comment.

        extra_anim : list, optional
           Additional `Animation` objects that should be included
           in the saved movie file. These need to be from the same
           `matplotlib.figure.Figure` instance. Also, animation frames will
           just be simply combined, so there should be a 1:1 correspondence
           between the frames from the different animations.

        savefig_kwargs : dict, optional
           Is a dictionary containing keyword arguments to be passed
           on to the `savefig` command which is called repeatedly to
           save the individual frames.

        Notes
        -----
        fps, codec, bitrate, extra_args, metadata are used to
        construct a :class:`MovieWriter` instance and can only be
        passed if `writer` is a string.  If they are passed as
        non-`None` and ``writer`` is a :class:`MovieWriter`, a
        `RuntimeError` will be raised.

        '''
        ...
    
    def _step(self, *args):
        '''
        Handler for getting events. By default, gets the next frame in the
        sequence and hands the data off to be drawn.
        '''
        ...
    
    def new_frame_seq(self):
        '''Creates a new sequence of frame information.'''
        ...
    
    def new_saved_frame_seq(self):
        '''Creates a new sequence of saved/cached frame information.'''
        ...
    
    def _draw_next_frame(self, framedata, blit):
        ...
    
    def _init_draw(self):
        ...
    
    def _pre_draw(self, framedata, blit):
        ...
    
    def _draw_frame(self, framedata):
        ...
    
    def _post_draw(self, framedata, blit):
        ...
    
    def _blit_draw(self, artists, bg_cache):
        ...
    
    def _blit_clear(self, artists, bg_cache):
        ...
    
    def _setup_blit(self):
        ...
    
    def _handle_resize(self, *args):
        ...
    
    def _end_redraw(self, evt):
        ...
    
    def to_html5_video(self, embed_limit: Optional[Any] = ...):
        '''Returns animation as an HTML5 video tag.

        This saves the animation as an h264 video, encoded in base64
        directly into the HTML5 video tag. This respects the rc parameters
        for the writer as well as the bitrate. This also makes use of the
        ``interval`` to control the speed, and uses the ``repeat``
        parameter to decide whether to loop.
        '''
        ...
    
    def to_jshtml(self, fps: Optional[Any] = ..., embed_frames: bool = ..., default_mode: Optional[Any] = ...):
        """Generate HTML representation of the animation"""
        ...
    
    def _repr_html_(self):
        '''IPython display hook for rendering.'''
        ...
    


class TimedAnimation(Animation):
    ''':class:`Animation` subclass for time-based animation.

    A new frame is drawn every *interval* milliseconds.

    Parameters
    ----------
    fig : matplotlib.figure.Figure
       The figure object that is used to get draw, resize, and any
       other needed events.

    interval : number, optional
       Delay between frames in milliseconds.  Defaults to 200.

    repeat_delay : number, optional
        If the animation in repeated, adds a delay in milliseconds
        before repeating the animation.  Defaults to ``None``.

    repeat : bool, optional
        Controls whether the animation should repeat when the sequence
        of frames is completed.  Defaults to ``True``.

    blit : bool, optional
        Controls whether blitting is used to optimize drawing.  Defaults
        to ``False``.

    '''
    def __init__(self, fig, interval=..., repeat_delay: Optional[Any] = ..., repeat: bool = ..., event_source: Optional[Any] = ..., *args, **kwargs):
        self.repeat = ...
    
    def _step(self, *args):
        '''
        Handler for getting events.
        '''
        ...
    
    def _stop(self, *args):
        ...
    
    def _loop_delay(self, *args):
        ...
    


class ArtistAnimation(TimedAnimation):
    '''Animation using a fixed set of `Artist` objects.

    Before creating an instance, all plotting should have taken place
    and the relevant artists saved.

    Parameters
    ----------
    fig : matplotlib.figure.Figure
       The figure object that is used to get draw, resize, and any
       other needed events.

    artists : list
        Each list entry a collection of artists that represent what
        needs to be enabled on each frame. These will be disabled for
        other frames.

    interval : number, optional
       Delay between frames in milliseconds.  Defaults to 200.

    repeat_delay : number, optional
        If the animation in repeated, adds a delay in milliseconds
        before repeating the animation.  Defaults to ``None``.

    repeat : bool, optional
        Controls whether the animation should repeat when the sequence
        of frames is completed. Defaults to ``True``.

    blit : bool, optional
        Controls whether blitting is used to optimize drawing.  Defaults
        to ``False``.

    '''
    def __init__(self, fig, artists, *args, **kwargs):
        ...
    
    def _init_draw(self):
        ...
    
    def _pre_draw(self, framedata, blit):
        '''
        Clears artists from the last frame.
        '''
        ...
    
    def _draw_frame(self, artists):
        ...
    


class FuncAnimation(TimedAnimation):
    '''
    Makes an animation by repeatedly calling a function ``func``.

    Parameters
    ----------
    fig : matplotlib.figure.Figure
       The figure object that is used to get draw, resize, and any
       other needed events.

    func : callable
       The function to call at each frame.  The first argument will
       be the next value in ``frames``.   Any additional positional
       arguments can be supplied via the ``fargs`` parameter.

       The required signature is::

          def func(frame, *fargs) -> iterable_of_artists:

    frames : iterable, int, generator function, or None, optional
        Source of data to pass ``func`` and each frame of the animation

        If an iterable, then simply use the values provided.  If the
        iterable has a length, it will override the ``save_count`` kwarg.

        If an integer, then equivalent to passing ``range(frames)``

        If a generator function, then must have the signature::

           def gen_function() -> obj:

        If ``None``, then equivalent to passing ``itertools.count``.

        In all of these cases, the values in *frames* is simply passed through
        to the user-supplied *func* and thus can be of any type.

    init_func : callable, optional
       A function used to draw a clear frame. If not given, the
       results of drawing from the first item in the frames sequence
       will be used. This function will be called once before the
       first frame.

       If ``blit == True``, ``init_func`` must return an iterable of artists
       to be re-drawn.

       The required signature is::

          def init_func() -> iterable_of_artists:

    fargs : tuple or None, optional
       Additional arguments to pass to each call to *func*.

    save_count : int, optional
       The number of values from *frames* to cache.

    interval : number, optional
       Delay between frames in milliseconds.  Defaults to 200.

    repeat_delay : number, optional
       If the animation in repeated, adds a delay in milliseconds
       before repeating the animation.  Defaults to ``None``.

    repeat : bool, optional
       Controls whether the animation should repeat when the sequence
       of frames is completed.  Defaults to ``True``.

    blit : bool, optional
       Controls whether blitting is used to optimize drawing.  Defaults
       to ``False``.

    '''
    def __init__(self, fig, func, frames: Optional[Any] = ..., init_func: Optional[Any] = ..., fargs: Optional[Any] = ..., save_count: Optional[Any] = ..., **kwargs):
        self.save_count = ...
    
    def new_frame_seq(self):
        ...
    
    def new_saved_frame_seq(self):
        ...
    
    def _init_draw(self):
        ...
    
    def _draw_frame(self, framedata):
        ...
    


