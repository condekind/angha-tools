"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class Container(tuple):
    """
    Base class for containers.

    Containers are classes that collect semantically related Artists such as
    the bars of a bar plot.
    """
    def __repr__(self):
        ...
    
    def __new__(cls, *kl, **kwargs):
        ...
    
    def __init__(self, kl, label: Optional[Any] = ...):
        self.eventson = ...
    
    def set_remove_method(self, f):
        ...
    
    def remove(self):
        ...
    
    def __getstate__(self):
        ...
    
    def get_label(self):
        """
        Get the label used for this artist in the legend.
        """
        ...
    
    def set_label(self, s):
        """
        Set the label to *s* for auto legend.

        ACCEPTS: string or anything printable with '%s' conversion.
        """
        ...
    
    def add_callback(self, func):
        """
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        """
        ...
    
    def remove_callback(self, oid):
        """
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        """
        ...
    
    def pchanged(self):
        """
        Fire an event when property changed, calling all of the
        registered callbacks.
        """
        ...
    
    def get_children(self):
        ...
    


class BarContainer(Container):
    """
    Container for the artists of bar plots (e.g. created by `.Axes.bar`).

    The container can be treated as a tuple of the *patches* themselves.
    Additionally, you can access these and further parameters by the
    attributes.

    Attributes
    ----------
    patches : list of :class:`~matplotlib.patches.Rectangle`
        The artists of the bars.

    errorbar : None or :class:`~matplotlib.container.ErrorbarContainer`
        A container for the error bar artists if error bars are present.
        *None* otherwise.

    """
    def __init__(self, patches, errorbar: Optional[Any] = ..., **kwargs):
        self.patches = ...
        self.errorbar = ...
    


class ErrorbarContainer(Container):
    """
    Container for the artists of error bars (e.g. created by `.Axes.errorbar`).

    The container can be treated as the *lines* tuple itself.
    Additionally, you can access these and further parameters by the
    attributes.

    Attributes
    ----------
    lines : tuple
        Tuple of ``(data_line, caplines, barlinecols)``.

        - data_line : :class:`~matplotlib.lines.Line2D` instance of
          x, y plot markers and/or line.
        - caplines : tuple of :class:`~matplotlib.lines.Line2D` instances of
          the error bar caps.
        - barlinecols : list of :class:`~matplotlib.collections.LineCollection`
          with the horizontal and vertical error ranges.

    has_xerr, has_yerr : bool
        ``True`` if the errorbar has x/y errors.

    """
    def __init__(self, lines, has_xerr: bool = ..., has_yerr: bool = ..., **kwargs):
        self.lines = ...
        self.has_xerr = ...
        self.has_yerr = ...
    


class StemContainer(Container):
    """
    Container for the artists created in a :meth:`.Axes.stem` plot.

    The container can be treated like a namedtuple ``(markerline, stemlines,
    baseline)``.

    Attributes
    ----------
    markerline :  :class:`~matplotlib.lines.Line2D`
        The artist of the markers at the stem heads.

    stemlines : list of :class:`~matplotlib.lines.Line2D`
        The artists of the vertical lines for all stems.

    baseline : :class:`~matplotlib.lines.Line2D`
        The artist of the horizontal baseline.

    """
    def __init__(self, markerline_stemlines_baseline, **kwargs):
        self.markerline = ...
        self.stemlines = ...
        self.baseline = ...
    


