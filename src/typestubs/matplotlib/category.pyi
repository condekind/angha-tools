"""
This type stub file was generated by pyright.
"""

import six
import numpy as np
import matplotlib.units as units
import matplotlib.ticker as ticker
from typing import Any, Optional

"""
Module that allows plotting of string "category" data.  i.e.
``plot(['d', 'f', 'a'],[1, 2, 3])`` will plot three points with x-axis
values of 'd', 'f', 'a'.

See :doc:`/gallery/lines_bars_and_markers/categorical_variables` for an
example.

The module uses Matplotlib's `matplotlib.units` mechanism to convert from
strings to integers, provides a tick locator and formatter, and the
class:`.UnitData` that creates and stores the string-to-integer mapping.
"""
VALID_TYPES = tuple(set(six.string_types + (bytes, six.text_type, np.str_, np.bytes_)))
class StrCategoryConverter(units.ConversionInterface):
    @staticmethod
    def convert(value, unit, axis):
        """Converts strings in value to floats using
        mapping information store in the  unit object

        Parameters
        ----------
        value : string or iterable
            value or list of values to be converted
        unit : :class:`.UnitData`
           object string unit information for value
        axis : :class:`~matplotlib.Axis.axis`
            axis on which the converted value is plotted

        Returns
        -------
        mapped_ value : float or ndarray[float]

        .. note:: axis is not used in this function
        """
        ...
    
    @staticmethod
    def axisinfo(unit, axis):
        """Sets the default axis ticks and labels

        Parameters
        ---------
        unit : :class:`.UnitData`
            object string unit information for value
        axis : :class:`~matplotlib.Axis.axis`
            axis for which information is being set

        Returns
        -------
        :class:~matplotlib.units.AxisInfo~
            Information to support default tick labeling

        .. note: axis is not used
        """
        ...
    
    @staticmethod
    def default_units(data, axis):
        """ Sets and updates the :class:`~matplotlib.Axis.axis~ units

        Parameters
        ----------
        data : string or iterable of strings
        axis : :class:`~matplotlib.Axis.axis`
            axis on which the data is plotted

        Returns
        -------
        class:~.UnitData~
            object storing string to integer mapping
        """
        ...
    


class StrCategoryLocator(ticker.Locator):
    """tick at every integer mapping of the string data"""
    def __init__(self, units_mapping):
        """
        Parameters
        -----------
        units_mapping : Dict[str, int]
             string:integer mapping
        """
        ...
    
    def __call__(self):
        ...
    
    def tick_values(self, vmin, vmax):
        ...
    


class StrCategoryFormatter(ticker.Formatter):
    """String representation of the data at every tick"""
    def __init__(self, units_mapping):
        """
        Parameters
        ----------
        units_mapping : Dict[Str, int]
            string:integer mapping
        """
        ...
    
    def __call__(self, x, pos: Optional[Any] = ...):
        ...
    
    @staticmethod
    def _text(value):
        """Converts text values into `utf-8` or `ascii` strings
        """
        ...
    


class UnitData(object):
    def __init__(self, data: Optional[Any] = ...):
        """Create mapping between unique categorical values
        and integer identifiers
        ----------
        data: iterable
              sequence of string values
        """
        ...
    
    def update(self, data):
        """Maps new values to integer identifiers.

        Paramters
        ---------
        data: iterable
              sequence of string values

        Raises
        ------
        TypeError
              If the value in data is not a string, unicode, bytes type
        """
        ...
    


