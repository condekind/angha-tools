"""
This type stub file was generated by pyright.
"""

import six
import logging
import sys
from collections import namedtuple
from functools import partial
from matplotlib import cbook
from typing import Any, Optional

"""
A module for reading dvi files output by TeX. Several limitations make
this not (currently) useful as a general-purpose dvi preprocessor, but
it is currently used by the pdf backend for processing usetex text.

Interface::

  with Dvi(filename, 72) as dvi:
      # iterate over pages:
      for page in dvi:
          w, h, d = page.width, page.height, page.descent
          for x,y,font,glyph,width in page.text:
              fontname = font.texname
              pointsize = font.size
              ...
          for x,y,height,width in page.boxes:
              ...

"""
if six.PY3:
    def ord(x):
        ...
    
_log = logging.getLogger(__name__)
_dvistate = cbook.Bunch(pre=0, outer=1, inpage=2, post_post=3, finale=4)
Page = namedtuple('Page', 'text boxes height width descent')
Text = namedtuple('Text', 'x y font glyph width')
Box = namedtuple('Box', 'x y height width')
def _arg_raw(dvi, delta):
    """Return *delta* without reading anything more from the dvi file"""
    ...

def _arg(bytes, signed, dvi, _):
    """Read *bytes* bytes, returning the bytes interpreted as a
    signed integer if *signed* is true, unsigned otherwise."""
    ...

def _arg_slen(dvi, delta):
    """Signed, length *delta*

    Read *delta* bytes, returning None if *delta* is zero, and
    the bytes interpreted as a signed integer otherwise."""
    ...

def _arg_slen1(dvi, delta):
    """Signed, length *delta*+1

    Read *delta*+1 bytes, returning the bytes interpreted as signed."""
    ...

def _arg_ulen1(dvi, delta):
    """Unsigned length *delta*+1

    Read *delta*+1 bytes, returning the bytes interpreted as unsigned."""
    ...

def _arg_olen1(dvi, delta):
    """Optionally signed, length *delta*+1

    Read *delta*+1 bytes, returning the bytes interpreted as
    unsigned integer for 0<=*delta*<3 and signed if *delta*==3."""
    ...

_arg_mapping = dict(raw=_arg_raw, u1=partial(_arg, 1, False), u4=partial(_arg, 4, False), s4=partial(_arg, 4, True), slen=_arg_slen, olen1=_arg_olen1, slen1=_arg_slen1, ulen1=_arg_ulen1)
def _dispatch(table, min, max: Optional[Any] = ..., state: Optional[Any] = ..., args=...):
    """Decorator for dispatch by opcode. Sets the values in *table*
    from *min* to *max* to this method, adds a check that the Dvi state
    matches *state* if not None, reads arguments from the file according
    to *args*.

    *table*
        the dispatch table to be filled in

    *min*
        minimum opcode for calling this function

    *max*
        maximum opcode for calling this function, None if only *min* is allowed

    *state*
        state of the Dvi object in which these opcodes are allowed

    *args*
        sequence of argument specifications:

        ``'raw'``: opcode minus minimum
        ``'u1'``: read one unsigned byte
        ``'u4'``: read four bytes, treat as an unsigned number
        ``'s4'``: read four bytes, treat as a signed number
        ``'slen'``: read (opcode - minimum) bytes, treat as signed
        ``'slen1'``: read (opcode - minimum + 1) bytes, treat as signed
        ``'ulen1'``: read (opcode - minimum + 1) bytes, treat as unsigned
        ``'olen1'``: read (opcode - minimum + 1) bytes, treat as unsigned
                     if under four bytes, signed if four bytes
    """
    ...

class Dvi(object):
    """
    A reader for a dvi ("device-independent") file, as produced by TeX.
    The current implementation can only iterate through pages in order,
    and does not even attempt to verify the postamble.

    This class can be used as a context manager to close the underlying
    file upon exit. Pages can be read via iteration. Here is an overly
    simple way to extract text without trying to detect whitespace::

    >>> with matplotlib.dviread.Dvi('input.dvi', 72) as dvi:
    >>>     for page in dvi:
    >>>         print(''.join(unichr(t.glyph) for t in page.text))
    """
    _dtable = ...
    _dispatch = ...
    def __init__(self, filename, dpi):
        """
        Read the data from the file named *filename* and convert
        TeX's internal units to units of *dpi* per inch.
        *dpi* only sets the units and does not limit the resolution.
        Use None to return TeX's internal units.
        """
        self.file = ...
        self.dpi = ...
        self.fonts = ...
        self.state = ...
        self.baseline = ...
    
    def _get_baseline(self, filename):
        ...
    
    def __enter__(self):
        """
        Context manager enter method, does nothing.
        """
        ...
    
    def __exit__(self, etype, evalue, etrace):
        """
        Context manager exit method, closes the underlying file if it is open.
        """
        ...
    
    def __iter__(self):
        """
        Iterate through the pages of the file.

        Yields
        ------
        Page
            Details of all the text and box objects on the page.
            The Page tuple contains lists of Text and Box tuples and
            the page dimensions, and the Text and Box tuples contain
            coordinates transformed into a standard Cartesian
            coordinate system at the dpi value given when initializing.
            The coordinates are floating point numbers, but otherwise
            precision is not lost and coordinate values are not clipped to
            integers.
        """
        ...
    
    def close(self):
        """
        Close the underlying file if it is open.
        """
        ...
    
    def _output(self):
        """
        Output the text and boxes belonging to the most recent page.
        page = dvi._output()
        """
        ...
    
    def _read(self):
        """
        Read one page from the file. Return True if successful,
        False if there were no more pages.
        """
        ...
    
    def _arg(self, nbytes, signed: bool = ...):
        """
        Read and return an integer argument *nbytes* long.
        Signedness is determined by the *signed* keyword.
        """
        ...
    
    @_dispatch(min=0, max=127, state=_dvistate.inpage)
    def _set_char_immediate(self, char):
        ...
    
    @_dispatch(min=128, max=131, state=_dvistate.inpage, args=('olen1', ))
    def _set_char(self, char):
        ...
    
    @_dispatch(132, state=_dvistate.inpage, args=('s4', 's4'))
    def _set_rule(self, a, b):
        ...
    
    @_dispatch(min=133, max=136, state=_dvistate.inpage, args=('olen1', ))
    def _put_char(self, char):
        ...
    
    def _put_char_real(self, char):
        ...
    
    @_dispatch(137, state=_dvistate.inpage, args=('s4', 's4'))
    def _put_rule(self, a, b):
        ...
    
    def _put_rule_real(self, a, b):
        ...
    
    @_dispatch(138)
    def _nop(self, _):
        ...
    
    @_dispatch(139, state=_dvistate.outer, args=('s4', ) * 11)
    def _bop(self, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, p):
        self.state = ...
        self.stack = ...
        self.text = ...
        self.boxes = ...
    
    @_dispatch(140, state=_dvistate.inpage)
    def _eop(self, _):
        self.state = ...
    
    @_dispatch(141, state=_dvistate.inpage)
    def _push(self, _):
        ...
    
    @_dispatch(142, state=_dvistate.inpage)
    def _pop(self, _):
        ...
    
    @_dispatch(min=143, max=146, state=_dvistate.inpage, args=('slen1', ))
    def _right(self, b):
        ...
    
    @_dispatch(min=147, max=151, state=_dvistate.inpage, args=('slen', ))
    def _right_w(self, new_w):
        ...
    
    @_dispatch(min=152, max=156, state=_dvistate.inpage, args=('slen', ))
    def _right_x(self, new_x):
        ...
    
    @_dispatch(min=157, max=160, state=_dvistate.inpage, args=('slen1', ))
    def _down(self, a):
        ...
    
    @_dispatch(min=161, max=165, state=_dvistate.inpage, args=('slen', ))
    def _down_y(self, new_y):
        ...
    
    @_dispatch(min=166, max=170, state=_dvistate.inpage, args=('slen', ))
    def _down_z(self, new_z):
        ...
    
    @_dispatch(min=171, max=234, state=_dvistate.inpage)
    def _fnt_num_immediate(self, k):
        self.f = ...
    
    @_dispatch(min=235, max=238, state=_dvistate.inpage, args=('olen1', ))
    def _fnt_num(self, new_f):
        self.f = ...
    
    @_dispatch(min=239, max=242, args=('ulen1', ))
    def _xxx(self, datalen):
        ...
    
    @_dispatch(min=243, max=246, args=('olen1', 'u4', 'u4', 'u4', 'u1', 'u1'))
    def _fnt_def(self, k, c, s, d, a, l):
        ...
    
    def _fnt_def_real(self, k, c, s, d, a, l):
        ...
    
    @_dispatch(247, state=_dvistate.pre, args=('u1', 'u4', 'u4', 'u4', 'u1'))
    def _pre(self, i, num, den, mag, k):
        self.state = ...
    
    @_dispatch(248, state=_dvistate.outer)
    def _post(self, _):
        self.state = ...
    
    @_dispatch(249)
    def _post_post(self, _):
        ...
    
    @_dispatch(min=250, max=255)
    def _malformed(self, offset):
        ...
    


class DviFont(object):
    """
    Encapsulation of a font that a DVI file can refer to.

    This class holds a font's texname and size, supports comparison,
    and knows the widths of glyphs in the same units as the AFM file.
    There are also internal attributes (for use by dviread.py) that
    are *not* used for comparison.

    The size is in Adobe points (converted from TeX points).

    Parameters
    ----------

    scale : float
        Factor by which the font is scaled from its natural size.
    tfm : Tfm
        TeX font metrics for this font
    texname : bytes
       Name of the font as used internally by TeX and friends, as an
       ASCII bytestring. This is usually very different from any external
       font names, and :class:`dviread.PsfontsMap` can be used to find
       the external name of the font.
    vf : Vf
       A TeX "virtual font" file, or None if this font is not virtual.

    Attributes
    ----------

    texname : bytes
    size : float
       Size of the font in Adobe points, converted from the slightly
       smaller TeX points.
    widths : list
       Widths of glyphs in glyph-space units, typically 1/1000ths of
       the point size.

    """
    __slots__ = ...
    def __init__(self, scale, tfm, texname, vf):
        self.size = ...
        self.widths = ...
    
    def __eq__(self, other):
        ...
    
    def __ne__(self, other):
        ...
    
    def _width_of(self, char):
        """
        Width of char in dvi units. For internal use by dviread.py.
        """
        ...
    
    def _height_depth_of(self, char):
        """
        Height and depth of char in dvi units. For internal use by dviread.py.
        """
        ...
    


class Vf(Dvi):
    """
    A virtual font (\\*.vf file) containing subroutines for dvi files.

    Usage::

      vf = Vf(filename)
      glyph = vf[code]
      glyph.text, glyph.boxes, glyph.width

    Parameters
    ----------

    filename : string or bytestring

    Notes
    -----

    The virtual font format is a derivative of dvi:
    http://mirrors.ctan.org/info/knuth/virtual-fonts
    This class reuses some of the machinery of `Dvi`
    but replaces the `_read` loop and dispatch mechanism.
    """
    def __init__(self, filename):
        ...
    
    def __getitem__(self, code):
        ...
    
    def _read(self):
        """
        Read one page from the file. Return True if successful,
        False if there were no more pages.
        """
        ...
    
    def _init_packet(self, pl):
        self.f = ...
    
    def _finalize_packet(self, packet_char, packet_width):
        self.state = ...
    
    def _pre(self, i, x, cs, ds):
        self.state = ...
    


def _fix2comp(num):
    """
    Convert from two's complement to negative.
    """
    ...

def _mul2012(num1, num2):
    """
    Multiply two numbers in 20.12 fixed point format.
    """
    ...

class Tfm(object):
    """
    A TeX Font Metric file.

    This implementation covers only the bare minimum needed by the Dvi class.

    Parameters
    ----------
    filename : string or bytestring

    Attributes
    ----------
    checksum : int
       Used for verifying against the dvi file.
    design_size : int
       Design size of the font (unknown units)
    width, height, depth : dict
       Dimensions of each character, need to be scaled by the factor
       specified in the dvi file. These are dicts because indexing may
       not start from 0.
    """
    __slots__ = ...
    def __init__(self, filename):
        ...
    


PsFont = namedtuple('Font', 'texname psname effects encoding filename')
class PsfontsMap(object):
    """
    A psfonts.map formatted file, mapping TeX fonts to PS fonts.

    Usage::

     >>> map = PsfontsMap(find_tex_file('pdftex.map'))
     >>> entry = map[b'ptmbo8r']
     >>> entry.texname
     b'ptmbo8r'
     >>> entry.psname
     b'Times-Bold'
     >>> entry.encoding
     '/usr/local/texlive/2008/texmf-dist/fonts/enc/dvips/base/8r.enc'
     >>> entry.effects
     {'slant': 0.16700000000000001}
     >>> entry.filename

    Parameters
    ----------

    filename : string or bytestring

    Notes
    -----

    For historical reasons, TeX knows many Type-1 fonts by different
    names than the outside world. (For one thing, the names have to
    fit in eight characters.) Also, TeX's native fonts are not Type-1
    but Metafont, which is nontrivial to convert to PostScript except
    as a bitmap. While high-quality conversions to Type-1 format exist
    and are shipped with modern TeX distributions, we need to know
    which Type-1 fonts are the counterparts of which native fonts. For
    these reasons a mapping is needed from internal font names to font
    file names.

    A texmf tree typically includes mapping files called e.g.
    :file:`psfonts.map`, :file:`pdftex.map`, or :file:`dvipdfm.map`.
    The file :file:`psfonts.map` is used by :program:`dvips`,
    :file:`pdftex.map` by :program:`pdfTeX`, and :file:`dvipdfm.map`
    by :program:`dvipdfm`. :file:`psfonts.map` might avoid embedding
    the 35 PostScript fonts (i.e., have no filename for them, as in
    the Times-Bold example above), while the pdf-related files perhaps
    only avoid the "Base 14" pdf fonts. But the user may have
    configured these files differently.
    """
    __slots__ = ...
    def __init__(self, filename):
        ...
    
    def __getitem__(self, texname):
        ...
    
    def _parse(self, file):
        """
        Parse the font mapping file.

        The format is, AFAIK: texname fontname [effects and filenames]
        Effects are PostScript snippets like ".177 SlantFont",
        filenames begin with one or two less-than signs. A filename
        ending in enc is an encoding file, other filenames are font
        files. This can be overridden with a left bracket: <[foobar
        indicates an encoding file named foobar.

        There is some difference between <foo.pfb and <<bar.pfb in
        subsetting, but I have no example of << in my TeX installation.
        """
        ...
    


class Encoding(object):
    """
    Parses a \\*.enc file referenced from a psfonts.map style file.
    The format this class understands is a very limited subset of
    PostScript.

    Usage (subject to change)::

      for name in Encoding(filename):
          whatever(name)

    Parameters
    ----------
    filename : string or bytestring

    Attributes
    ----------
    encoding : list
        List of character names
    """
    __slots__ = ...
    def __init__(self, filename):
        ...
    
    def __iter__(self):
        ...
    
    def _parse(self, file):
        ...
    


def find_tex_file(filename, format: Optional[Any] = ...):
    """
    Find a file in the texmf tree.

    Calls :program:`kpsewhich` which is an interface to the kpathsea
    library [1]_. Most existing TeX distributions on Unix-like systems use
    kpathsea. It is also available as part of MikTeX, a popular
    distribution on Windows.

    Parameters
    ----------
    filename : string or bytestring
    format : string or bytestring
        Used as the value of the `--format` option to :program:`kpsewhich`.
        Could be e.g. 'tfm' or 'vf' to limit the search to that type of files.

    References
    ----------

    .. [1] `Kpathsea documentation <http://www.tug.org/kpathsea/>`_
        The library that :program:`kpsewhich` is part of.
    """
    ...

@lru_cache()
def _fontfile(cls, suffix, texname):
    ...

_tfmfile = partial(_fontfile, Tfm, ".tfm")
_vffile = partial(_fontfile, Vf, ".vf")
if __name__ == '__main__':
    fname = sys.argv[1]
