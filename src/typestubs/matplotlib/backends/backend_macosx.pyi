"""
This type stub file was generated by pyright.
"""

from matplotlib.backend_bases import FigureManagerBase, NavigationToolbar2, TimerBase, _Backend
from matplotlib.backends import _macosx
from .backend_agg import FigureCanvasAgg

class TimerMac(_macosx.Timer, TimerBase):
    '''
    Subclass of :class:`backend_bases.TimerBase` that uses CoreFoundation
    run loops for timer events.

    Attributes
    ----------
    interval : int
        The time between timer events in milliseconds. Default is 1000 ms.
    single_shot : bool
        Boolean flag indicating whether this timer should operate as single
        shot (run once and then stop). Defaults to False.
    callbacks : list
        Stores list of (func, args) tuples that will be called upon timer
        events. This list can be manipulated directly, or the functions
        `add_callback` and `remove_callback` can be used.

    '''
    ...


class FigureCanvasMac(_macosx.FigureCanvas, FigureCanvasAgg):
    """
    The canvas the figure renders into.  Calls the draw and print fig
    methods, creates the renderers, etc...

    Events such as button presses, mouse movements, and key presses
    are handled in the C code and the base class methods
    button_press_event, button_release_event, motion_notify_event,
    key_press_event, and key_release_event are called from there.

    Attributes
    ----------
    figure : `matplotlib.figure.Figure`
        A high-level Figure instance

    """
    def __init__(self, figure):
        ...
    
    def _set_device_scale(self, value):
        ...
    
    def _draw(self):
        ...
    
    def draw(self):
        ...
    
    def draw_idle(self, *args, **kwargs):
        ...
    
    def blit(self, bbox):
        ...
    
    def resize(self, width, height):
        ...
    
    def new_timer(self, *args, **kwargs):
        """
        Creates a new backend-specific subclass of `backend_bases.Timer`.
        This is useful for getting periodic events through the backend's native
        event loop. Implemented only for backends with GUIs.

        Other Parameters
        ----------------
        interval : scalar
            Timer interval in milliseconds
        callbacks : list
            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
            will be executed by the timer every *interval*.
        """
        ...
    


class FigureManagerMac(_macosx.FigureManager, FigureManagerBase):
    """
    Wrap everything up into a window for the pylab interface
    """
    def __init__(self, canvas, num):
        ...
    
    def close(self):
        ...
    


class NavigationToolbar2Mac(_macosx.NavigationToolbar2, NavigationToolbar2):
    def __init__(self, canvas):
        ...
    
    def _init_toolbar(self):
        ...
    
    def draw_rubberband(self, event, x0, y0, x1, y1):
        ...
    
    def release(self, event):
        ...
    
    def set_cursor(self, cursor):
        ...
    
    def save_figure(self, *args):
        ...
    
    def prepare_configure_subplots(self):
        ...
    
    def set_message(self, message):
        ...
    


@_Backend.export
class _BackendMac(_Backend):
    FigureCanvas = ...
    FigureManager = ...
    @staticmethod
    def trigger_manager_draw(manager):
        ...
    
    @staticmethod
    def mainloop():
        ...
    


