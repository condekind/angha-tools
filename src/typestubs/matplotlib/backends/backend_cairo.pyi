"""
This type stub file was generated by pyright.
"""

from matplotlib.backend_bases import FigureCanvasBase, GraphicsContextBase, RendererBase, _Backend
from typing import Any, Optional

"""
A Cairo backend for matplotlib
==============================
:Author: Steve Chaplin and others

This backend depends on `cairo <http://cairographics.org>`_, and either on
cairocffi, or (Python 2 only) on pycairo.
"""
if cairo.version_info < (1, 4, 0):
    ...
backend_version = cairo.version
class ArrayWrapper:
    """Thin wrapper around numpy ndarray to expose the interface
       expected by cairocffi. Basically replicates the
       array.array interface.
    """
    def __init__(self, myarray):
        self.itemsize = ...
    
    def buffer_info(self):
        ...
    


class RendererCairo(RendererBase):
    fontweights = ...
    fontangles = ...
    def __init__(self, dpi):
        self.dpi = ...
        self.gc = ...
        self.text_ctx = ...
        self.mathtext_parser = ...
    
    def set_ctx_from_surface(self, surface):
        ...
    
    def set_width_height(self, width, height):
        self.width = ...
        self.height = ...
    
    def _fill_and_stroke(self, ctx, fill_c, alpha, alpha_overrides):
        ...
    
    @staticmethod
    def convert_path(ctx, path, transform, clip: Optional[Any] = ...):
        ...
    
    def draw_path(self, gc, path, transform, rgbFace: Optional[Any] = ...):
        ...
    
    def draw_markers(self, gc, marker_path, marker_trans, path, transform, rgbFace: Optional[Any] = ...):
        ...
    
    def draw_image(self, gc, x, y, im):
        ...
    
    def draw_text(self, gc, x, y, s, prop, angle, ismath: bool = ..., mtext: Optional[Any] = ...):
        ...
    
    def _draw_mathtext(self, gc, x, y, s, prop, angle):
        ...
    
    def get_canvas_width_height(self):
        ...
    
    def get_text_width_height_descent(self, s, prop, ismath):
        ...
    
    def new_gc(self):
        ...
    
    def points_to_pixels(self, points):
        ...
    


class GraphicsContextCairo(GraphicsContextBase):
    _joind = ...
    _capd = ...
    def __init__(self, renderer):
        self.renderer = ...
    
    def restore(self):
        ...
    
    def set_alpha(self, alpha):
        ...
    
    def set_capstyle(self, cs):
        ...
    
    def set_clip_rectangle(self, rectangle):
        ...
    
    def set_clip_path(self, path):
        ...
    
    def set_dashes(self, offset, dashes):
        ...
    
    def set_foreground(self, fg, isRGBA: Optional[Any] = ...):
        ...
    
    def get_rgb(self):
        ...
    
    def set_joinstyle(self, js):
        ...
    
    def set_linewidth(self, w):
        ...
    


class FigureCanvasCairo(FigureCanvasBase):
    supports_blit = ...
    def print_png(self, fobj, *args, **kwargs):
        ...
    
    def print_pdf(self, fobj, *args, **kwargs):
        ...
    
    def print_ps(self, fobj, *args, **kwargs):
        ...
    
    def print_svg(self, fobj, *args, **kwargs):
        ...
    
    def print_svgz(self, fobj, *args, **kwargs):
        ...
    
    def _save(self, fo, fmt, **kwargs):
        ...
    


@_Backend.export
class _BackendCairo(_Backend):
    FigureCanvas = ...
    FigureManager = ...


