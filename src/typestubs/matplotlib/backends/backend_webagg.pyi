"""
This type stub file was generated by pyright.
"""

import threading
from matplotlib.backend_bases import _Backend
from . import backend_webagg_core as core
from typing import Any, Optional

"""
Displays Agg images in the browser, with interactivity
"""
class ServerThread(threading.Thread):
    def run(self):
        ...
    


webagg_server_thread = ServerThread()
class FigureCanvasWebAgg(core.FigureCanvasWebAggCore):
    def show(self):
        ...
    
    def new_timer(self, *args, **kwargs):
        ...
    


class WebAggApplication(tornado.web.Application):
    initialized = ...
    started = ...
    class FavIcon(tornado.web.RequestHandler):
        def get(self):
            ...
        
    
    
    class SingleFigurePage(tornado.web.RequestHandler):
        def __init__(self, application, request, **kwargs):
            self.url_prefix = ...
        
        def get(self, fignum):
            ...
        
    
    
    class AllFiguresPage(tornado.web.RequestHandler):
        def __init__(self, application, request, **kwargs):
            self.url_prefix = ...
        
        def get(self):
            ...
        
    
    
    class MplJs(tornado.web.RequestHandler):
        def get(self):
            ...
        
    
    
    class Download(tornado.web.RequestHandler):
        def get(self, fignum, fmt):
            ...
        
    
    
    class WebSocket(tornado.websocket.WebSocketHandler):
        supports_binary = ...
        def open(self, fignum):
            self.fignum = ...
            self.manager = ...
        
        def on_close(self):
            ...
        
        def on_message(self, message):
            ...
        
        def send_json(self, content):
            ...
        
        def send_binary(self, blob):
            ...
        
    
    
    def __init__(self, url_prefix=...):
        ...
    
    @classmethod
    def initialize(cls, url_prefix=..., port: Optional[Any] = ..., address: Optional[Any] = ...):
        ...
    
    @classmethod
    def start(cls):
        ...
    


def ipython_inline_display(figure):
    ...

@_Backend.export
class _BackendWebAgg(_Backend):
    FigureCanvas = ...
    FigureManager = ...
    @staticmethod
    def trigger_manager_draw(manager):
        ...
    
    @staticmethod
    def show():
        ...
    


