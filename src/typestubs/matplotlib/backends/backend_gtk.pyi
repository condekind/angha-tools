"""
This type stub file was generated by pyright.
"""

import six
import logging
from matplotlib.backend_bases import FigureCanvasBase, FigureManagerBase, NavigationToolbar2, TimerBase, _Backend, cursors
from matplotlib import lines, markers
from typing import Any, Optional

if six.PY3:
    ...
pygtk_version_required = (2, 4, 0)
if gtk.pygtk_version < pygtk_version_required:
    ...
_new_tooltip_api = gtk.pygtk_version[1] >= 12
_log = logging.getLogger(__name__)
backend_version = "%d.%d.%d" % gtk.pygtk_version
PIXELS_PER_INCH = 96
cursord = { cursors.MOVE: gdk.Cursor(gdk.FLEUR),cursors.HAND: gdk.Cursor(gdk.HAND2),cursors.POINTER: gdk.Cursor(gdk.LEFT_PTR),cursors.SELECT_REGION: gdk.Cursor(gdk.TCROSS),cursors.WAIT: gdk.Cursor(gdk.WATCH) }
def GTK_WIDGET_DRAWABLE(w):
    ...

class TimerGTK(TimerBase):
    '''
    Subclass of :class:`backend_bases.TimerBase` using GTK for timer events.

    Attributes
    ----------
    interval : int
        The time between timer events in milliseconds. Default is 1000 ms.
    single_shot : bool
        Boolean flag indicating whether this timer should operate as single
        shot (run once and then stop). Defaults to False.
    callbacks : list
        Stores list of (func, args) tuples that will be called upon timer
        events. This list can be manipulated directly, or the functions
        `add_callback` and `remove_callback` can be used.

    '''
    def _timer_start(self):
        ...
    
    def _timer_stop(self):
        ...
    
    def _timer_set_interval(self):
        ...
    
    def _on_timer(self):
        ...
    


class FigureCanvasGTK(gtk.DrawingArea, FigureCanvasBase):
    keyvald = ...
    event_mask = ...
    def __init__(self, figure):
        self.last_downclick = ...
    
    def destroy(self):
        ...
    
    def scroll_event(self, widget, event):
        ...
    
    def button_press_event(self, widget, event):
        ...
    
    def button_release_event(self, widget, event):
        ...
    
    def key_press_event(self, widget, event):
        ...
    
    def key_release_event(self, widget, event):
        ...
    
    def motion_notify_event(self, widget, event):
        ...
    
    def leave_notify_event(self, widget, event):
        ...
    
    def enter_notify_event(self, widget, event):
        ...
    
    def _get_key(self, event):
        ...
    
    def configure_event(self, widget, event):
        ...
    
    def draw(self):
        ...
    
    def draw_idle(self):
        ...
    
    def _renderer_init(self):
        """Override by GTK backends to select a different renderer
        Renderer should provide the methods:
            set_pixmap ()
            set_width_height ()
        that are used by
            _render_figure() / _pixmap_prepare()
        """
        ...
    
    def _pixmap_prepare(self, width, height):
        """
        Make sure _._pixmap is at least width, height,
        create new pixmap if necessary
        """
        ...
    
    def _render_figure(self, pixmap, width, height):
        """used by GTK and GTKcairo. GTKAgg overrides
        """
        ...
    
    def expose_event(self, widget, event):
        """Expose_event for all GTK backends. Should not be overridden.
        """
        ...
    
    filetypes = ...
    def print_jpeg(self, filename, *args, **kwargs):
        ...
    
    print_jpg = ...
    def print_png(self, filename, *args, **kwargs):
        ...
    
    def _print_image(self, filename, format, *args, **kwargs):
        ...
    
    def new_timer(self, *args, **kwargs):
        """
        Creates a new backend-specific subclass of :class:`backend_bases.Timer`.
        This is useful for getting periodic events through the backend's native
        event loop. Implemented only for backends with GUIs.

        Other Parameters
        ----------------
        interval : scalar
            Timer interval in milliseconds
        callbacks : list
            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
            will be executed by the timer every *interval*.
        """
        ...
    
    def flush_events(self):
        ...
    


class FigureManagerGTK(FigureManagerBase):
    """
    Attributes
    ----------
    canvas : `FigureCanvas`
        The FigureCanvas instance
    num : int or str
        The Figure number
    toolbar : gtk.Toolbar
        The gtk.Toolbar  (gtk only)
    vbox : gtk.VBox
        The gtk.VBox containing the canvas and toolbar (gtk only)
    window : gtk.Window
        The gtk.Window   (gtk only)

    """
    def __init__(self, canvas, num):
        self.window = ...
        self.vbox = ...
        self.toolbar = ...
    
    def destroy(self, *args):
        ...
    
    def show(self):
        ...
    
    def full_screen_toggle(self):
        ...
    
    _full_screen_flag = ...
    def _get_toolbar(self, canvas):
        ...
    
    def get_window_title(self):
        ...
    
    def set_window_title(self, title):
        ...
    
    def resize(self, width, height):
        'set the canvas size in pixels'
        ...
    


class NavigationToolbar2GTK(NavigationToolbar2, gtk.Toolbar):
    def __init__(self, canvas, window):
        self.win = ...
    
    def set_message(self, s):
        ...
    
    def set_cursor(self, cursor):
        ...
    
    def release(self, event):
        ...
    
    def draw_rubberband(self, event, x0, y0, x1, y1):
        'adapted from http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/189744'
        ...
    
    def _init_toolbar(self):
        ...
    
    def _init_toolbar2_4(self):
        self.message = ...
    
    def get_filechooser(self):
        ...
    
    def save_figure(self, *args):
        ...
    
    def configure_subplots(self, button):
        ...
    
    def _get_canvas(self, fig):
        ...
    


class FileChooserDialog(gtk.FileChooserDialog):
    """GTK+ 2.4 file selector which presents the user with a menu
    of supported image formats
    """
    def __init__(self, title=..., parent: Optional[Any] = ..., action=..., buttons=..., path: Optional[Any] = ..., filetypes=..., default_filetype: Optional[Any] = ...):
        self.filetypes = ...
        self.sorted_filetypes = ...
        self.ext = ...
    
    def get_filename_from_user(self):
        ...
    


class DialogLineprops(object):
    """
    A GUI dialog for controlling lineprops
    """
    signals = ...
    linestyles = ...
    linestyled = ...
    markers = ...
    markerd = ...
    def __init__(self, lines):
        self.wtree = ...
        self.dlg = ...
        self.lines = ...
        self.cbox_lineprops = ...
        self.cbox_linestyles = ...
        self.cbox_markers = ...
    
    def show(self):
        'populate the combo box'
        ...
    
    def get_active_line(self):
        'get the active line'
        ...
    
    def get_active_linestyle(self):
        'get the active lineinestyle'
        ...
    
    def get_active_marker(self):
        'get the active lineinestyle'
        ...
    
    def _update(self):
        'update the active line props from the widgets'
        ...
    
    def on_combobox_lineprops_changed(self, item):
        'update the widgets from the active line'
        ...
    
    def on_combobox_linestyle_changed(self, item):
        ...
    
    def on_combobox_marker_changed(self, item):
        ...
    
    def on_colorbutton_linestyle_color_set(self, button):
        ...
    
    def on_colorbutton_markerface_color_set(self, button):
        'called colorbutton marker clicked'
        ...
    
    def on_dialog_lineprops_okbutton_clicked(self, button):
        ...
    
    def on_dialog_lineprops_cancelbutton_clicked(self, button):
        ...
    


def error_msg_gtk(msg, parent: Optional[Any] = ...):
    ...

@_Backend.export
class _BackendGTK(_Backend):
    FigureCanvas = ...
    FigureManager = ...
    @staticmethod
    def trigger_manager_draw(manager):
        ...
    
    @staticmethod
    def mainloop():
        ...
    


