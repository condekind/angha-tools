"""
This type stub file was generated by pyright.
"""

import logging
import re
from matplotlib import __version__
from matplotlib.backend_bases import FigureCanvasBase, FigureManagerBase, RendererBase, _Backend
from typing import Any, Optional

_log = logging.getLogger(__name__)
backend_version = __version__
def escape_cdata(s):
    ...

_escape_xml_comment = re.compile(r'-(?=-)')
def escape_comment(s):
    ...

def escape_attrib(s):
    ...

def short_float_fmt(x):
    """
    Create a short string representation of a float, which is %f
    formatting with trailing zeros and the decimal point removed.
    """
    ...

class XMLWriter(object):
    def __init__(self, file):
        ...
    
    def __flush(self, indent: bool = ...):
        ...
    
    def start(self, tag, attrib=..., **extra):
        ...
    
    def comment(self, comment):
        ...
    
    def data(self, text):
        ...
    
    def end(self, tag: Optional[Any] = ..., indent: bool = ...):
        ...
    
    def close(self, id):
        ...
    
    def element(self, tag, text: Optional[Any] = ..., attrib=..., **extra):
        ...
    
    def flush(self):
        ...
    


def generate_transform(transform_list=...):
    ...

def generate_css(attrib=...):
    ...

_capstyle_d = { 'projecting': 'square','butt': 'butt','round': 'round' }
class RendererSVG(RendererBase):
    FONT_SCALE = ...
    fontd = ...
    def __init__(self, width, height, svgwriter, basename: Optional[Any] = ..., image_dpi=...):
        self.width = ...
        self.height = ...
        self.writer = ...
        self.image_dpi = ...
        self.mathtext_parser = ...
    
    def finalize(self):
        ...
    
    def _write_default_style(self):
        ...
    
    def _make_id(self, type, content):
        ...
    
    def _make_flip_transform(self, transform):
        ...
    
    def _get_font(self, prop):
        ...
    
    def _get_hatch(self, gc, rgbFace):
        """
        Create a new hatch pattern
        """
        ...
    
    def _write_hatches(self):
        ...
    
    def _get_style_dict(self, gc, rgbFace):
        """
        return the style string.  style is generated from the
        GraphicsContext and rgbFace
        """
        ...
    
    def _get_style(self, gc, rgbFace):
        ...
    
    def _get_clip(self, gc):
        ...
    
    def _write_clips(self):
        ...
    
    def _write_svgfonts(self):
        ...
    
    def open_group(self, s, gid: Optional[Any] = ...):
        """
        Open a grouping element with label *s*. If *gid* is given, use
        *gid* as the id of the group.
        """
        ...
    
    def close_group(self, s):
        ...
    
    def option_image_nocomposite(self):
        """
        return whether to generate a composite image from multiple images on
        a set of axes
        """
        ...
    
    def _convert_path(self, path, transform: Optional[Any] = ..., clip: Optional[Any] = ..., simplify: Optional[Any] = ..., sketch: Optional[Any] = ...):
        ...
    
    def draw_path(self, gc, path, transform, rgbFace: Optional[Any] = ...):
        ...
    
    def draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace: Optional[Any] = ...):
        ...
    
    def draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position):
        ...
    
    def draw_gouraud_triangle(self, gc, points, colors, trans):
        ...
    
    def draw_gouraud_triangles(self, gc, triangles_array, colors_array, transform):
        ...
    
    def option_scale_image(self):
        ...
    
    def get_image_magnification(self):
        ...
    
    def draw_image(self, gc, x, y, im, transform: Optional[Any] = ...):
        ...
    
    def _adjust_char_id(self, char_id):
        ...
    
    def _draw_text_as_path(self, gc, x, y, s, prop, angle, ismath, mtext: Optional[Any] = ...):
        """
        draw the text by converting them to paths using textpath module.

        Parameters
        ----------
        prop : `matplotlib.font_manager.FontProperties`
          font property

        s : str
          text to be converted

        usetex : bool
          If True, use matplotlib usetex mode.

        ismath : bool
          If True, use mathtext parser. If "TeX", use *usetex* mode.

        """
        ...
    
    def _draw_text_as_text(self, gc, x, y, s, prop, angle, ismath, mtext: Optional[Any] = ...):
        ...
    
    def draw_tex(self, gc, x, y, s, prop, angle, ismath=..., mtext: Optional[Any] = ...):
        ...
    
    def draw_text(self, gc, x, y, s, prop, angle, ismath: bool = ..., mtext: Optional[Any] = ...):
        ...
    
    def flipy(self):
        ...
    
    def get_canvas_width_height(self):
        ...
    
    def get_text_width_height_descent(self, s, prop, ismath):
        ...
    


class FigureCanvasSVG(FigureCanvasBase):
    filetypes = ...
    fixed_dpi = ...
    def print_svg(self, filename, *args, **kwargs):
        ...
    
    def print_svgz(self, filename, *args, **kwargs):
        ...
    
    def _print_svg(self, filename, fh, **kwargs):
        ...
    
    def get_default_filetype(self):
        ...
    


class FigureManagerSVG(FigureManagerBase):
    ...


svgProlog = """\
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Created with matplotlib (http://matplotlib.org/) -->
"""
@_Backend.export
class _BackendSVG(_Backend):
    FigureCanvas = ...
    FigureManager = ...


