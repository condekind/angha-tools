"""
This type stub file was generated by pyright.
"""

import sys
from matplotlib.backend_bases import FigureCanvasBase, FigureManagerBase, NavigationToolbar2, StatusbarBase, TimerBase, ToolContainerBase, _Backend, cursors
from matplotlib.backends.qt_editor.formsubplottool import UiSubplotTool
from matplotlib import backend_tools
from .qt_compat import QtCore, QtWidgets, __version__, is_pyqt5
from typing import Any, Optional

backend_version = __version__
SPECIAL_KEYS = { QtCore.Qt.Key_Control: 'control',QtCore.Qt.Key_Shift: 'shift',QtCore.Qt.Key_Alt: 'alt',QtCore.Qt.Key_Meta: 'super',QtCore.Qt.Key_Return: 'enter',QtCore.Qt.Key_Left: 'left',QtCore.Qt.Key_Up: 'up',QtCore.Qt.Key_Right: 'right',QtCore.Qt.Key_Down: 'down',QtCore.Qt.Key_Escape: 'escape',QtCore.Qt.Key_F1: 'f1',QtCore.Qt.Key_F2: 'f2',QtCore.Qt.Key_F3: 'f3',QtCore.Qt.Key_F4: 'f4',QtCore.Qt.Key_F5: 'f5',QtCore.Qt.Key_F6: 'f6',QtCore.Qt.Key_F7: 'f7',QtCore.Qt.Key_F8: 'f8',QtCore.Qt.Key_F9: 'f9',QtCore.Qt.Key_F10: 'f10',QtCore.Qt.Key_F11: 'f11',QtCore.Qt.Key_F12: 'f12',QtCore.Qt.Key_Home: 'home',QtCore.Qt.Key_End: 'end',QtCore.Qt.Key_PageUp: 'pageup',QtCore.Qt.Key_PageDown: 'pagedown',QtCore.Qt.Key_Tab: 'tab',QtCore.Qt.Key_Backspace: 'backspace',QtCore.Qt.Key_Enter: 'enter',QtCore.Qt.Key_Insert: 'insert',QtCore.Qt.Key_Delete: 'delete',QtCore.Qt.Key_Pause: 'pause',QtCore.Qt.Key_SysReq: 'sysreq',QtCore.Qt.Key_Clear: 'clear' }
SUPER = 0
ALT = 1
CTRL = 2
SHIFT = 3
MODIFIER_KEYS = [('super', QtCore.Qt.MetaModifier, QtCore.Qt.Key_Meta), ('alt', QtCore.Qt.AltModifier, QtCore.Qt.Key_Alt), ('ctrl', QtCore.Qt.ControlModifier, QtCore.Qt.Key_Control), ('shift', QtCore.Qt.ShiftModifier, QtCore.Qt.Key_Shift)]
if sys.platform == 'darwin':
    ...
cursord = { cursors.MOVE: QtCore.Qt.SizeAllCursor,cursors.HAND: QtCore.Qt.PointingHandCursor,cursors.POINTER: QtCore.Qt.ArrowCursor,cursors.SELECT_REGION: QtCore.Qt.CrossCursor,cursors.WAIT: QtCore.Qt.WaitCursor }
qApp = None
def _create_qApp():
    """
    Only one qApp can exist at a time, so check before creating one.
    """
    ...

def _allow_super_init(__init__):
    """
    Decorator for ``__init__`` to allow ``super().__init__`` on PyQt4/PySide2.
    """
    ...

class TimerQT(TimerBase):
    '''
    Subclass of :class:`backend_bases.TimerBase` that uses Qt timer events.

    Attributes
    ----------
    interval : int
        The time between timer events in milliseconds. Default is 1000 ms.
    single_shot : bool
        Boolean flag indicating whether this timer should
        operate as single shot (run once and then stop). Defaults to False.
    callbacks : list
        Stores list of (func, args) tuples that will be called upon timer
        events. This list can be manipulated directly, or the functions
        `add_callback` and `remove_callback` can be used.

    '''
    def __init__(self, *args, **kwargs):
        ...
    
    def _timer_set_single_shot(self):
        ...
    
    def _timer_set_interval(self):
        ...
    
    def _timer_start(self):
        ...
    
    def _timer_stop(self):
        ...
    


class FigureCanvasQT(QtWidgets.QWidget, FigureCanvasBase):
    buttond = ...
    @_allow_super_init
    def __init__(self, figure):
        self.figure = ...
    
    def _update_figure_dpi(self):
        ...
    
    @property
    def _dpi_ratio(self):
        ...
    
    def _update_dpi(self):
        ...
    
    def get_width_height(self):
        ...
    
    def enterEvent(self, event):
        ...
    
    def leaveEvent(self, event):
        ...
    
    def mouseEventCoords(self, pos):
        """Calculate mouse coordinates in physical pixels

        Qt5 use logical pixels, but the figure is scaled to physical
        pixels for rendering.   Transform to physical pixels so that
        all of the down-stream transforms work as expected.

        Also, the origin is different and needs to be corrected.

        """
        ...
    
    def mousePressEvent(self, event):
        ...
    
    def mouseDoubleClickEvent(self, event):
        ...
    
    def mouseMoveEvent(self, event):
        ...
    
    def mouseReleaseEvent(self, event):
        ...
    
    if is_pyqt5():
        def wheelEvent(self, event):
            ...
        
    else:
        def wheelEvent(self, event):
            ...
        
    def keyPressEvent(self, event):
        ...
    
    def keyReleaseEvent(self, event):
        ...
    
    @property
    def keyAutoRepeat(self):
        """
        If True, enable auto-repeat for key events.
        """
        ...
    
    @keyAutoRepeat.setter
    def keyAutoRepeat(self, val):
        ...
    
    def resizeEvent(self, event):
        ...
    
    def sizeHint(self):
        ...
    
    def minumumSizeHint(self):
        ...
    
    def _get_key(self, event):
        ...
    
    def new_timer(self, *args, **kwargs):
        """
        Creates a new backend-specific subclass of
        :class:`backend_bases.Timer`.  This is useful for getting
        periodic events through the backend's native event
        loop. Implemented only for backends with GUIs.

        Other Parameters
        ----------------
        interval : scalar
            Timer interval in milliseconds

        callbacks : list
            Sequence of (func, args, kwargs) where ``func(*args, **kwargs)``
            will be executed by the timer every *interval*.

        """
        ...
    
    def flush_events(self):
        ...
    
    def start_event_loop(self, timeout=...):
        ...
    
    def stop_event_loop(self, event: Optional[Any] = ...):
        ...
    
    def draw(self):
        """Render the figure, and queue a request for a Qt draw.
        """
        ...
    
    def draw_idle(self):
        """Queue redraw of the Agg buffer and request Qt paintEvent.
        """
        ...
    
    def _draw_idle(self):
        ...
    
    def drawRectangle(self, rect):
        ...
    


class MainWindow(QtWidgets.QMainWindow):
    closing = ...
    def closeEvent(self, event):
        ...
    


class FigureManagerQT(FigureManagerBase):
    """
    Attributes
    ----------
    canvas : `FigureCanvas`
        The FigureCanvas instance
    num : int or str
        The Figure number
    toolbar : qt.QToolBar
        The qt.QToolBar
    window : qt.QMainWindow
        The qt.QMainWindow

    """
    def __init__(self, canvas, num):
        self.canvas = ...
        self.window = ...
        self.toolmanager = ...
        self.toolbar = ...
        self.statusbar = ...
    
    def full_screen_toggle(self):
        ...
    
    def _widgetclosed(self):
        ...
    
    def _get_toolbar(self, canvas, parent):
        ...
    
    def _get_toolmanager(self):
        ...
    
    def resize(self, width, height):
        'set the canvas size in pixels'
        ...
    
    def show(self):
        ...
    
    def destroy(self, *args):
        ...
    
    def get_window_title(self):
        ...
    
    def set_window_title(self, title):
        ...
    


class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
    message = ...
    def __init__(self, canvas, parent, coordinates: bool = ...):
        """ coordinates: should we show the coordinates on the right? """
        self.canvas = ...
        self.parent = ...
        self.coordinates = ...
    
    def _icon(self, name):
        ...
    
    def _init_toolbar(self):
        self.basedir = ...
        self.buttons = ...
        self.adj_window = ...
    
    if is_pyqt5():
        def sizeHint(self):
            ...
        
    def edit_parameters(self):
        ...
    
    def _update_buttons_checked(self):
        ...
    
    def pan(self, *args):
        ...
    
    def zoom(self, *args):
        ...
    
    def set_message(self, s):
        ...
    
    def set_cursor(self, cursor):
        ...
    
    def draw_rubberband(self, event, x0, y0, x1, y1):
        ...
    
    def remove_rubberband(self):
        ...
    
    def configure_subplots(self):
        ...
    
    def save_figure(self, *args):
        ...
    


class SubplotToolQt(UiSubplotTool):
    def __init__(self, targetfig, parent):
        ...
    
    def _export_values(self):
        ...
    
    def _on_value_changed(self):
        ...
    
    def _tight_layout(self):
        ...
    
    def _reset(self):
        ...
    


class ToolbarQt(ToolContainerBase, QtWidgets.QToolBar):
    def __init__(self, toolmanager, parent):
        ...
    
    @property
    def _icon_extension(self):
        ...
    
    def add_toolitem(self, name, group, position, image_file, description, toggle):
        ...
    
    def _add_to_group(self, group, name, button, position):
        ...
    
    def _icon(self, name):
        ...
    
    def toggle_toolitem(self, name, toggled):
        ...
    
    def remove_toolitem(self, name):
        ...
    


class StatusbarQt(StatusbarBase, QtWidgets.QLabel):
    def __init__(self, window, *args, **kwargs):
        ...
    
    def set_message(self, s):
        ...
    


class ConfigureSubplotsQt(backend_tools.ConfigureSubplotsBase):
    def trigger(self, *args):
        ...
    


class SaveFigureQt(backend_tools.SaveFigureBase):
    def trigger(self, *args):
        ...
    


class SetCursorQt(backend_tools.SetCursorBase):
    def set_cursor(self, cursor):
        ...
    


class RubberbandQt(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1):
        ...
    
    def remove_rubberband(self):
        ...
    


def error_msg_qt(msg, parent: Optional[Any] = ...):
    ...

def exception_handler(type, value, tb):
    """Handle uncaught exceptions
    It does not catch SystemExit
    """
    ...

@_Backend.export
class _BackendQT5(_Backend):
    FigureCanvas = ...
    FigureManager = ...
    @staticmethod
    def trigger_manager_draw(manager):
        ...
    
    @staticmethod
    def mainloop():
        ...
    


