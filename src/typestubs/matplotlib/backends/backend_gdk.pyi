"""
This type stub file was generated by pyright.
"""

import gtk
from matplotlib.backend_bases import FigureCanvasBase, GraphicsContextBase, RendererBase, _Backend
from typing import Any, Optional

gdk = gtk.gdk
pygtk_version_required = (2, 2, 0)
if gtk.pygtk_version < pygtk_version_required:
    ...
backend_version = "%d.%d.%d" % gtk.pygtk_version
IMAGE_FORMAT = sorted(['bmp', 'eps', 'jpg', 'png', 'ps', 'svg'])
IMAGE_FORMAT_DEFAULT = 'png'
class RendererGDK(RendererBase):
    fontweights = ...
    layoutd = ...
    rotated = ...
    def __init__(self, gtkDA, dpi):
        self.gtkDA = ...
        self.dpi = ...
        self.mathtext_parser = ...
    
    def set_pixmap(self, pixmap):
        self.gdkDrawable = ...
    
    def set_width_height(self, width, height):
        """w,h is the figure w,h not the pixmap w,h
        """
        ...
    
    def draw_path(self, gc, path, transform, rgbFace: Optional[Any] = ...):
        ...
    
    def draw_image(self, gc, x, y, im):
        ...
    
    def draw_text(self, gc, x, y, s, prop, angle, ismath: bool = ..., mtext: Optional[Any] = ...):
        ...
    
    def _draw_mathtext(self, gc, x, y, s, prop, angle):
        ...
    
    def _draw_rotated_text(self, gc, x, y, s, prop, angle):
        """
        Draw the text rotated 90 degrees, other angles are not supported
        """
        ...
    
    def _get_pango_layout(self, s, prop):
        """
        Create a pango layout instance for Text 's' with properties 'prop'.
        Return - pango layout (from cache if already exists)

        Note that pango assumes a logical DPI of 96
        Ref: pango/fonts.c/pango_font_description_set_size() manual page
        """
        ...
    
    def flipy(self):
        ...
    
    def get_canvas_width_height(self):
        ...
    
    def get_text_width_height_descent(self, s, prop, ismath):
        ...
    
    def new_gc(self):
        ...
    
    def points_to_pixels(self, points):
        ...
    


class GraphicsContextGDK(GraphicsContextBase):
    _cached = ...
    _joind = ...
    _capd = ...
    def __init__(self, renderer):
        self.renderer = ...
        self.gdkGC = ...
    
    def rgb_to_gdk_color(self, rgb):
        """
        rgb - an RGB tuple (three 0.0-1.0 values)
        return an allocated gtk.gdk.Color
        """
        ...
    
    def set_capstyle(self, cs):
        ...
    
    def set_clip_rectangle(self, rectangle):
        ...
    
    def set_dashes(self, dash_offset, dash_list):
        ...
    
    def set_foreground(self, fg, isRGBA: bool = ...):
        ...
    
    def set_joinstyle(self, js):
        ...
    
    def set_linewidth(self, w):
        ...
    


class FigureCanvasGDK(FigureCanvasBase):
    def __init__(self, figure):
        ...
    
    def _renderer_init(self):
        ...
    
    def _render_figure(self, pixmap, width, height):
        ...
    
    filetypes = ...
    def print_jpeg(self, filename, *args, **kwargs):
        ...
    
    print_jpg = ...
    def print_png(self, filename, *args, **kwargs):
        ...
    
    def _print_image(self, filename, format, *args, **kwargs):
        ...
    


@_Backend.export
class _BackendGDK(_Backend):
    FigureCanvas = ...
    FigureManager = ...


