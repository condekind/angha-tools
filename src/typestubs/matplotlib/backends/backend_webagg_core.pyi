"""
This type stub file was generated by pyright.
"""

from matplotlib.backends import backend_agg
from matplotlib.backend_bases import _Backend
from matplotlib import backend_bases
from typing import Any, Optional

"""
Displays Agg images in the browser, with interactivity
"""
_SHIFT_LUT = { 59: ':',61: '+',173: '_',186: ':',187: '+',188: '<',189: '_',190: '>',191: '?',192: '~',219: '{',220: '|',221: '}',222: '"' }
_LUT = { 8: 'backspace',9: 'tab',13: 'enter',16: 'shift',17: 'control',18: 'alt',19: 'pause',20: 'caps',27: 'escape',32: ' ',33: 'pageup',34: 'pagedown',35: 'end',36: 'home',37: 'left',38: 'up',39: 'right',40: 'down',45: 'insert',46: 'delete',91: 'super',92: 'super',93: 'select',106: '*',107: '+',109: '-',110: '.',111: '/',144: 'num_lock',145: 'scroll_lock',186: ':',187: '=',188: ',',189: '-',190: '.',191: '/',192: '`',219: '[',220: '\\',221: ']',222: "'" }
def _handle_key(key):
    """Handle key codes"""
    ...

class FigureCanvasWebAggCore(backend_agg.FigureCanvasAgg):
    supports_blit = ...
    def __init__(self, *args, **kwargs):
        ...
    
    def show(self):
        ...
    
    def draw(self):
        ...
    
    def draw_idle(self):
        ...
    
    def set_image_mode(self, mode):
        """
        Set the image mode for any subsequent images which will be sent
        to the clients. The modes may currently be either 'full' or 'diff'.

        Note: diff images may not contain transparency, therefore upon
        draw this mode may be changed if the resulting image has any
        transparent component.

        """
        ...
    
    def get_diff_image(self):
        ...
    
    def get_renderer(self, cleared: Optional[Any] = ...):
        ...
    
    def handle_event(self, event):
        ...
    
    def handle_unknown_event(self, event):
        ...
    
    def handle_ack(self, event):
        ...
    
    def handle_draw(self, event):
        ...
    
    def _handle_mouse(self, event):
        ...
    
    handle_button_press = ...
    def _handle_key(self, event):
        ...
    
    handle_key_press = ...
    def handle_toolbar_button(self, event):
        ...
    
    def handle_refresh(self, event):
        ...
    
    def handle_resize(self, event):
        ...
    
    def handle_send_image_mode(self, event):
        ...
    
    def handle_set_dpi_ratio(self, event):
        ...
    
    def send_event(self, event_type, **kwargs):
        ...
    


_JQUERY_ICON_CLASSES = { 'home': 'ui-icon ui-icon-home','back': 'ui-icon ui-icon-circle-arrow-w','forward': 'ui-icon ui-icon-circle-arrow-e','zoom_to_rect': 'ui-icon ui-icon-search','move': 'ui-icon ui-icon-arrow-4','download': 'ui-icon ui-icon-disk',None: None }
class NavigationToolbar2WebAgg(backend_bases.NavigationToolbar2):
    toolitems = ...
    def _init_toolbar(self):
        self.message = ...
        self.cursor = ...
    
    def set_message(self, message):
        self.message = ...
    
    def set_cursor(self, cursor):
        self.cursor = ...
    
    def draw_rubberband(self, event, x0, y0, x1, y1):
        ...
    
    def release_zoom(self, event):
        ...
    
    def save_figure(self, *args):
        """Save the current figure"""
        ...
    


class FigureManagerWebAgg(backend_bases.FigureManagerBase):
    ToolbarCls = ...
    def __init__(self, canvas, num):
        self.web_sockets = ...
        self.toolbar = ...
    
    def show(self):
        ...
    
    def _get_toolbar(self, canvas):
        ...
    
    def resize(self, w, h):
        ...
    
    def set_window_title(self, title):
        ...
    
    def add_web_socket(self, web_socket):
        ...
    
    def remove_web_socket(self, web_socket):
        ...
    
    def handle_json(self, content):
        ...
    
    def refresh_all(self):
        ...
    
    @classmethod
    def get_javascript(cls, stream: Optional[Any] = ...):
        ...
    
    @classmethod
    def get_static_file_path(cls):
        ...
    
    def _send_event(self, event_type, **kwargs):
        ...
    


class TimerTornado(backend_bases.TimerBase):
    def _timer_start(self):
        ...
    
    def _timer_stop(self):
        ...
    
    def _timer_set_interval(self):
        ...
    


@_Backend.export
class _BackendWebAggCoreAgg(_Backend):
    FigureCanvas = ...
    FigureManager = ...


