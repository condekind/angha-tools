"""
This type stub file was generated by pyright.
"""

from matplotlib.backends.qt_compat import QtCore, QtGui, QtWidgets
from typing import Any, Optional

"""
formlayout
==========

Module creating Qt form dialogs/layouts to edit various type of parameters


formlayout License Agreement (MIT License)
------------------------------------------

Copyright (c) 2009 Pierre Raybaut

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
"""
__version__ = '1.0.10'
__license__ = __doc__
BLACKLIST = "title", "label"
class ColorButton(QtWidgets.QPushButton):
    """
    Color choosing push button
    """
    colorChanged = ...
    def __init__(self, parent: Optional[Any] = ...):
        ...
    
    def choose_color(self):
        ...
    
    def get_color(self):
        ...
    
    @QtCore.Slot(QtGui.QColor)
    def set_color(self, color):
        ...
    
    color = ...


def to_qcolor(color):
    """Create a QColor from a matplotlib color"""
    ...

class ColorLayout(QtWidgets.QHBoxLayout):
    """Color-specialized QLineEdit layout"""
    def __init__(self, color, parent: Optional[Any] = ...):
        self.lineedit = ...
        self.colorbtn = ...
    
    def update_color(self):
        ...
    
    def update_text(self, color):
        ...
    
    def text(self):
        ...
    


def font_is_installed(font):
    """Check if font is installed"""
    ...

def tuple_to_qfont(tup):
    """
    Create a QFont from tuple:
        (family [string], size [int], italic [bool], bold [bool])
    """
    ...

def qfont_to_tuple(font):
    ...

class FontLayout(QtWidgets.QGridLayout):
    """Font selection"""
    def __init__(self, value, parent: Optional[Any] = ...):
        self.family = ...
        self.size = ...
        self.italic = ...
        self.bold = ...
    
    def get_font(self):
        ...
    


def is_edit_valid(edit):
    ...

class FormWidget(QtWidgets.QWidget):
    update_buttons = ...
    def __init__(self, data, comment=..., parent: Optional[Any] = ...):
        self.data = ...
        self.widgets = ...
        self.formlayout = ...
    
    def get_dialog(self):
        """Return FormDialog instance"""
        ...
    
    def setup(self):
        ...
    
    def get(self):
        ...
    


class FormComboWidget(QtWidgets.QWidget):
    update_buttons = ...
    def __init__(self, datalist, comment=..., parent: Optional[Any] = ...):
        self.combobox = ...
        self.stackwidget = ...
        self.widgetlist = ...
    
    def setup(self):
        ...
    
    def get(self):
        ...
    


class FormTabWidget(QtWidgets.QWidget):
    update_buttons = ...
    def __init__(self, datalist, comment=..., parent: Optional[Any] = ...):
        self.tabwidget = ...
        self.widgetlist = ...
    
    def setup(self):
        ...
    
    def get(self):
        ...
    


class FormDialog(QtWidgets.QDialog):
    """Form Dialog"""
    def __init__(self, data, title=..., comment=..., icon: Optional[Any] = ..., parent: Optional[Any] = ..., apply: Optional[Any] = ...):
        self.apply_callback = ...
        self.float_fields = ...
        self.bbox = ...
    
    def register_float_field(self, field):
        ...
    
    def update_buttons(self):
        ...
    
    def accept(self):
        self.data = ...
    
    def reject(self):
        self.data = ...
    
    def apply(self):
        ...
    
    def get(self):
        """Return form result"""
        ...
    


def fedit(data, title=..., comment=..., icon: Optional[Any] = ..., parent: Optional[Any] = ..., apply: Optional[Any] = ...):
    """
    Create form dialog and return result
    (if Cancel button is pressed, return None)

    data: datalist, datagroup
    title: string
    comment: string
    icon: QIcon instance
    parent: parent QWidget
    apply: apply callback (function)

    datalist: list/tuple of (field_name, field_value)
    datagroup: list/tuple of (datalist *or* datagroup, title, comment)

    -> one field for each member of a datalist
    -> one tab for each member of a top-level datagroup
    -> one page (of a multipage widget, each page can be selected with a combo
       box) for each member of a datagroup inside a datagroup

    Supported types for field_value:
      - int, float, str, unicode, bool
      - colors: in Qt-compatible text form, i.e. in hex format or name (red,...)
                (automatically detected from a string)
      - list/tuple:
          * the first element will be the selected index (or value)
          * the other elements can be couples (key, value) or only values
    """
    ...

if __name__ == "__main__":
    def create_datalist_example():
        ...
    
    def create_datagroup_example():
        ...
    
    datalist = create_datalist_example()
    def apply_test(data):
        ...
    
    datagroup = create_datagroup_example()
    datalist = create_datalist_example()
    datagroup = create_datagroup_example()
