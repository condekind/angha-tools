"""
This type stub file was generated by pyright.
"""

import uuid
from matplotlib.backend_bases import _Backend
from matplotlib.backends.backend_webagg_core import FigureCanvasWebAggCore, FigureManagerWebAgg, NavigationToolbar2WebAgg
from typing import Any, Optional

"""Interactive figures in the IPython notebook"""
def connection_info():
    """
    Return a string showing the figure and connection status for
    the backend. This is intended as a diagnostic tool, and not for general
    use.

    """
    ...

_FONT_AWESOME_CLASSES = { 'home': 'fa fa-home icon-home','back': 'fa fa-arrow-left icon-arrow-left','forward': 'fa fa-arrow-right icon-arrow-right','zoom_to_rect': 'fa fa-square-o icon-check-empty','move': 'fa fa-arrows icon-move','download': 'fa fa-floppy-o icon-save',None: None }
class NavigationIPy(NavigationToolbar2WebAgg):
    toolitems = ...


class FigureManagerNbAgg(FigureManagerWebAgg):
    ToolbarCls = ...
    def __init__(self, canvas, num):
        ...
    
    def display_js(self):
        ...
    
    def show(self):
        ...
    
    def reshow(self):
        """
        A special method to re-show the figure in the notebook.

        """
        ...
    
    @property
    def connected(self):
        ...
    
    @classmethod
    def get_javascript(cls, stream: Optional[Any] = ...):
        ...
    
    def _create_comm(self):
        ...
    
    def destroy(self):
        ...
    
    def clearup_closed(self):
        """Clear up any closed Comms."""
        self.web_sockets = ...
    
    def remove_comm(self, comm_id):
        self.web_sockets = ...
    


class FigureCanvasNbAgg(FigureCanvasWebAggCore):
    def new_timer(self, *args, **kwargs):
        ...
    


class CommSocket(object):
    """
    Manages the Comm connection between IPython and the browser (client).

    Comms are 2 way, with the CommSocket being able to publish a message
    via the send_json method, and handle a message with on_message. On the
    JS side figure.send_message and figure.ws.onmessage do the sending and
    receiving respectively.

    """
    def __init__(self, manager):
        self.supports_binary = ...
        self.manager = ...
        self.uuid = ...
    
    def is_open(self):
        ...
    
    def on_close(self):
        ...
    
    def send_json(self, content):
        ...
    
    def send_binary(self, blob):
        ...
    
    def on_message(self, message):
        ...
    


@_Backend.export
class _BackendNbAgg(_Backend):
    FigureCanvas = ...
    FigureManager = ...
    @staticmethod
    def new_figure_manager_given_figure(num, figure):
        ...
    
    @staticmethod
    def trigger_manager_draw(manager):
        ...
    
    @staticmethod
    def show(*args, **kwargs):
        ...
    


