"""
This type stub file was generated by pyright.
"""

"""
Contains a classes for generating hatch patterns.
"""
class HatchPatternBase(object):
    """
    The base class for a hatch pattern.
    """
    ...


class HorizontalHatch(HatchPatternBase):
    def __init__(self, hatch, density):
        self.num_lines = ...
        self.num_vertices = ...
    
    def set_vertices_and_codes(self, vertices, codes):
        ...
    


class VerticalHatch(HatchPatternBase):
    def __init__(self, hatch, density):
        self.num_lines = ...
        self.num_vertices = ...
    
    def set_vertices_and_codes(self, vertices, codes):
        ...
    


class NorthEastHatch(HatchPatternBase):
    def __init__(self, hatch, density):
        self.num_lines = ...
    
    def set_vertices_and_codes(self, vertices, codes):
        ...
    


class SouthEastHatch(HatchPatternBase):
    def __init__(self, hatch, density):
        self.num_lines = ...
        self.num_vertices = ...
    
    def set_vertices_and_codes(self, vertices, codes):
        ...
    


class Shapes(HatchPatternBase):
    filled = ...
    def __init__(self, hatch, density):
        ...
    
    def set_vertices_and_codes(self, vertices, codes):
        ...
    


class Circles(Shapes):
    def __init__(self, hatch, density):
        self.shape_vertices = ...
        self.shape_codes = ...
    


class SmallCircles(Circles):
    size = ...
    def __init__(self, hatch, density):
        self.num_rows = ...
    


class LargeCircles(Circles):
    size = ...
    def __init__(self, hatch, density):
        self.num_rows = ...
    


class SmallFilledCircles(SmallCircles):
    size = ...
    filled = ...
    def __init__(self, hatch, density):
        self.num_rows = ...
    


class Stars(Shapes):
    size = ...
    filled = ...
    def __init__(self, hatch, density):
        self.num_rows = ...
        self.shape_vertices = ...
        self.shape_codes = ...
    


_hatch_types = [HorizontalHatch, VerticalHatch, NorthEastHatch, SouthEastHatch, SmallCircles, LargeCircles, SmallFilledCircles, Stars]
def get_path(hatchpattern, density=...):
    """
    Given a hatch specifier, *hatchpattern*, generates Path to render
    the hatch in a unit square.  *density* is the number of lines per
    unit square.
    """
    ...

