"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class SubplotBase(object):
    """
    Base class for subplots, which are :class:`Axes` instances with
    additional methods to facilitate generating and manipulating a set
    of :class:`Axes` within a figure.
    """
    def __init__(self, fig, *args, **kwargs):
        """
        *fig* is a :class:`matplotlib.figure.Figure` instance.

        *args* is the tuple (*numRows*, *numCols*, *plotNum*), where
        the array of subplots in the figure has dimensions *numRows*,
        *numCols*, and where *plotNum* is the number of the subplot
        being created.  *plotNum* starts at 1 in the upper left
        corner and increases to the right.

        If *numRows* <= *numCols* <= *plotNum* < 10, *args* can be the
        decimal integer *numRows* * 100 + *numCols* * 10 + *plotNum*.
        """
        self.figure = ...
    
    def __reduce__(self):
        ...
    
    def get_geometry(self):
        """get the subplot geometry, e.g., 2,2,3"""
        ...
    
    def change_geometry(self, numrows, numcols, num):
        """change subplot geometry, e.g., from 1,1,1 to 2,2,3"""
        ...
    
    def get_subplotspec(self):
        """get the SubplotSpec instance associated with the subplot"""
        ...
    
    def set_subplotspec(self, subplotspec):
        """set the SubplotSpec instance associated with the subplot"""
        ...
    
    def update_params(self):
        """update the subplot position from fig.subplotpars"""
        ...
    
    def is_first_col(self):
        ...
    
    def is_first_row(self):
        ...
    
    def is_last_row(self):
        ...
    
    def is_last_col(self):
        ...
    
    def label_outer(self):
        """Only show "outer" labels and tick labels.

        x-labels are only kept for subplots on the last row; y-labels only for
        subplots on the first column.
        """
        ...
    
    def _make_twin_axes(self, *kl, **kwargs):
        """
        Make a twinx axes of self. This is used for twinx and twiny.
        """
        ...
    


_subplot_classes = {  }
def subplot_class_factory(axes_class: Optional[Any] = ...):
    ...

Subplot = subplot_class_factory()
class _PicklableSubplotClassConstructor(object):
    """
    This stub class exists to return the appropriate subplot
    class when __call__-ed with an axes class. This is purely to
    allow Pickling of Axes and Subplots.
    """
    def __call__(self, axes_class):
        ...
    


