"""
This type stub file was generated by pyright.
"""

import contextlib
import logging
from . import artist, docstring
from .artist import Artist
from typing import Any, Optional

"""
Classes for including text in a figure.
"""
_log = logging.getLogger(__name__)
def _process_text_args(override, fontdict: Optional[Any] = ..., **kwargs):
    "Return an override dict.  See :func:`~pyplot.text' docstring for info"
    ...

@contextlib.contextmanager
def _wrap_text(textobj):
    """Temporarily inserts newlines to the text if the wrap option is enabled.
    """
    ...

def get_rotation(rotation):
    """
    Return the text angle as float. The returned
    angle is between 0 and 360 deg.

    *rotation* may be 'horizontal', 'vertical', or a numeric value in degrees.
    """
    ...

def _get_textbox(text, renderer):
    """
    Calculate the bounding box of the text. Unlike
    :meth:`matplotlib.text.Text.get_extents` method, The bbox size of
    the text before the rotation is calculated.
    """
    ...

class Text(Artist):
    """
    Handle storing and drawing of text in window or data coordinates.
    """
    zorder = ...
    _cached = ...
    def __repr__(self):
        ...
    
    def __init__(self, x=..., y=..., text=..., color: Optional[Any] = ..., verticalalignment=..., horizontalalignment=..., multialignment: Optional[Any] = ..., fontproperties: Optional[Any] = ..., rotation: Optional[Any] = ..., linespacing: Optional[Any] = ..., rotation_mode: Optional[Any] = ..., usetex: Optional[Any] = ..., wrap: bool = ..., **kwargs):
        """
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        """
        ...
    
    def update(self, kwargs):
        """
        Update properties from a dictionary.
        """
        ...
    
    def __getstate__(self):
        ...
    
    def contains(self, mouseevent):
        """Test whether the mouse event occurred in the patch.

        In the case of text, a hit is true anywhere in the
        axis-aligned bounding-box containing the text.

        Returns True or False.
        """
        ...
    
    def _get_xy_display(self):
        'get the (possibly unit converted) transformed x, y in display coords'
        ...
    
    def _get_multialignment(self):
        ...
    
    def get_rotation(self):
        'return the text angle as float in degrees'
        ...
    
    def set_rotation_mode(self, m):
        """
        Set text rotation mode.

        .. ACCEPTS: [ None | "default" | "anchor" ]

        Parameters
        ----------
        m : ``None`` or ``"default"`` or ``"anchor"``
            If ``None`` or ``"default"``, the text will be first rotated, then
            aligned according to their horizontal and vertical alignments.  If
            ``"anchor"``, then alignment occurs before rotation.
        """
        self.stale = ...
    
    def get_rotation_mode(self):
        "get text rotation mode"
        ...
    
    def update_from(self, other):
        'Copy properties from other to self'
        self.stale = ...
    
    def _get_layout(self, renderer):
        """
        return the extent (bbox) of the text together with
        multiple-alignment information. Note that it returns an extent
        of a rotated text when necessary.
        """
        ...
    
    def set_bbox(self, rectprops):
        """
        Draw a bounding box around self.  rectprops are any settable
        properties for a FancyBboxPatch, e.g., facecolor='red', alpha=0.5.

          t.set_bbox(dict(facecolor='red', alpha=0.5))

        The default boxstyle is 'square'. The mutation
        scale of the FancyBboxPatch is set to the fontsize.

        ACCEPTS: FancyBboxPatch prop dict
        """
        ...
    
    def get_bbox_patch(self):
        """
        Return the bbox Patch object. Returns None if the
        FancyBboxPatch is not made.
        """
        ...
    
    def update_bbox_position_size(self, renderer):
        """
        Update the location and the size of the bbox. This method
        should be used when the position and size of the bbox needs to
        be updated before actually drawing the bbox.
        """
        ...
    
    def _draw_bbox(self, renderer, posx, posy):
        """ Update the location and the size of the bbox
        (FancyBboxPatch), and draw
        """
        ...
    
    def _update_clip_properties(self):
        ...
    
    def set_clip_box(self, clipbox):
        """
        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.

        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
        """
        ...
    
    def set_clip_path(self, path, transform: Optional[Any] = ...):
        """
        Set the artist's clip path, which may be:

          * a :class:`~matplotlib.patches.Patch` (or subclass) instance

          * a :class:`~matplotlib.path.Path` instance, in which case
             an optional :class:`~matplotlib.transforms.Transform`
             instance may be provided, which will be applied to the
             path before using it for clipping.

          * *None*, to remove the clipping path

        For efficiency, if the path happens to be an axis-aligned
        rectangle, this method will set the clipping box to the
        corresponding rectangle and set the clipping path to *None*.

        ACCEPTS: [ (:class:`~matplotlib.path.Path`,
        :class:`~matplotlib.transforms.Transform`) |
        :class:`~matplotlib.patches.Patch` | None ]
        """
        ...
    
    def set_clip_on(self, b):
        """
        Set whether artist uses clipping.

        When False, artists will be visible outside of the axes, which can lead
        to unexpected results.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        """
        ...
    
    def get_wrap(self):
        """Returns the wrapping state for the text."""
        ...
    
    def set_wrap(self, wrap):
        """Sets the wrapping state for the text.

        Parameters
        ----------
        wrap : bool
            .. ACCEPTS: bool
        """
        ...
    
    def _get_wrap_line_width(self):
        """
        Returns the maximum line width for wrapping text based on the
        current orientation.
        """
        ...
    
    def _get_dist_to_box(self, rotation, x0, y0, figure_box):
        """
        Returns the distance from the given points, to the boundaries
        of a rotated box in pixels.
        """
        ...
    
    def _get_rendered_text_width(self, text):
        """
        Returns the width of a given text string, in pixels.
        """
        ...
    
    def _get_wrapped_text(self):
        """
        Return a copy of the text with new lines added, so that
        the text is wrapped relative to the parent figure.
        """
        ...
    
    @artist.allow_rasterization
    def draw(self, renderer):
        """
        Draws the :class:`Text` object to the given *renderer*.
        """
        self.stale = ...
    
    def get_color(self):
        "Return the color of the text"
        ...
    
    def get_fontproperties(self):
        "Return the :class:`~font_manager.FontProperties` object"
        ...
    
    def get_font_properties(self):
        'alias for get_fontproperties'
        ...
    
    def get_family(self):
        "Return the list of font families used for font lookup"
        ...
    
    def get_fontfamily(self):
        'alias for get_family'
        ...
    
    def get_name(self):
        "Return the font name as string"
        ...
    
    def get_style(self):
        "Return the font style as string"
        ...
    
    def get_size(self):
        "Return the font size as integer"
        ...
    
    def get_variant(self):
        "Return the font variant as a string"
        ...
    
    def get_fontvariant(self):
        'alias for get_variant'
        ...
    
    def get_weight(self):
        "Get the font weight as string or number"
        ...
    
    def get_fontname(self):
        'alias for get_name'
        ...
    
    def get_fontstyle(self):
        'alias for get_style'
        ...
    
    def get_fontsize(self):
        'alias for get_size'
        ...
    
    def get_fontweight(self):
        'alias for get_weight'
        ...
    
    def get_stretch(self):
        'Get the font stretch as a string or number'
        ...
    
    def get_fontstretch(self):
        'alias for get_stretch'
        ...
    
    def get_ha(self):
        'alias for get_horizontalalignment'
        ...
    
    def get_horizontalalignment(self):
        """
        Return the horizontal alignment as string.  Will be one of
        'left', 'center' or 'right'.
        """
        ...
    
    def get_unitless_position(self):
        "Return the unitless position of the text as a tuple (*x*, *y*)"
        ...
    
    def get_position(self):
        "Return the position of the text as a tuple (*x*, *y*)"
        ...
    
    def get_prop_tup(self, renderer: Optional[Any] = ...):
        """
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        """
        ...
    
    def get_text(self):
        "Get the text as string"
        ...
    
    def get_va(self):
        'alias for :meth:`getverticalalignment`'
        ...
    
    def get_verticalalignment(self):
        """
        Return the vertical alignment as string.  Will be one of
        'top', 'center', 'bottom' or 'baseline'.
        """
        ...
    
    def get_window_extent(self, renderer: Optional[Any] = ..., dpi: Optional[Any] = ...):
        '''
        Return a :class:`~matplotlib.transforms.Bbox` object bounding
        the text, in display units.

        In addition to being used internally, this is useful for
        specifying clickable regions in a png file on a web page.

        *renderer* defaults to the _renderer attribute of the text
        object.  This is not assigned until the first execution of
        :meth:`draw`, so you must use this kwarg if you want
        to call :meth:`get_window_extent` prior to the first
        :meth:`draw`.  For getting web page regions, it is
        simpler to call the method after saving the figure.

        *dpi* defaults to self.figure.dpi; the renderer dpi is
        irrelevant.  For the web application, if figure.dpi is not
        the value used when saving the figure, then the value that
        was used must be specified as the *dpi* argument.
        '''
        ...
    
    def set_backgroundcolor(self, color):
        """
        Set the background color of the text by updating the bbox.

        .. seealso::

            :meth:`set_bbox`
               To change the position of the bounding box.

        ACCEPTS: any matplotlib color
        """
        self.stale = ...
    
    def set_color(self, color):
        """
        Set the foreground color of the text

        ACCEPTS: any matplotlib color
        """
        self.stale = ...
    
    def set_ha(self, align):
        'alias for set_horizontalalignment'
        ...
    
    def set_horizontalalignment(self, align):
        """
        Set the horizontal alignment to one of

        ACCEPTS: [ 'center' | 'right' | 'left' ]
        """
        self.stale = ...
    
    def set_ma(self, align):
        'alias for set_multialignment'
        ...
    
    def set_multialignment(self, align):
        """
        Set the alignment for multiple lines layout.  The layout of the
        bounding box of all the lines is determined bu the horizontalalignment
        and verticalalignment properties, but the multiline text within that
        box can be

        ACCEPTS: ['left' | 'right' | 'center' ]
        """
        self.stale = ...
    
    def set_linespacing(self, spacing):
        """
        Set the line spacing as a multiple of the font size.
        Default is 1.2.

        ACCEPTS: float (multiple of font size)
        """
        self.stale = ...
    
    def set_family(self, fontname):
        """
        Set the font family.  May be either a single string, or a list
        of strings in decreasing priority.  Each string may be either
        a real font name or a generic font class name.  If the latter,
        the specific font names will be looked up in the
        :file:`matplotlibrc` file.

        ACCEPTS: [FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' |
                  'monospace' ]
        """
        self.stale = ...
    
    def set_variant(self, variant):
        """
        Set the font variant, either 'normal' or 'small-caps'.

        ACCEPTS: [ 'normal' | 'small-caps' ]
        """
        self.stale = ...
    
    def set_fontvariant(self, variant):
        'alias for set_variant'
        ...
    
    def set_name(self, fontname):
        """alias for set_family"""
        ...
    
    def set_fontname(self, fontname):
        """alias for set_family"""
        ...
    
    def set_style(self, fontstyle):
        """
        Set the font style.

        ACCEPTS: [ 'normal' | 'italic' | 'oblique']
        """
        self.stale = ...
    
    def set_fontstyle(self, fontstyle):
        'alias for set_style'
        ...
    
    def set_size(self, fontsize):
        """
        Set the font size.  May be either a size string, relative to
        the default font size, or an absolute font size in points.

        ACCEPTS: [size in points | 'xx-small' | 'x-small' | 'small' |
                  'medium' | 'large' | 'x-large' | 'xx-large' ]
        """
        self.stale = ...
    
    def set_fontsize(self, fontsize):
        'alias for set_size'
        ...
    
    def set_weight(self, weight):
        """
        Set the font weight.

        ACCEPTS: [a numeric value in range 0-1000 | 'ultralight' | 'light' |
                  'normal' | 'regular' | 'book' | 'medium' | 'roman' |
                  'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' |
                  'extra bold' | 'black' ]
        """
        self.stale = ...
    
    def set_fontweight(self, weight):
        'alias for set_weight'
        ...
    
    def set_stretch(self, stretch):
        """
        Set the font stretch (horizontal condensation or expansion).

        ACCEPTS: [a numeric value in range 0-1000 | 'ultra-condensed' |
                  'extra-condensed' | 'condensed' | 'semi-condensed' |
                  'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' |
                  'ultra-expanded' ]
        """
        self.stale = ...
    
    def set_fontstretch(self, stretch):
        'alias for set_stretch'
        ...
    
    def set_position(self, xy):
        """
        Set the (*x*, *y*) position of the text

        ACCEPTS: (x,y)
        """
        ...
    
    def set_x(self, x):
        """
        Set the *x* position of the text

        ACCEPTS: float
        """
        self.stale = ...
    
    def set_y(self, y):
        """
        Set the *y* position of the text

        ACCEPTS: float
        """
        self.stale = ...
    
    def set_rotation(self, s):
        """
        Set the rotation of the text

        ACCEPTS: [ angle in degrees | 'vertical' | 'horizontal' ]
        """
        self.stale = ...
    
    def set_va(self, align):
        'alias for set_verticalalignment'
        ...
    
    def set_verticalalignment(self, align):
        """
        Set the vertical alignment

        ACCEPTS: [ 'center' | 'top' | 'bottom' | 'baseline' ]
        """
        self.stale = ...
    
    def set_text(self, s):
        """
        Set the text string *s*

        It may contain newlines (``\\n``) or math in LaTeX syntax.

        ACCEPTS: string or anything printable with '%s' conversion.
        """
        self.stale = ...
    
    @staticmethod
    def is_math_text(s, usetex: Optional[Any] = ...):
        """
        Returns a cleaned string and a boolean flag.
        The flag indicates if the given string *s* contains any mathtext,
        determined by counting unescaped dollar signs. If no mathtext
        is present, the cleaned string has its dollar signs unescaped.
        If usetex is on, the flag always has the value "TeX".
        """
        ...
    
    def set_fontproperties(self, fp):
        """
        Set the font properties that control the text.  *fp* must be a
        :class:`matplotlib.font_manager.FontProperties` object.

        ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance
        """
        self.stale = ...
    
    def set_font_properties(self, fp):
        'alias for set_fontproperties'
        ...
    
    def set_usetex(self, usetex):
        """
        Parameters
        ----------
        usetex : bool or None
            Whether to render using TeX, ``None`` means to use
            :rc:`text.usetex`.

            .. ACCEPTS: bool or None
        """
        self.stale = ...
    
    def get_usetex(self):
        """
        Return whether this `Text` object uses TeX for rendering.

        If the user has not manually set this value, it defaults to
        :rc:`text.usetex`.
        """
        ...
    


class TextWithDash(Text):
    """
    This is basically a :class:`~matplotlib.text.Text` with a dash
    (drawn with a :class:`~matplotlib.lines.Line2D`) before/after
    it. It is intended to be a drop-in replacement for
    :class:`~matplotlib.text.Text`, and should behave identically to
    it when *dashlength* = 0.0.

    The dash always comes between the point specified by
    :meth:`~matplotlib.text.Text.set_position` and the text. When a
    dash exists, the text alignment arguments (*horizontalalignment*,
    *verticalalignment*) are ignored.

    *dashlength* is the length of the dash in canvas units.
    (default = 0.0).

    *dashdirection* is one of 0 or 1, where 0 draws the dash after the
    text and 1 before.  (default = 0).

    *dashrotation* specifies the rotation of the dash, and should
    generally stay *None*. In this case
    :meth:`~matplotlib.text.TextWithDash.get_dashrotation` returns
    :meth:`~matplotlib.text.Text.get_rotation`.  (i.e., the dash takes
    its rotation from the text's rotation). Because the text center is
    projected onto the dash, major deviations in the rotation cause
    what may be considered visually unappealing results.
    (default = *None*)

    *dashpad* is a padding length to add (or subtract) space
    between the text and the dash, in canvas units.
    (default = 3)

    *dashpush* "pushes" the dash and text away from the point
    specified by :meth:`~matplotlib.text.Text.set_position` by the
    amount in canvas units.  (default = 0)

    .. note::

        The alignment of the two objects is based on the bounding box
        of the :class:`~matplotlib.text.Text`, as obtained by
        :meth:`~matplotlib.artist.Artist.get_window_extent`.  This, in
        turn, appears to depend on the font metrics as given by the
        rendering backend. Hence the quality of the "centering" of the
        label text with respect to the dash varies depending on the
        backend used.

    .. note::

        I'm not sure that I got the
        :meth:`~matplotlib.text.TextWithDash.get_window_extent` right,
        or whether that's sufficient for providing the object bounding
        box.

    """
    __name__ = ...
    def __str__(self):
        ...
    
    def __init__(self, x=..., y=..., text=..., color: Optional[Any] = ..., verticalalignment=..., horizontalalignment=..., multialignment: Optional[Any] = ..., fontproperties: Optional[Any] = ..., rotation: Optional[Any] = ..., linespacing: Optional[Any] = ..., dashlength=..., dashdirection=..., dashrotation: Optional[Any] = ..., dashpad=..., dashpush=...):
        self.dashline = ...
    
    def get_unitless_position(self):
        "Return the unitless position of the text as a tuple (*x*, *y*)"
        ...
    
    def get_position(self):
        "Return the position of the text as a tuple (*x*, *y*)"
        ...
    
    def get_prop_tup(self, renderer: Optional[Any] = ...):
        """
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (e.g., layouts) and
        need to know if the text has changed.
        """
        ...
    
    def draw(self, renderer):
        """
        Draw the :class:`TextWithDash` object to the given *renderer*.
        """
        self.stale = ...
    
    def update_coords(self, renderer):
        """
        Computes the actual *x*, *y* coordinates for text based on the
        input *x*, *y* and the *dashlength*. Since the rotation is
        with respect to the actual canvas's coordinates we need to map
        back and forth.
        """
        ...
    
    def get_window_extent(self, renderer: Optional[Any] = ...):
        '''
        Return a :class:`~matplotlib.transforms.Bbox` object bounding
        the text, in display units.

        In addition to being used internally, this is useful for
        specifying clickable regions in a png file on a web page.

        *renderer* defaults to the _renderer attribute of the text
        object.  This is not assigned until the first execution of
        :meth:`draw`, so you must use this kwarg if you want
        to call :meth:`get_window_extent` prior to the first
        :meth:`draw`.  For getting web page regions, it is
        simpler to call the method after saving the figure.
        '''
        ...
    
    def get_dashlength(self):
        """
        Get the length of the dash.
        """
        ...
    
    def set_dashlength(self, dl):
        """
        Set the length of the dash.

        ACCEPTS: float (canvas units)
        """
        self.stale = ...
    
    def get_dashdirection(self):
        """
        Get the direction dash.  1 is before the text and 0 is after.
        """
        ...
    
    def set_dashdirection(self, dd):
        """
        Set the direction of the dash following the text.
        1 is before the text and 0 is after. The default
        is 0, which is what you'd want for the typical
        case of ticks below and on the left of the figure.

        ACCEPTS: int (1 is before, 0 is after)
        """
        self.stale = ...
    
    def get_dashrotation(self):
        """
        Get the rotation of the dash in degrees.
        """
        ...
    
    def set_dashrotation(self, dr):
        """
        Set the rotation of the dash, in degrees

        ACCEPTS: float (degrees)
        """
        self.stale = ...
    
    def get_dashpad(self):
        """
        Get the extra spacing between the dash and the text, in canvas units.
        """
        ...
    
    def set_dashpad(self, dp):
        """
        Set the "pad" of the TextWithDash, which is the extra spacing
        between the dash and the text, in canvas units.

        ACCEPTS: float (canvas units)
        """
        self.stale = ...
    
    def get_dashpush(self):
        """
        Get the extra spacing between the dash and the specified text
        position, in canvas units.
        """
        ...
    
    def set_dashpush(self, dp):
        """
        Set the "push" of the TextWithDash, which
        is the extra spacing between the beginning
        of the dash and the specified position.

        ACCEPTS: float (canvas units)
        """
        self.stale = ...
    
    def set_position(self, xy):
        """
        Set the (*x*, *y*) position of the :class:`TextWithDash`.

        ACCEPTS: (x, y)
        """
        ...
    
    def set_x(self, x):
        """
        Set the *x* position of the :class:`TextWithDash`.

        ACCEPTS: float
        """
        self.stale = ...
    
    def set_y(self, y):
        """
        Set the *y* position of the :class:`TextWithDash`.

        ACCEPTS: float
        """
        self.stale = ...
    
    def set_transform(self, t):
        """
        Set the :class:`matplotlib.transforms.Transform` instance used
        by this artist.

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        """
        self.stale = ...
    
    def get_figure(self):
        'return the figure instance the artist belongs to'
        ...
    
    def set_figure(self, fig):
        """
        Set the figure instance the artist belong to.

        ACCEPTS: a :class:`matplotlib.figure.Figure` instance
        """
        ...
    


class OffsetFrom(object):
    'Callable helper class for working with `Annotation`'
    def __init__(self, artist, ref_coord, unit=...):
        '''
        Parameters
        ----------
        artist : `Artist`, `BboxBase`, or `Transform`
            The object to compute the offset from.

        ref_coord : length 2 sequence
            If `artist` is an `Artist` or `BboxBase`, this values is
            the location to of the offset origin in fractions of the
            `artist` bounding box.

            If `artist` is a transform, the offset origin is the
            transform applied to this value.

        unit : {'points, 'pixels'}
            The screen units to use (pixels or points) for the offset
            input.

        '''
        ...
    
    def set_unit(self, unit):
        '''
        The unit for input to the transform used by ``__call__``

        Parameters
        ----------
        unit : {'points', 'pixels'}
        '''
        ...
    
    def get_unit(self):
        'The unit for input to the transform used by ``__call__``'
        ...
    
    def _get_scale(self, renderer):
        ...
    
    def __call__(self, renderer):
        '''
        Return the offset transform.

        Parameters
        ----------
        renderer : `RendererBase`
            The renderer to use to compute the offset

        Returns
        -------
        transform : `Transform`
            Maps (x, y) in pixel or point units to screen units
            relative to the given artist.
        '''
        ...
    


class _AnnotationBase(object):
    def __init__(self, xy, xycoords=..., annotation_clip: Optional[Any] = ...):
        self.xy = ...
        self.xycoords = ...
    
    def _get_xy(self, renderer, x, y, s):
        ...
    
    def _get_xy_transform(self, renderer, s):
        ...
    
    def _get_ref_xy(self, renderer):
        """
        return x, y (in display coordinate) that is to be used for a reference
        of any offset coordinate
        """
        ...
    
    def set_annotation_clip(self, b):
        """
        set *annotation_clip* attribute.

          * True: the annotation will only be drawn when self.xy is inside
                  the axes.
          * False: the annotation will always be drawn regardless of its
                   position.
          * None: the self.xy will be checked only if *xycoords* is "data"
        """
        ...
    
    def get_annotation_clip(self):
        """
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        """
        ...
    
    def _get_position_xy(self, renderer):
        "Return the pixel position of the annotated point."
        ...
    
    def _check_xy(self, renderer, xy_pixel):
        """
        given the xy pixel coordinate, check if the annotation need to
        be drawn.
        """
        ...
    
    def draggable(self, state: Optional[Any] = ..., use_blit: bool = ...):
        """
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the annotation on the canvas with
        the mouse.  The DraggableAnnotation helper instance is returned if
        draggable is on.
        """
        ...
    


class Annotation(Text, _AnnotationBase):
    def __str__(self):
        ...
    
    @docstring.dedent_interpd
    def __init__(self, s, xy, xytext: Optional[Any] = ..., xycoords=..., textcoords: Optional[Any] = ..., arrowprops: Optional[Any] = ..., annotation_clip: Optional[Any] = ..., **kwargs):
        '''
        Annotate the point ``xy`` with text ``s``.

        Additional kwargs are passed to `~matplotlib.text.Text`.

        Parameters
        ----------

        s : str
            The text of the annotation

        xy : iterable
            Length 2 sequence specifying the *(x,y)* point to annotate

        xytext : iterable, optional
            Length 2 sequence specifying the *(x,y)* to place the text
            at.  If None, defaults to ``xy``.

        xycoords : str, Artist, Transform, callable or tuple, optional

            The coordinate system that ``xy`` is given in.

            For a `str` the allowed values are:

            =================   ===============================================
            Property            Description
            =================   ===============================================
            'figure points'     points from the lower left of the figure
            'figure pixels'     pixels from the lower left of the figure
            'figure fraction'   fraction of figure from lower left
            'axes points'       points from lower left corner of axes
            'axes pixels'       pixels from lower left corner of axes
            'axes fraction'     fraction of axes from lower left
            'data'              use the coordinate system of the object being
                                annotated (default)
            'polar'             *(theta,r)* if not native 'data' coordinates
            =================   ===============================================

            If a `~matplotlib.artist.Artist` object is passed in the units are
            fraction if it's bounding box.

            If a `~matplotlib.transforms.Transform` object is passed
            in use that to transform ``xy`` to screen coordinates

            If a callable it must take a
            `~matplotlib.backend_bases.RendererBase` object as input
            and return a `~matplotlib.transforms.Transform` or
            `~matplotlib.transforms.Bbox` object

            If a `tuple` must be length 2 tuple of str, `Artist`,
            `Transform` or callable objects.  The first transform is
            used for the *x* coordinate and the second for *y*.

            See :ref:`plotting-guide-annotation` for more details.

            Defaults to ``'data'``

        textcoords : str, `Artist`, `Transform`, callable or tuple, optional
            The coordinate system that ``xytext`` is given, which
            may be different than the coordinate system used for
            ``xy``.

            All ``xycoords`` values are valid as well as the following
            strings:

            =================   =========================================
            Property            Description
            =================   =========================================
            'offset points'     offset (in points) from the *xy* value
            'offset pixels'     offset (in pixels) from the *xy* value
            =================   =========================================

            defaults to the input of ``xycoords``

        arrowprops : dict, optional
            If not None, properties used to draw a
            `~matplotlib.patches.FancyArrowPatch` arrow between ``xy`` and
            ``xytext``.

            If `arrowprops` does not contain the key ``'arrowstyle'`` the
            allowed keys are:

            ==========   ======================================================
            Key          Description
            ==========   ======================================================
            width        the width of the arrow in points
            headwidth    the width of the base of the arrow head in points
            headlength   the length of the arrow head in points
            shrink       fraction of total length to 'shrink' from both ends
            ?            any key to :class:`matplotlib.patches.FancyArrowPatch`
            ==========   ======================================================

            If the `arrowprops` contains the key ``'arrowstyle'`` the
            above keys are forbidden.  The allowed values of
            ``'arrowstyle'`` are:

            ============   =============================================
            Name           Attrs
            ============   =============================================
            ``'-'``        None
            ``'->'``       head_length=0.4,head_width=0.2
            ``'-['``       widthB=1.0,lengthB=0.2,angleB=None
            ``'|-|'``      widthA=1.0,widthB=1.0
            ``'-|>'``      head_length=0.4,head_width=0.2
            ``'<-'``       head_length=0.4,head_width=0.2
            ``'<->'``      head_length=0.4,head_width=0.2
            ``'<|-'``      head_length=0.4,head_width=0.2
            ``'<|-|>'``    head_length=0.4,head_width=0.2
            ``'fancy'``    head_length=0.4,head_width=0.4,tail_width=0.4
            ``'simple'``   head_length=0.5,head_width=0.5,tail_width=0.2
            ``'wedge'``    tail_width=0.3,shrink_factor=0.5
            ============   =============================================

            Valid keys for `~matplotlib.patches.FancyArrowPatch` are:

            ===============  ==================================================
            Key              Description
            ===============  ==================================================
            arrowstyle       the arrow style
            connectionstyle  the connection style
            relpos           default is (0.5, 0.5)
            patchA           default is bounding box of the text
            patchB           default is None
            shrinkA          default is 2 points
            shrinkB          default is 2 points
            mutation_scale   default is text size (in points)
            mutation_aspect  default is 1.
            ?                any key for :class:`matplotlib.patches.PathPatch`
            ===============  ==================================================

            Defaults to None

        annotation_clip : bool, optional
            Controls the visibility of the annotation when it goes
            outside the axes area.

            If `True`, the annotation will only be drawn when the
            ``xy`` is inside the axes. If `False`, the annotation will
            always be drawn regardless of its position.

            The default is `None`, which behave as `True` only if
            *xycoords* is "data".

        Returns
        -------
        Annotation

        '''
        self.arrowprops = ...
        self.arrow = ...
    
    def contains(self, event):
        ...
    
    @property
    def xyann(self):
        ...
    
    @xyann.setter
    def xyann(self, xytext):
        ...
    
    @property
    def anncoords(self):
        ...
    
    @anncoords.setter
    def anncoords(self, coords):
        ...
    
    def set_figure(self, fig):
        ...
    
    def update_positions(self, renderer):
        """"Update the pixel positions of the annotated point and the
        text.
        """
        ...
    
    def _update_position_xytext(self, renderer, xy_pixel):
        """Update the pixel positions of the annotation text and the arrow
        patch.
        """
        ...
    
    @artist.allow_rasterization
    def draw(self, renderer):
        """
        Draw the :class:`Annotation` object to the given *renderer*.
        """
        ...
    
    def get_window_extent(self, renderer: Optional[Any] = ...):
        '''
        Return a :class:`~matplotlib.transforms.Bbox` object bounding
        the text and arrow annotation, in display units.

        *renderer* defaults to the _renderer attribute of the text
        object.  This is not assigned until the first execution of
        :meth:`draw`, so you must use this kwarg if you want
        to call :meth:`get_window_extent` prior to the first
        :meth:`draw`.  For getting web page regions, it is
        simpler to call the method after saving the figure. The
        *dpi* used defaults to self.figure.dpi; the renderer dpi is
        irrelevant.

        '''
        ...
    


