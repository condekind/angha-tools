"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
`ToolManager`
    Class that makes the bridge between user interaction (key press,
    toolbar clicks, ..) and the actions in response to the user inputs.
"""
class ToolEvent(object):
    """Event for tool manipulation (add/remove)"""
    def __init__(self, name, sender, tool, data: Optional[Any] = ...):
        self.name = ...
        self.sender = ...
        self.tool = ...
        self.data = ...
    


class ToolTriggerEvent(ToolEvent):
    """Event to inform  that a tool has been triggered"""
    def __init__(self, name, sender, tool, canvasevent: Optional[Any] = ..., data: Optional[Any] = ...):
        self.canvasevent = ...
    


class ToolManagerMessageEvent(object):
    """
    Event carrying messages from toolmanager

    Messages usually get displayed to the user by the toolbar
    """
    def __init__(self, name, sender, message):
        self.name = ...
        self.sender = ...
        self.message = ...
    


class ToolManager(object):
    """
    Helper class that groups all the user interactions for a Figure

    Attributes
    ----------
    figure: `Figure`
    keypresslock: `widgets.LockDraw`
        `LockDraw` object to know if the `canvas` key_press_event is locked
    messagelock: `widgets.LockDraw`
        `LockDraw` object to know if the message is available to write
    """
    def __init__(self, figure: Optional[Any] = ...):
        self.keypresslock = ...
        self.messagelock = ...
    
    @property
    def canvas(self):
        """Canvas managed by FigureManager"""
        ...
    
    @property
    def figure(self):
        """Figure that holds the canvas"""
        ...
    
    @figure.setter
    def figure(self, figure):
        ...
    
    def set_figure(self, figure, update_tools: bool = ...):
        """
        Sets the figure to interact with the tools

        Parameters
        ==========
        figure: `Figure`
        update_tools: bool
            Force tools to update figure
        """
        ...
    
    def toolmanager_connect(self, s, func):
        """
        Connect event with string *s* to *func*.

        Parameters
        ----------
        s : String
            Name of the event

            The following events are recognized

            - 'tool_message_event'
            - 'tool_removed_event'
            - 'tool_added_event'

            For every tool added a new event is created

            - 'tool_trigger_TOOLNAME`
              Where TOOLNAME is the id of the tool.

        func : function
            Function to be called with signature
            def func(event)
        """
        ...
    
    def toolmanager_disconnect(self, cid):
        """
        Disconnect callback id *cid*

        Example usage::

            cid = toolmanager.toolmanager_connect('tool_trigger_zoom',
                                                  on_press)
            #...later
            toolmanager.toolmanager_disconnect(cid)
        """
        ...
    
    def message_event(self, message, sender: Optional[Any] = ...):
        """ Emit a `ToolManagerMessageEvent`"""
        ...
    
    @property
    def active_toggle(self):
        """Currently toggled tools"""
        ...
    
    def get_tool_keymap(self, name):
        """
        Get the keymap associated with the specified tool

        Parameters
        ----------
        name : string
            Name of the Tool

        Returns
        -------
        list : list of keys associated with the Tool
        """
        ...
    
    def _remove_keys(self, name):
        ...
    
    def update_keymap(self, name, *keys):
        """
        Set the keymap to associate with the specified tool

        Parameters
        ----------
        name : string
            Name of the Tool
        keys : keys to associate with the Tool
        """
        ...
    
    def remove_tool(self, name):
        """
        Remove tool from `ToolManager`

        Parameters
        ----------
        name : string
            Name of the Tool
        """
        ...
    
    def add_tool(self, name, tool, *args, **kwargs):
        """
        Add *tool* to `ToolManager`

        If successful adds a new event `tool_trigger_name` where **name** is
        the **name** of the tool, this event is fired everytime
        the tool is triggered.

        Parameters
        ----------
        name : str
            Name of the tool, treated as the ID, has to be unique
        tool : class_like, i.e. str or type
            Reference to find the class of the Tool to added.

        Notes
        -----
        args and kwargs get passed directly to the tools constructor.

        See Also
        --------
        matplotlib.backend_tools.ToolBase : The base class for tools.
        """
        ...
    
    def _tool_added_event(self, tool):
        ...
    
    def _handle_toggle(self, tool, sender, canvasevent, data):
        """
        Toggle tools, need to untoggle prior to using other Toggle tool
        Called from trigger_tool

        Parameters
        ----------
        tool: Tool object
        sender: object
            Object that wishes to trigger the tool
        canvasevent : Event
            Original Canvas event or None
        data : Object
            Extra data to pass to the tool when triggering
        """
        ...
    
    def _get_cls_to_instantiate(self, callback_class):
        ...
    
    def trigger_tool(self, name, sender: Optional[Any] = ..., canvasevent: Optional[Any] = ..., data: Optional[Any] = ...):
        """
        Trigger a tool and emit the tool_trigger_[name] event

        Parameters
        ----------
        name : string
            Name of the tool
        sender: object
            Object that wishes to trigger the tool
        canvasevent : Event
            Original Canvas event or None
        data : Object
            Extra data to pass to the tool when triggering
        """
        ...
    
    def _trigger_tool(self, name, sender: Optional[Any] = ..., canvasevent: Optional[Any] = ..., data: Optional[Any] = ...):
        """
        Trigger on a tool

        Method to actually trigger the tool
        """
        ...
    
    def _key_press(self, event):
        ...
    
    @property
    def tools(self):
        """Return the tools controlled by `ToolManager`"""
        ...
    
    def get_tool(self, name, warn: bool = ...):
        """
        Return the tool object, also accepts the actual tool for convenience

        Parameters
        ----------
        name : str, ToolBase
            Name of the tool, or the tool itself
        warn : bool, optional
            If this method should give warnings.
        """
        ...
    


