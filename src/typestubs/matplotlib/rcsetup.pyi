"""
This type stub file was generated by pyright.
"""

import six
from matplotlib.cbook import deprecated, ls_mapper
from cycler import cycler as ccycler
from typing import Any, Optional

"""
The rcsetup module contains the default values and the validation code for
customization using matplotlib's rc settings.

Each rc setting is assigned a default value and a function used to validate
any attempted changes to that setting. The default values and validation
functions are defined in the rcsetup module, and are used to construct the
rcParams global object which stores the settings and is referenced throughout
matplotlib.

These default values should be consistent with the default matplotlibrc file
that actually reflects the values given here. Any additions or deletions to the
parameter set listed here should also be visited to the
:file:`matplotlibrc.template` in matplotlib's root source directory.
"""
interactive_bk = ['GTK', 'GTKAgg', 'GTKCairo', 'MacOSX', 'Qt4Agg', 'Qt5Agg', 'TkAgg', 'WX', 'WXAgg', 'GTK3Cairo', 'GTK3Agg', 'WebAgg', 'nbAgg']
interactive_bk = ['GTK', 'GTKAgg', 'GTKCairo', 'GTK3Agg', 'GTK3Cairo', 'MacOSX', 'nbAgg', 'Qt4Agg', 'Qt4Cairo', 'Qt5Agg', 'Qt5Cairo', 'TkAgg', 'TkCairo', 'WebAgg', 'WX', 'WXAgg', 'WXCairo']
non_interactive_bk = ['agg', 'cairo', 'gdk', 'pdf', 'pgf', 'ps', 'svg', 'template']
all_backends = interactive_bk + non_interactive_bk
class ValidateInStrings(object):
    def __init__(self, key, valid, ignorecase: bool = ...):
        'valid is a list of legal strings'
        self.key = ...
        self.ignorecase = ...
        self.valid = ...
    
    def __call__(self, s):
        ...
    


def _listify_validator(scalar_validator, allow_stringlist: bool = ...):
    ...

def validate_any(s):
    ...

validate_anylist = _listify_validator(validate_any)
def validate_path_exists(s):
    """If s is a path, return s, else False"""
    ...

def validate_bool(b):
    """Convert b to a boolean or raise"""
    ...

def validate_bool_maybe_none(b):
    'Convert b to a boolean or raise'
    ...

def deprecate_axes_hold(value):
    ...

def validate_float(s):
    """convert s to float or raise"""
    ...

validate_floatlist = _listify_validator(validate_float)
def validate_float_or_None(s):
    """convert s to float, None or raise"""
    ...

def validate_string_or_None(s):
    """convert s to string or raise"""
    ...

def validate_axisbelow(s):
    ...

def validate_dpi(s):
    """confirm s is string 'figure' or convert s to float or raise"""
    ...

def validate_int(s):
    """convert s to int or raise"""
    ...

def validate_int_or_None(s):
    """if not None, tries to validate as an int"""
    ...

def validate_fonttype(s):
    """
    confirm that this is a Postscript of PDF font type that we know how to
    convert to
    """
    ...

_validate_standard_backends = ValidateInStrings('backend', all_backends, ignorecase=True)
def validate_backend(s):
    ...

def validate_qt4(s):
    ...

def validate_qt5(s):
    ...

def validate_toolbar(s):
    ...

_seq_err_msg = 'You must supply exactly {n} values, you provided {num} ' 'values: {s}'
_str_err_msg = 'You must supply exactly {n} comma-separated values, you ' 'provided {num} comma-separated values: {s}'
class validate_nseq_float(object):
    def __init__(self, n: Optional[Any] = ..., allow_none: bool = ...):
        self.n = ...
        self.allow_none = ...
    
    def __call__(self, s):
        """return a seq of n floats or raise"""
        ...
    


class validate_nseq_int(object):
    def __init__(self, n: Optional[Any] = ...):
        self.n = ...
    
    def __call__(self, s):
        """return a seq of n ints or raise"""
        ...
    


def validate_color_or_inherit(s):
    'return a valid color arg'
    ...

def validate_color_or_auto(s):
    ...

def validate_color_for_prop_cycle(s):
    ...

def validate_color(s):
    'return a valid color arg'
    ...

validate_colorlist = _listify_validator(validate_color, allow_stringlist=True)
def validate_string(s):
    ...

validate_stringlist = _listify_validator(str)
validate_orientation = ValidateInStrings('orientation', ['landscape', 'portrait'])
def validate_aspect(s):
    ...

def validate_fontsize(s):
    ...

validate_fontsizelist = _listify_validator(validate_fontsize)
def validate_font_properties(s):
    ...

validate_fontset = ValidateInStrings('fontset', ['dejavusans', 'dejavuserif', 'cm', 'stix', 'stixsans', 'custom'])
validate_mathtext_default = ValidateInStrings('default', "rm cal it tt sf bf default bb frak circled scr regular".split())
validate_verbose = ValidateInStrings('verbose', ['silent', 'helpful', 'debug', 'debug-annoying'])
_validate_alignment = ValidateInStrings('alignment', ['center', 'top', 'bottom', 'baseline', 'center_baseline'])
def validate_whiskers(s):
    ...

def update_savefig_format(value):
    ...

validate_ps_papersize = ValidateInStrings('ps_papersize', ['auto', 'letter', 'legal', 'ledger', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'a10', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'b10'], ignorecase=True)
def validate_ps_distiller(s):
    ...

validate_joinstyle = ValidateInStrings('joinstyle', ['miter', 'round', 'bevel'], ignorecase=True)
validate_joinstylelist = _listify_validator(validate_joinstyle)
validate_capstyle = ValidateInStrings('capstyle', ['butt', 'round', 'projecting'], ignorecase=True)
validate_capstylelist = _listify_validator(validate_capstyle)
validate_fillstyle = ValidateInStrings('markers.fillstyle', ['full', 'left', 'right', 'bottom', 'top', 'none'])
validate_fillstylelist = _listify_validator(validate_fillstyle)
_validate_negative_linestyle = ValidateInStrings('negative_linestyle', ['solid', 'dashed'], ignorecase=True)
@deprecated('2.1', addendum=" See 'validate_negative_linestyle_legacy' " + "deprecation warning for more information.")
def validate_negative_linestyle(s):
    ...

@deprecated('2.1', addendum=" The 'contour.negative_linestyle' rcParam now " + "follows the same validation as the other rcParams " + "that are related to line style.")
def validate_negative_linestyle_legacy(s):
    ...

validate_legend_loc = ValidateInStrings('legend_loc', ['best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center'], ignorecase=True)
def validate_svg_fonttype(s):
    ...

def validate_hinting(s):
    ...

validate_pgf_texsystem = ValidateInStrings('pgf.texsystem', ['xelatex', 'lualatex', 'pdflatex'])
validate_movie_writer = ValidateInStrings('animation.writer', ['ffmpeg', 'ffmpeg_file', 'avconv', 'avconv_file', 'imagemagick', 'imagemagick_file', 'html'])
validate_movie_frame_fmt = ValidateInStrings('animation.frame_format', ['png', 'jpeg', 'tiff', 'raw', 'rgba'])
validate_axis_locator = ValidateInStrings('major', ['minor', 'both', 'major'])
validate_movie_html_fmt = ValidateInStrings('animation.html', ['html5', 'jshtml', 'none'])
def validate_bbox(s):
    ...

def validate_sketch(s):
    ...

class ValidateInterval(object):
    """
    Value must be in interval
    """
    def __init__(self, vmin, vmax, closedmin: bool = ..., closedmax: bool = ...):
        self.vmin = ...
        self.vmax = ...
        self.cmin = ...
        self.cmax = ...
    
    def __call__(self, s):
        ...
    


validate_grid_axis = ValidateInStrings('axes.grid.axis', ['x', 'y', 'both'])
def validate_hatch(s):
    """
    Validate a hatch pattern.
    A hatch pattern string can have any sequence of the following
    characters: ``\\ / | - + * . x o O``.

    """
    ...

validate_hatchlist = _listify_validator(validate_hatch)
validate_dashlist = _listify_validator(validate_nseq_float(allow_none=True))
_prop_validators = { 'color': _listify_validator(validate_color_for_prop_cycle, allow_stringlist=True),'linewidth': validate_floatlist,'linestyle': validate_stringlist,'facecolor': validate_colorlist,'edgecolor': validate_colorlist,'joinstyle': validate_joinstylelist,'capstyle': validate_capstylelist,'fillstyle': validate_fillstylelist,'markerfacecolor': validate_colorlist,'markersize': validate_floatlist,'markeredgewidth': validate_floatlist,'markeredgecolor': validate_colorlist,'alpha': validate_floatlist,'marker': validate_stringlist,'hatch': validate_hatchlist,'dashes': validate_dashlist }
_prop_aliases = { 'c': 'color','lw': 'linewidth','ls': 'linestyle','fc': 'facecolor','ec': 'edgecolor','mfc': 'markerfacecolor','mec': 'markeredgecolor','mew': 'markeredgewidth','ms': 'markersize' }
def cycler(*args, **kwargs):
    """
    Creates a `~cycler.Cycler` object much like :func:`cycler.cycler`,
    but includes input validation.

    Call signatures::

      cycler(cycler)
      cycler(label=values[, label2=values2[, ...]])
      cycler(label, values)

    Form 1 copies a given `~cycler.Cycler` object.

    Form 2 creates a `~cycler.Cycler` which cycles over one or more
    properties simultaneously. If multiple properties are given, their
    value lists must have the same length.

    Form 3 creates a `~cycler.Cycler` for a single property. This form
    exists for compatibility with the original cycler. Its use is
    discouraged in favor of the kwarg form, i.e. ``cycler(label=values)``.

    Parameters
    ----------
    cycler : Cycler
        Copy constructor for Cycler.

    label : str
        The property key. Must be a valid `.Artist` property.
        For example, 'color' or 'linestyle'. Aliases are allowed,
        such as 'c' for 'color' and 'lw' for 'linewidth'.

    values : iterable
        Finite-length iterable of the property values. These values
        are validated and will raise a ValueError if invalid.

    Returns
    -------
    cycler : Cycler
        A new :class:`~cycler.Cycler` for the given properties.

    Examples
    --------
    Creating a cycler for a single property:

    >>> c = cycler(color=['red', 'green', 'blue'])

    Creating a cycler for simultaneously cycling over multiple properties
    (e.g. red circle, green plus, blue cross):

    >>> c = cycler(color=['red', 'green', 'blue'],
    ...            marker=['o', '+', 'x'])

    """
    ...

def validate_cycler(s):
    'return a Cycler object from a string repr or the object itself'
    ...

def validate_hist_bins(s):
    ...

def validate_animation_writer_path(p):
    ...

def validate_webagg_address(s):
    ...

_validate_named_linestyle = ValidateInStrings('linestyle', list(six.iterkeys(ls_mapper)) + list(six.itervalues(ls_mapper)) + ['None', 'none', ' ', ''], ignorecase=True)
def _validate_linestyle(ls):
    """
    A validator for all possible line styles, the named ones *and*
    the on-off ink sequences.
    """
    ...

defaultParams = { 'backend': ['Agg', validate_backend],'backend_fallback': [True, validate_bool],'backend.qt4': [None, validate_qt4],'backend.qt5': [None, validate_qt5],'webagg.port': [8988, validate_int],'webagg.address': ['127.0.0.1', validate_webagg_address],'webagg.open_in_browser': [True, validate_bool],'webagg.port_retries': [50, validate_int],'nbagg.transparent': [True, validate_bool],'toolbar': ['toolbar2', validate_toolbar],'datapath': [None, validate_path_exists],'interactive': [False, validate_bool],'timezone': ['UTC', validate_string],'verbose.level': ['silent', validate_verbose],'verbose.fileo': ['sys.stdout', validate_string],'lines.linewidth': [1.5, validate_float],'lines.linestyle': ['-', _validate_linestyle],'lines.color': ['C0', validate_color],'lines.marker': ['None', validate_string],'lines.markeredgewidth': [1, validate_float],'lines.markersize': [6, validate_float],'lines.antialiased': [True, validate_bool],'lines.dash_joinstyle': ['round', validate_joinstyle],'lines.solid_joinstyle': ['round', validate_joinstyle],'lines.dash_capstyle': ['butt', validate_capstyle],'lines.solid_capstyle': ['projecting', validate_capstyle],'lines.dashed_pattern': [[3.7, 1.6], validate_nseq_float(allow_none=True)],'lines.dashdot_pattern': [[6.4, 1.6, 1, 1.6], validate_nseq_float(allow_none=True)],'lines.dotted_pattern': [[1, 1.65], validate_nseq_float(allow_none=True)],'lines.scale_dashes': [True, validate_bool],'markers.fillstyle': ['full', validate_fillstyle],'patch.linewidth': [1, validate_float],'patch.edgecolor': ['k', validate_color],'patch.force_edgecolor': [False, validate_bool],'patch.facecolor': ['C0', validate_color],'patch.antialiased': [True, validate_bool],'hatch.color': ['k', validate_color],'hatch.linewidth': [1, validate_float],'hist.bins': [10, validate_hist_bins],'boxplot.notch': [False, validate_bool],'boxplot.vertical': [True, validate_bool],'boxplot.whiskers': [1.5, validate_whiskers],'boxplot.bootstrap': [None, validate_int_or_None],'boxplot.patchartist': [False, validate_bool],'boxplot.showmeans': [False, validate_bool],'boxplot.showcaps': [True, validate_bool],'boxplot.showbox': [True, validate_bool],'boxplot.showfliers': [True, validate_bool],'boxplot.meanline': [False, validate_bool],'boxplot.flierprops.color': ['k', validate_color],'boxplot.flierprops.marker': ['o', validate_string],'boxplot.flierprops.markerfacecolor': ['none', validate_color_or_auto],'boxplot.flierprops.markeredgecolor': ['k', validate_color],'boxplot.flierprops.markersize': [6, validate_float],'boxplot.flierprops.linestyle': ['none', _validate_linestyle],'boxplot.flierprops.linewidth': [1, validate_float],'boxplot.boxprops.color': ['k', validate_color],'boxplot.boxprops.linewidth': [1, validate_float],'boxplot.boxprops.linestyle': ['-', _validate_linestyle],'boxplot.whiskerprops.color': ['k', validate_color],'boxplot.whiskerprops.linewidth': [1, validate_float],'boxplot.whiskerprops.linestyle': ['-', _validate_linestyle],'boxplot.capprops.color': ['k', validate_color],'boxplot.capprops.linewidth': [1, validate_float],'boxplot.capprops.linestyle': ['-', _validate_linestyle],'boxplot.medianprops.color': ['C1', validate_color],'boxplot.medianprops.linewidth': [1, validate_float],'boxplot.medianprops.linestyle': ['-', _validate_linestyle],'boxplot.meanprops.color': ['C2', validate_color],'boxplot.meanprops.marker': ['^', validate_string],'boxplot.meanprops.markerfacecolor': ['C2', validate_color],'boxplot.meanprops.markeredgecolor': ['C2', validate_color],'boxplot.meanprops.markersize': [6, validate_float],'boxplot.meanprops.linestyle': ['--', _validate_linestyle],'boxplot.meanprops.linewidth': [1, validate_float],'font.family': [['sans-serif'], validate_stringlist],'font.style': ['normal', validate_string],'font.variant': ['normal', validate_string],'font.stretch': ['normal', validate_string],'font.weight': ['normal', validate_string],'font.size': [10, validate_float],'font.serif': [['DejaVu Serif', 'Bitstream Vera Serif', 'Computer Modern Roman', 'New Century Schoolbook', 'Century Schoolbook L', 'Utopia', 'ITC Bookman', 'Bookman', 'Nimbus Roman No9 L', 'Times New Roman', 'Times', 'Palatino', 'Charter', 'serif'], validate_stringlist],'font.sans-serif': [['DejaVu Sans', 'Bitstream Vera Sans', 'Computer Modern Sans Serif', 'Lucida Grande', 'Verdana', 'Geneva', 'Lucid', 'Arial', 'Helvetica', 'Avant Garde', 'sans-serif'], validate_stringlist],'font.cursive': [['Apple Chancery', 'Textile', 'Zapf Chancery', 'Sand', 'Script MT', 'Felipa', 'cursive'], validate_stringlist],'font.fantasy': [['Comic Sans MS', 'Chicago', 'Charcoal', 'Impact' 'Western', 'Humor Sans', 'xkcd', 'fantasy'], validate_stringlist],'font.monospace': [['DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Computer Modern Typewriter', 'Andale Mono', 'Nimbus Mono L', 'Courier New', 'Courier', 'Fixed', 'Terminal', 'monospace'], validate_stringlist],'text.color': ['k', validate_color],'text.usetex': [False, validate_bool],'text.latex.unicode': [False, validate_bool],'text.latex.preamble': [[''], validate_stringlist],'text.latex.preview': [False, validate_bool],'text.dvipnghack': [None, validate_bool_maybe_none],'text.hinting': ['auto', validate_hinting],'text.hinting_factor': [8, validate_int],'text.antialiased': [True, validate_bool],'mathtext.cal': ['cursive', validate_font_properties],'mathtext.rm': ['sans', validate_font_properties],'mathtext.tt': ['monospace', validate_font_properties],'mathtext.it': ['sans:italic', validate_font_properties],'mathtext.bf': ['sans:bold', validate_font_properties],'mathtext.sf': ['sans', validate_font_properties],'mathtext.fontset': ['dejavusans', validate_fontset],'mathtext.default': ['it', validate_mathtext_default],'mathtext.fallback_to_cm': [True, validate_bool],'image.aspect': ['equal', validate_aspect],'image.interpolation': ['nearest', validate_string],'image.cmap': ['viridis', validate_string],'image.lut': [256, validate_int],'image.origin': ['upper', validate_string],'image.resample': [True, validate_bool],'image.composite_image': [True, validate_bool],'contour.negative_linestyle': ['dashed', _validate_linestyle],'contour.corner_mask': [True, validate_bool],'errorbar.capsize': [0, validate_float],'axes.axisbelow': ['line', validate_axisbelow],'axes.hold': [None, deprecate_axes_hold],'axes.facecolor': ['w', validate_color],'axes.edgecolor': ['k', validate_color],'axes.linewidth': [0.8, validate_float],'axes.spines.left': [True, validate_bool],'axes.spines.right': [True, validate_bool],'axes.spines.bottom': [True, validate_bool],'axes.spines.top': [True, validate_bool],'axes.titlesize': ['large', validate_fontsize],'axes.titleweight': ['normal', validate_string],'axes.titlepad': [6, validate_float],'axes.grid': [False, validate_bool],'axes.grid.which': ['major', validate_axis_locator],'axes.grid.axis': ['both', validate_grid_axis],'axes.labelsize': ['medium', validate_fontsize],'axes.labelpad': [4, validate_float],'axes.labelweight': ['normal', validate_string],'axes.labelcolor': ['k', validate_color],'axes.formatter.limits': [[- 7, 7], validate_nseq_int(2)],'axes.formatter.use_locale': [False, validate_bool],'axes.formatter.use_mathtext': [False, validate_bool],'axes.formatter.min_exponent': [0, validate_int],'axes.formatter.useoffset': [True, validate_bool],'axes.formatter.offset_threshold': [4, validate_int],'axes.unicode_minus': [True, validate_bool],'axes.prop_cycle': [ccycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']), validate_cycler],'axes.autolimit_mode': ['data', ValidateInStrings('autolimit_mode', ['data', 'round_numbers'])],'axes.xmargin': [0.05, ValidateInterval(0, 1, closedmin=True, closedmax=True)],'axes.ymargin': [0.05, ValidateInterval(0, 1, closedmin=True, closedmax=True)],'polaraxes.grid': [True, validate_bool],'axes3d.grid': [True, validate_bool],'scatter.marker': ['o', validate_string],'date.autoformatter.year': ['%Y', validate_string],'date.autoformatter.month': ['%Y-%m', validate_string],'date.autoformatter.day': ['%Y-%m-%d', validate_string],'date.autoformatter.hour': ['%m-%d %H', validate_string],'date.autoformatter.minute': ['%d %H:%M', validate_string],'date.autoformatter.second': ['%H:%M:%S', validate_string],'date.autoformatter.microsecond': ['%M:%S.%f', validate_string],'legend.fancybox': [True, validate_bool],'legend.loc': ['best', validate_legend_loc],'legend.numpoints': [1, validate_int],'legend.scatterpoints': [1, validate_int],'legend.fontsize': ['medium', validate_fontsize],'legend.markerscale': [1, validate_float],'legend.shadow': [False, validate_bool],'legend.frameon': [True, validate_bool],'legend.framealpha': [0.8, validate_float_or_None],'legend.borderpad': [0.4, validate_float],'legend.labelspacing': [0.5, validate_float],'legend.handlelength': [2, validate_float],'legend.handleheight': [0.7, validate_float],'legend.handletextpad': [0.8, validate_float],'legend.borderaxespad': [0.5, validate_float],'legend.columnspacing': [2, validate_float],'legend.facecolor': ['inherit', validate_color_or_inherit],'legend.edgecolor': ['0.8', validate_color_or_inherit],'xtick.top': [False, validate_bool],'xtick.bottom': [True, validate_bool],'xtick.labeltop': [False, validate_bool],'xtick.labelbottom': [True, validate_bool],'xtick.major.size': [3.5, validate_float],'xtick.minor.size': [2, validate_float],'xtick.major.width': [0.8, validate_float],'xtick.minor.width': [0.6, validate_float],'xtick.major.pad': [3.5, validate_float],'xtick.minor.pad': [3.4, validate_float],'xtick.color': ['k', validate_color],'xtick.minor.visible': [False, validate_bool],'xtick.minor.top': [True, validate_bool],'xtick.minor.bottom': [True, validate_bool],'xtick.major.top': [True, validate_bool],'xtick.major.bottom': [True, validate_bool],'xtick.labelsize': ['medium', validate_fontsize],'xtick.direction': ['out', validate_string],'xtick.alignment': ["center", _validate_alignment],'ytick.left': [True, validate_bool],'ytick.right': [False, validate_bool],'ytick.labelleft': [True, validate_bool],'ytick.labelright': [False, validate_bool],'ytick.major.size': [3.5, validate_float],'ytick.minor.size': [2, validate_float],'ytick.major.width': [0.8, validate_float],'ytick.minor.width': [0.6, validate_float],'ytick.major.pad': [3.5, validate_float],'ytick.minor.pad': [3.4, validate_float],'ytick.color': ['k', validate_color],'ytick.minor.visible': [False, validate_bool],'ytick.minor.left': [True, validate_bool],'ytick.minor.right': [True, validate_bool],'ytick.major.left': [True, validate_bool],'ytick.major.right': [True, validate_bool],'ytick.labelsize': ['medium', validate_fontsize],'ytick.direction': ['out', validate_string],'ytick.alignment': ["center_baseline", _validate_alignment],'grid.color': ['#b0b0b0', validate_color],'grid.linestyle': ['-', _validate_linestyle],'grid.linewidth': [0.8, validate_float],'grid.alpha': [1, validate_float],'figure.titlesize': ['large', validate_fontsize],'figure.titleweight': ['normal', validate_string],'figure.figsize': [[6.4, 4.8], validate_nseq_float(2)],'figure.dpi': [100, validate_float],'figure.facecolor': ['w', validate_color],'figure.edgecolor': ['w', validate_color],'figure.frameon': [True, validate_bool],'figure.autolayout': [False, validate_bool],'figure.max_open_warning': [20, validate_int],'figure.subplot.left': [0.125, ValidateInterval(0, 1, closedmin=True, closedmax=True)],'figure.subplot.right': [0.9, ValidateInterval(0, 1, closedmin=True, closedmax=True)],'figure.subplot.bottom': [0.11, ValidateInterval(0, 1, closedmin=True, closedmax=True)],'figure.subplot.top': [0.88, ValidateInterval(0, 1, closedmin=True, closedmax=True)],'figure.subplot.wspace': [0.2, ValidateInterval(0, 1, closedmin=True, closedmax=False)],'figure.subplot.hspace': [0.2, ValidateInterval(0, 1, closedmin=True, closedmax=False)],'figure.constrained_layout.use': [False, validate_bool],'figure.constrained_layout.hspace': [0.02, ValidateInterval(0, 1, closedmin=True, closedmax=False)],'figure.constrained_layout.wspace': [0.02, ValidateInterval(0, 1, closedmin=True, closedmax=False)],'figure.constrained_layout.h_pad': [0.04167, validate_float],'figure.constrained_layout.w_pad': [0.04167, validate_float],'savefig.dpi': ['figure', validate_dpi],'savefig.facecolor': ['w', validate_color],'savefig.edgecolor': ['w', validate_color],'savefig.frameon': [True, validate_bool],'savefig.orientation': ['portrait', validate_orientation],'savefig.jpeg_quality': [95, validate_int],'savefig.format': ['png', update_savefig_format],'savefig.bbox': ['standard', validate_bbox],'savefig.pad_inches': [0.1, validate_float],'savefig.directory': ['~', validate_string],'savefig.transparent': [False, validate_bool],'tk.window_focus': [False, validate_bool],'ps.papersize': ['letter', validate_ps_papersize],'ps.useafm': [False, validate_bool],'ps.usedistiller': [False, validate_ps_distiller],'ps.distiller.res': [6000, validate_int],'ps.fonttype': [3, validate_fonttype],'pdf.compression': [6, validate_int],'pdf.inheritcolor': [False, validate_bool],'pdf.use14corefonts': [False, validate_bool],'pdf.fonttype': [3, validate_fonttype],'pgf.debug': [False, validate_bool],'pgf.texsystem': ['xelatex', validate_pgf_texsystem],'pgf.rcfonts': [True, validate_bool],'pgf.preamble': [[''], validate_stringlist],'svg.image_inline': [True, validate_bool],'svg.fonttype': ['path', validate_svg_fonttype],'svg.hashsalt': [None, validate_string_or_None],'docstring.hardcopy': [False, validate_bool],'plugins.directory': ['.matplotlib_plugins', validate_string],'path.simplify': [True, validate_bool],'path.simplify_threshold': [1 / 9, ValidateInterval(0, 1)],'path.snap': [True, validate_bool],'path.sketch': [None, validate_sketch],'path.effects': [[], validate_any],'agg.path.chunksize': [0, validate_int],'keymap.fullscreen': [('f', 'ctrl+f'), validate_stringlist],'keymap.home': [['h', 'r', 'home'], validate_stringlist],'keymap.back': [['left', 'c', 'backspace'], validate_stringlist],'keymap.forward': [['right', 'v'], validate_stringlist],'keymap.pan': [['p'], validate_stringlist],'keymap.zoom': [['o'], validate_stringlist],'keymap.save': [['s', 'ctrl+s'], validate_stringlist],'keymap.quit': [['ctrl+w', 'cmd+w', 'q'], validate_stringlist],'keymap.quit_all': [['W', 'cmd+W', 'Q'], validate_stringlist],'keymap.grid': [['g'], validate_stringlist],'keymap.grid_minor': [['G'], validate_stringlist],'keymap.yscale': [['l'], validate_stringlist],'keymap.xscale': [['k', 'L'], validate_stringlist],'keymap.all_axes': [['a'], validate_stringlist],'examples.directory': ['', validate_string],'animation.html': ['none', validate_movie_html_fmt],'animation.embed_limit': [20, validate_float],'animation.writer': ['ffmpeg', validate_movie_writer],'animation.codec': ['h264', validate_string],'animation.bitrate': [- 1, validate_int],'animation.frame_format': ['png', validate_movie_frame_fmt],'animation.html_args': [[], validate_stringlist],'animation.ffmpeg_path': ['ffmpeg', validate_animation_writer_path],'animation.ffmpeg_args': [[], validate_stringlist],'animation.avconv_path': ['avconv', validate_animation_writer_path],'animation.avconv_args': [[], validate_stringlist],'animation.convert_path': ['convert', validate_animation_writer_path],'animation.convert_args': [[], validate_stringlist],'_internal.classic_mode': [False, validate_bool] }
if __name__ == '__main__':
    rc = defaultParams
