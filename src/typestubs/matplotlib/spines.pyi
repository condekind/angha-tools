"""
This type stub file was generated by pyright.
"""

import matplotlib
import matplotlib.patches as mpatches
from matplotlib.artist import allow_rasterization
from matplotlib import docstring

rcParams = matplotlib.rcParams
class Spine(mpatches.Patch):
    """an axis spine -- the line noting the data area boundaries

    Spines are the lines connecting the axis tick marks and noting the
    boundaries of the data area. They can be placed at arbitrary
    positions. See function:`~matplotlib.spines.Spine.set_position`
    for more information.

    The default position is ``('outward',0)``.

    Spines are subclasses of class:`~matplotlib.patches.Patch`, and
    inherit much of their behavior.

    Spines draw a line, a circle, or an arc depending if
    function:`~matplotlib.spines.Spine.set_patch_line`,
    function:`~matplotlib.spines.Spine.set_patch_circle`, or
    function:`~matplotlib.spines.Spine.set_patch_arc` has been called.
    Line-like is the default.

    """
    def __str__(self):
        ...
    
    @docstring.dedent_interpd
    def __init__(self, axes, spine_type, path, **kwargs):
        """
        - *axes* : the Axes instance containing the spine
        - *spine_type* : a string specifying the spine type
        - *path* : the path instance used to draw the spine

        Valid kwargs are:
        %(Patch)s
        """
        self.axes = ...
        self.spine_type = ...
        self.axis = ...
    
    def set_smart_bounds(self, value):
        """set the spine and associated axis to have smart bounds"""
        self.stale = ...
    
    def get_smart_bounds(self):
        """get whether the spine has smart bounds"""
        ...
    
    def set_patch_arc(self, center, radius, theta1, theta2):
        """set the spine to be arc-like"""
        self.stale = ...
    
    def set_patch_circle(self, center, radius):
        """set the spine to be circular"""
        self.stale = ...
    
    def set_patch_line(self):
        """set the spine to be linear"""
        self.stale = ...
    
    def _recompute_transform(self):
        """NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 makes it very important to call the accessor method and
                 not directly access the transformation member variable.
        """
        ...
    
    def get_patch_transform(self):
        ...
    
    def get_path(self):
        ...
    
    def _ensure_position_is_set(self):
        ...
    
    def register_axis(self, axis):
        """register an axis

        An axis should be registered with its corresponding spine from
        the Axes instance. This allows the spine to clear any axis
        properties when needed.
        """
        self.axis = ...
        self.stale = ...
    
    def cla(self):
        """Clear the current spine"""
        ...
    
    def is_frame_like(self):
        """return True if directly on axes frame

        This is useful for determining if a spine is the edge of an
        old style MPL plot. If so, this function will return True.
        """
        ...
    
    def _adjust_location(self):
        """automatically set spine bounds to the view interval"""
        ...
    
    @allow_rasterization
    def draw(self, renderer):
        self.stale = ...
    
    def _calc_offset_transform(self):
        """calculate the offset transform performed by the spine"""
        ...
    
    def set_position(self, position):
        """set the position of the spine

        Spine position is specified by a 2 tuple of (position type,
        amount). The position types are:

        * 'outward' : place the spine out from the data area by the
          specified number of points. (Negative values specify placing the
          spine inward.)

        * 'axes' : place the spine at the specified Axes coordinate (from
          0.0-1.0).

        * 'data' : place the spine at the specified data coordinate.

        Additionally, shorthand notations define a special positions:

        * 'center' -> ('axes',0.5)
        * 'zero' -> ('data', 0.0)

        """
        self.stale = ...
    
    def get_position(self):
        """get the spine position"""
        ...
    
    def get_spine_transform(self):
        """get the spine transform"""
        ...
    
    def set_bounds(self, low, high):
        """Set the bounds of the spine."""
        self.stale = ...
    
    def get_bounds(self):
        """Get the bounds of the spine."""
        ...
    
    @classmethod
    def linear_spine(cls, axes, spine_type, **kwargs):
        """
        (staticmethod) Returns a linear :class:`Spine`.
        """
        ...
    
    @classmethod
    def arc_spine(cls, axes, spine_type, center, radius, theta1, theta2, **kwargs):
        """
        (classmethod) Returns an arc :class:`Spine`.
        """
        ...
    
    @classmethod
    def circular_spine(cls, axes, center, radius, **kwargs):
        """
        (staticmethod) Returns a circular :class:`Spine`.
        """
        ...
    
    def set_color(self, c):
        """
        Set the edgecolor.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        """
        self.stale = ...
    


