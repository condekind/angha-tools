"""
This type stub file was generated by pyright.
"""

import logging
import matplotlib.artist as artist
import matplotlib.cbook as cbook
import matplotlib.lines as mlines
from matplotlib.artist import allow_rasterization
from typing import Any, Optional

"""
Classes for the ticks and x and y axis
"""
_log = logging.getLogger(__name__)
GRIDLINE_INTERPOLATION_STEPS = 180
_line_AI = artist.ArtistInspector(mlines.Line2D)
_line_param_names = _line_AI.get_setters()
_line_param_aliases = [list(d.keys())[0] for d in _line_AI.aliasd.values()]
_gridline_param_names = ['grid_' + name for name in _line_param_names + _line_param_aliases]
class Tick(artist.Artist):
    """
    Abstract base class for the axis ticks, grid lines and labels

    1 refers to the bottom of the plot for xticks and the left for yticks
    2 refers to the top of the plot for xticks and the right for yticks

    Attributes
    ----------
    tick1line : Line2D

    tick2line : Line2D

    gridline : Line2D

    label1 : Text

    label2 : Text

    gridOn : bool
        Determines whether to draw the tickline.

    tick1On : bool
        Determines whether to draw the first tickline.

    tick2On : bool
        Determines whether to draw the second tickline.

    label1On : bool
        Determines whether to draw the first tick label.

    label2On : bool
        Determines whether to draw the second tick label.
    """
    def __init__(self, axes, loc, label, size: Optional[Any] = ..., width: Optional[Any] = ..., color: Optional[Any] = ..., tickdir: Optional[Any] = ..., pad: Optional[Any] = ..., labelsize: Optional[Any] = ..., labelcolor: Optional[Any] = ..., zorder: Optional[Any] = ..., gridOn: Optional[Any] = ..., tick1On: bool = ..., tick2On: bool = ..., label1On: bool = ..., label2On: bool = ..., major: bool = ..., labelrotation=..., grid_color: Optional[Any] = ..., grid_linestyle: Optional[Any] = ..., grid_linewidth: Optional[Any] = ..., grid_alpha: Optional[Any] = ..., **kw):
        """
        bbox is the Bound2D bounding box in display coords of the Axes
        loc is the tick location in data coords
        size is the tick size in points
        """
        self.axes = ...
        self.tick1line = ...
        self.tick2line = ...
        self.gridline = ...
        self.label1 = ...
        self.label = ...
        self.label2 = ...
        self.gridOn = ...
        self.tick1On = ...
        self.tick2On = ...
        self.label1On = ...
        self.label2On = ...
    
    def _set_labelrotation(self, labelrotation):
        ...
    
    def apply_tickdir(self, tickdir):
        """
        Calculate self._pad and self._tickmarkers
        """
        ...
    
    def get_tickdir(self):
        ...
    
    def get_tick_padding(self):
        """
        Get the length of the tick outside of the axes.
        """
        ...
    
    def get_children(self):
        ...
    
    def set_clip_path(self, clippath, transform: Optional[Any] = ...):
        self.stale = ...
    
    def get_pad_pixels(self):
        ...
    
    def contains(self, mouseevent):
        """
        Test whether the mouse event occurred in the Tick marks.

        This function always returns false.  It is more useful to test if the
        axis as a whole contains the mouse rather than the set of tick marks.
        """
        ...
    
    def set_pad(self, val):
        """
        Set the tick label pad in points

        ACCEPTS: float
        """
        self.stale = ...
    
    def get_pad(self):
        'Get the value of the tick label pad in points'
        ...
    
    def _get_text1(self):
        'Get the default Text 1 instance'
        ...
    
    def _get_text2(self):
        'Get the default Text 2 instance'
        ...
    
    def _get_tick1line(self):
        'Get the default line2D instance for tick1'
        ...
    
    def _get_tick2line(self):
        'Get the default line2D instance for tick2'
        ...
    
    def _get_gridline(self):
        'Get the default grid Line2d instance for this tick'
        ...
    
    def get_loc(self):
        'Return the tick location (data coords) as a scalar'
        ...
    
    @allow_rasterization
    def draw(self, renderer):
        self.stale = ...
    
    def set_label1(self, s):
        """
        Set the text of ticklabel

        ACCEPTS: str
        """
        self.stale = ...
    
    set_label = ...
    def set_label2(self, s):
        """
        Set the text of ticklabel2

        ACCEPTS: str
        """
        self.stale = ...
    
    def _set_artist_props(self, a):
        ...
    
    def get_view_interval(self):
        'return the view Interval instance for the axis this tick is ticking'
        ...
    
    def _apply_params(self, **kw):
        ...
    
    def update_position(self, loc):
        'Set the location of tick in data coords with scalar *loc*'
        ...
    
    def _get_text1_transform(self):
        ...
    
    def _get_text2_transform(self):
        ...
    


class XTick(Tick):
    """
    Contains all the Artists needed to make an x tick - the tick line,
    the label text and the grid line
    """
    __name__ = ...
    def _get_text1_transform(self):
        ...
    
    def _get_text2_transform(self):
        ...
    
    def apply_tickdir(self, tickdir):
        self.stale = ...
    
    def _get_text1(self):
        'Get the default Text instance'
        ...
    
    def _get_text2(self):
        'Get the default Text 2 instance'
        ...
    
    def _get_tick1line(self):
        'Get the default line2D instance'
        ...
    
    def _get_tick2line(self):
        'Get the default line2D instance'
        ...
    
    def _get_gridline(self):
        'Get the default line2D instance'
        ...
    
    def update_position(self, loc):
        'Set the location of tick in data coords with scalar *loc*'
        self.stale = ...
    
    def get_view_interval(self):
        'return the Interval instance for this axis view limits'
        ...
    


class YTick(Tick):
    """
    Contains all the Artists needed to make a Y tick - the tick line,
    the label text and the grid line
    """
    __name__ = ...
    def _get_text1_transform(self):
        ...
    
    def _get_text2_transform(self):
        ...
    
    def apply_tickdir(self, tickdir):
        self.stale = ...
    
    def _get_text1(self):
        'Get the default Text instance'
        ...
    
    def _get_text2(self):
        'Get the default Text instance'
        ...
    
    def _get_tick1line(self):
        'Get the default line2D instance'
        ...
    
    def _get_tick2line(self):
        'Get the default line2D instance'
        ...
    
    def _get_gridline(self):
        'Get the default line2D instance'
        ...
    
    def update_position(self, loc):
        'Set the location of tick in data coords with scalar *loc*'
        self.stale = ...
    
    def get_view_interval(self):
        'return the Interval instance for this axis view limits'
        ...
    


class Ticker(object):
    locator = ...
    formatter = ...


class _LazyTickList(object):
    """
    A descriptor for lazy instantiation of tick lists.

    See comment above definition of the ``majorTicks`` and ``minorTicks``
    attributes.
    """
    def __init__(self, major):
        ...
    
    def __get__(self, instance, cls):
        ...
    


class Axis(artist.Artist):
    """
    Public attributes

    * :attr:`axes.transData` - transform data coords to display coords
    * :attr:`axes.transAxes` - transform axis coords to display coords
    * :attr:`labelpad` - number of points between the axis and its label
    """
    OFFSETTEXTPAD = ...
    def __str__(self):
        ...
    
    def __init__(self, axes, pickradius=...):
        """
        Init the axis with the parent Axes instance
        """
        self.isDefault_label = ...
        self.axes = ...
        self.major = ...
        self.minor = ...
        self.callbacks = ...
        self.label = ...
        self.labelpad = ...
        self.offsetText = ...
        self.pickradius = ...
    
    majorTicks = ...
    minorTicks = ...
    def set_label_coords(self, x, y, transform: Optional[Any] = ...):
        """
        Set the coordinates of the label.  By default, the x
        coordinate of the y label is determined by the tick label
        bounding boxes, but this can lead to poor alignment of
        multiple ylabels if there are multiple axes.  Ditto for the y
        coordinate of the x label.

        You can also specify the coordinate system of the label with
        the transform.  If None, the default coordinate system will be
        the axes coordinate system (0,0) is (left,bottom), (0.5, 0.5)
        is middle, etc

        """
        self.stale = ...
    
    def get_transform(self):
        ...
    
    def get_scale(self):
        ...
    
    def _set_scale(self, value, **kwargs):
        self.isDefault_majloc = ...
        self.isDefault_minloc = ...
        self.isDefault_majfmt = ...
        self.isDefault_minfmt = ...
    
    def limit_range_for_scale(self, vmin, vmax):
        ...
    
    @property
    @cbook.deprecated("2.2.0")
    def unit_data(self):
        ...
    
    @unit_data.setter
    @cbook.deprecated("2.2.0")
    def unit_data(self, unit_data):
        ...
    
    def get_children(self):
        ...
    
    def cla(self):
        'clear the current axis'
        self.callbacks = ...
        self.converter = ...
        self.units = ...
        self.stale = ...
    
    def reset_ticks(self):
        """
        Re-initialize the major and minor Tick lists.

        Each list starts with a single fresh Tick.
        """
        ...
    
    def set_tick_params(self, which=..., reset: bool = ..., **kw):
        """
        Set appearance parameters for ticks, ticklabels, and gridlines.

        For documentation of keyword arguments, see
        :meth:`matplotlib.axes.Axes.tick_params`.
        """
        self.stale = ...
    
    @staticmethod
    def _translate_tick_kw(kw, to_init_kw: bool = ...):
        ...
    
    def set_clip_path(self, clippath, transform: Optional[Any] = ...):
        self.stale = ...
    
    def get_view_interval(self):
        'return the Interval instance for this axis view limits'
        ...
    
    def set_view_interval(self, vmin, vmax, ignore: bool = ...):
        ...
    
    def get_data_interval(self):
        'return the Interval instance for this axis data limits'
        ...
    
    def set_data_interval(self):
        '''set the axis data limits'''
        ...
    
    def set_default_intervals(self):
        '''set the default limits for the axis data and view interval if they
        are not mutated'''
        ...
    
    def _set_artist_props(self, a):
        ...
    
    def iter_ticks(self):
        """
        Iterate through all of the major and minor ticks.
        """
        ...
    
    def get_ticklabel_extents(self, renderer):
        """
        Get the extents of the tick labels on either side
        of the axes.
        """
        ...
    
    def set_smart_bounds(self, value):
        """set the axis to have smart bounds"""
        self.stale = ...
    
    def get_smart_bounds(self):
        """get whether the axis has smart bounds"""
        ...
    
    def _update_ticks(self, renderer):
        """
        Update ticks (position and labels) using the current data
        interval of the axes. Returns a list of ticks that will be
        drawn.
        """
        ...
    
    def _get_tick_bboxes(self, ticks, renderer):
        """
        Given the list of ticks, return two lists of bboxes. One for
        tick lable1's and another for tick label2's.
        """
        ...
    
    def get_tightbbox(self, renderer):
        """
        Return a bounding box that encloses the axis. It only accounts
        tick labels, axis label, and offsetText.
        """
        ...
    
    def get_tick_padding(self):
        ...
    
    @allow_rasterization
    def draw(self, renderer, *args, **kwargs):
        'Draw the axis lines, grid lines, tick lines and labels'
        self.stale = ...
    
    def _get_label(self):
        ...
    
    def _get_offset_text(self):
        ...
    
    def get_gridlines(self):
        'Return the grid lines as a list of Line2D instance'
        ...
    
    def get_label(self):
        'Return the axis label as a Text instance'
        ...
    
    def get_offset_text(self):
        'Return the axis offsetText as a Text instance'
        ...
    
    def get_pickradius(self):
        'Return the depth of the axis used by the picker'
        ...
    
    def get_majorticklabels(self):
        'Return a list of Text instances for the major ticklabels'
        ...
    
    def get_minorticklabels(self):
        'Return a list of Text instances for the minor ticklabels'
        ...
    
    def get_ticklabels(self, minor: bool = ..., which: Optional[Any] = ...):
        """
        Get the tick labels as a list of :class:`~matplotlib.text.Text`
        instances.

        Parameters
        ----------
        minor : bool
           If True return the minor ticklabels,
           else return the major ticklabels

        which : None, ('minor', 'major', 'both')
           Overrides `minor`.

           Selects which ticklabels to return

        Returns
        -------
        ret : list
           List of :class:`~matplotlib.text.Text` instances.
        """
        ...
    
    def get_majorticklines(self):
        'Return the major tick lines as a list of Line2D instances'
        ...
    
    def get_minorticklines(self):
        'Return the minor tick lines as a list of Line2D instances'
        ...
    
    def get_ticklines(self, minor: bool = ...):
        'Return the tick lines as a list of Line2D instances'
        ...
    
    def get_majorticklocs(self):
        "Get the major tick locations in data coordinates as a numpy array"
        ...
    
    def get_minorticklocs(self):
        "Get the minor tick locations in data coordinates as a numpy array"
        ...
    
    def get_ticklocs(self, minor: bool = ...):
        "Get the tick locations in data coordinates as a numpy array"
        ...
    
    def get_ticks_direction(self, minor: bool = ...):
        """
        Get the tick directions as a numpy array

        Parameters
        ----------
        minor : boolean
            True to return the minor tick directions,
            False to return the major tick directions,
            Default is False

        Returns
        -------
        numpy array of tick directions
        """
        ...
    
    def _get_tick(self, major):
        'return the default tick instance'
        ...
    
    def _copy_tick_props(self, src, dest):
        'Copy the props from src tick to dest tick'
        ...
    
    def get_label_text(self):
        'Get the text of the label'
        ...
    
    def get_major_locator(self):
        'Get the locator of the major ticker'
        ...
    
    def get_minor_locator(self):
        'Get the locator of the minor ticker'
        ...
    
    def get_major_formatter(self):
        'Get the formatter of the major ticker'
        ...
    
    def get_minor_formatter(self):
        'Get the formatter of the minor ticker'
        ...
    
    def get_major_ticks(self, numticks: Optional[Any] = ...):
        'get the tick instances; grow as necessary'
        ...
    
    def get_minor_ticks(self, numticks: Optional[Any] = ...):
        'get the minor tick instances; grow as necessary'
        ...
    
    def grid(self, b: Optional[Any] = ..., which=..., **kwargs):
        """
        Set the axis grid on or off; b is a boolean. Use *which* =
        'major' | 'minor' | 'both' to set the grid for major or minor ticks.

        If *b* is *None* and len(kwargs)==0, toggle the grid state.  If
        *kwargs* are supplied, it is assumed you want the grid on and *b*
        will be set to True.

        *kwargs* are used to set the line properties of the grids, e.g.,

          xax.grid(color='r', linestyle='-', linewidth=2)
        """
        self.stale = ...
    
    def update_units(self, data):
        """
        introspect *data* for units converter and update the
        axis.converter instance if necessary. Return *True*
        if *data* is registered for unit conversion.
        """
        self.converter = ...
        self.stale = ...
    
    def _update_axisinfo(self):
        """
        check the axis converter for the stored units to see if the
        axis info needs to be updated
        """
        ...
    
    def have_units(self):
        ...
    
    def convert_units(self, x):
        ...
    
    def set_units(self, u):
        """
        set the units for axis

        ACCEPTS: a units tag
        """
        self.stale = ...
    
    def get_units(self):
        'return the units for axis'
        ...
    
    def set_label_text(self, label, fontdict: Optional[Any] = ..., **kwargs):
        """  Sets the text value of the axis label

        ACCEPTS: A string value for the label
        """
        self.isDefault_label = ...
        self.stale = ...
    
    def set_major_formatter(self, formatter):
        """
        Set the formatter of the major ticker

        ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance
        """
        self.isDefault_majfmt = ...
        self.stale = ...
    
    def set_minor_formatter(self, formatter):
        """
        Set the formatter of the minor ticker

        ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance
        """
        self.isDefault_minfmt = ...
        self.stale = ...
    
    def set_major_locator(self, locator):
        """
        Set the locator of the major ticker

        ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance
        """
        self.isDefault_majloc = ...
        self.stale = ...
    
    def set_minor_locator(self, locator):
        """
        Set the locator of the minor ticker

        ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance
        """
        self.isDefault_minloc = ...
        self.stale = ...
    
    def set_pickradius(self, pickradius):
        """
        Set the depth of the axis used by the picker

        ACCEPTS: a distance in points
        """
        self.pickradius = ...
    
    def set_ticklabels(self, ticklabels, *args, **kwargs):
        """
        Set the text values of the tick labels. Return a list of Text
        instances.  Use *kwarg* *minor=True* to select minor ticks.
        All other kwargs are used to update the text object properties.
        As for get_ticklabels, label1 (left or bottom) is
        affected for a given tick only if its label1On attribute
        is True, and similarly for label2.  The list of returned
        label text objects consists of all such label1 objects followed
        by all such label2 objects.

        The input *ticklabels* is assumed to match the set of
        tick locations, regardless of the state of label1On and
        label2On.

        ACCEPTS: sequence of strings or Text objects
        """
        self.stale = ...
    
    def set_ticks(self, ticks, minor: bool = ...):
        """
        Set the locations of the tick marks from sequence ticks

        ACCEPTS: sequence of floats
        """
        ...
    
    def _get_tick_boxes_siblings(self, xdir, renderer):
        """
        Get the bounding boxes for this `.axis` and its siblings
        as set by `.Figure.align_xlabels` or  `.Figure.align_ylablels`.

        By default it just gets bboxes for self.
        """
        ...
    
    def _update_label_position(self, renderer):
        """
        Update the label position based on the bounding box enclosing
        all the ticklabels and axis spine
        """
        ...
    
    def _update_offset_text_position(self, bboxes, bboxes2):
        """
        Update the label position based on the sequence of bounding
        boxes of all the ticklabels
        """
        ...
    
    def pan(self, numsteps):
        'Pan *numsteps* (can be positive or negative)'
        ...
    
    def zoom(self, direction):
        "Zoom in/out on axis; if *direction* is >0 zoom in, else zoom out"
        ...
    
    def axis_date(self, tz: Optional[Any] = ...):
        """
        Sets up x-axis ticks and labels that treat the x data as dates.
        *tz* is a :class:`tzinfo` instance or a timezone string.
        This timezone is used to create date labels.
        """
        ...
    
    def get_tick_space(self):
        """
        Return the estimated number of ticks that can fit on the axis.
        """
        ...
    
    def get_label_position(self):
        """
        Return the label position (top or bottom)
        """
        ...
    
    def set_label_position(self, position):
        """
        Set the label position (top or bottom)

        ACCEPTS: [ 'top' | 'bottom' ]
        """
        ...
    
    def get_minpos(self):
        ...
    


class XAxis(Axis):
    __name__ = ...
    axis_name = ...
    def contains(self, mouseevent):
        """Test whether the mouse event occurred in the x axis.
        """
        ...
    
    def _get_tick(self, major):
        ...
    
    def _get_label(self):
        self.label_position = ...
    
    def _get_offset_text(self):
        self.offset_text_position = ...
    
    def _get_pixel_distance_along_axis(self, where, perturb):
        """
        Returns the amount, in data coordinates, that a single pixel
        corresponds to in the locality given by "where", which is also given
        in data coordinates, and is an x coordinate. "perturb" is the amount
        to perturb the pixel.  Usually +0.5 or -0.5.

        Implementing this routine for an axis is optional; if present, it will
        ensure that no ticks are lost due to round-off at the extreme ends of
        an axis.
        """
        ...
    
    def set_label_position(self, position):
        """
        Set the label position (top or bottom)

        ACCEPTS: [ 'top' | 'bottom' ]
        """
        self.label_position = ...
        self.stale = ...
    
    def _get_tick_boxes_siblings(self, renderer):
        """
        Get the bounding boxes for this `.axis` and its siblings
        as set by `.Figure.align_xlabels` or  `.Figure.align_ylablels`.

        By default it just gets bboxes for self.
        """
        ...
    
    def _update_label_position(self, renderer):
        """
        Update the label position based on the bounding box enclosing
        all the ticklabels and axis spine
        """
        ...
    
    def _update_offset_text_position(self, bboxes, bboxes2):
        """
        Update the offset_text position based on the sequence of bounding
        boxes of all the ticklabels
        """
        ...
    
    def get_text_heights(self, renderer):
        """
        Returns the amount of space one should reserve for text
        above and below the axes.  Returns a tuple (above, below)
        """
        ...
    
    def set_ticks_position(self, position):
        """
        Set the ticks position (top, bottom, both, default or none)
        both sets the ticks to appear on both positions, but does not
        change the tick labels.  'default' resets the tick positions to
        the default: ticks on both positions, labels at bottom.  'none'
        can be used if you don't want any ticks. 'none' and 'both'
        affect only the ticks, not the labels.

        ACCEPTS: [ 'top' | 'bottom' | 'both' | 'default' | 'none' ]
        """
        self.stale = ...
    
    def tick_top(self):
        """
        Move ticks and ticklabels (if present) to the top of the axes.
        """
        ...
    
    def tick_bottom(self):
        """
        Move ticks and ticklabels (if present) to the bottom of the axes.
        """
        ...
    
    def get_ticks_position(self):
        """
        Return the ticks position (top, bottom, default or unknown)
        """
        ...
    
    def get_view_interval(self):
        'return the Interval instance for this axis view limits'
        ...
    
    def set_view_interval(self, vmin, vmax, ignore: bool = ...):
        """
        If *ignore* is *False*, the order of vmin, vmax
        does not matter; the original axis orientation will
        be preserved. In addition, the view limits can be
        expanded, but will not be reduced.  This method is
        for mpl internal use; for normal use, see
        :meth:`~matplotlib.axes.Axes.set_xlim`.

        """
        ...
    
    def get_minpos(self):
        ...
    
    def get_data_interval(self):
        'return the Interval instance for this axis data limits'
        ...
    
    def set_data_interval(self, vmin, vmax, ignore: bool = ...):
        'set the axis data limits'
        self.stale = ...
    
    def set_default_intervals(self):
        'set the default limits for the axis interval if they are not mutated'
        self.stale = ...
    
    def get_tick_space(self):
        ...
    


class YAxis(Axis):
    __name__ = ...
    axis_name = ...
    def contains(self, mouseevent):
        """Test whether the mouse event occurred in the y axis.

        Returns *True* | *False*
        """
        ...
    
    def _get_tick(self, major):
        ...
    
    def _get_label(self):
        self.label_position = ...
    
    def _get_offset_text(self):
        self.offset_text_position = ...
    
    def _get_pixel_distance_along_axis(self, where, perturb):
        """
        Returns the amount, in data coordinates, that a single pixel
        corresponds to in the locality given by *where*, which is also given
        in data coordinates, and is a y coordinate.

        *perturb* is the amount to perturb the pixel.  Usually +0.5 or -0.5.

        Implementing this routine for an axis is optional; if present, it will
        ensure that no ticks are lost due to round-off at the extreme ends of
        an axis.
        """
        ...
    
    def set_label_position(self, position):
        """
        Set the label position (left or right)

        ACCEPTS: [ 'left' | 'right' ]
        """
        self.label_position = ...
        self.stale = ...
    
    def _get_tick_boxes_siblings(self, renderer):
        """
        Get the bounding boxes for this `.axis` and its siblings
        as set by `.Figure.align_xlabels` or  `.Figure.align_ylablels`.

        By default it just gets bboxes for self.
        """
        ...
    
    def _update_label_position(self, renderer):
        """
        Update the label position based on the bounding box enclosing
        all the ticklabels and axis spine
        """
        ...
    
    def _update_offset_text_position(self, bboxes, bboxes2):
        """
        Update the offset_text position based on the sequence of bounding
        boxes of all the ticklabels
        """
        ...
    
    def set_offset_position(self, position):
        """
        .. ACCEPTS: [ 'left' | 'right' ]
        """
        self.stale = ...
    
    def get_text_widths(self, renderer):
        ...
    
    def set_ticks_position(self, position):
        """
        Set the ticks position (left, right, both, default or none)
        'both' sets the ticks to appear on both positions, but does not
        change the tick labels.  'default' resets the tick positions to
        the default: ticks on both positions, labels at left.  'none'
        can be used if you don't want any ticks. 'none' and 'both'
        affect only the ticks, not the labels.

        ACCEPTS: [ 'left' | 'right' | 'both' | 'default' | 'none' ]
        """
        self.stale = ...
    
    def tick_right(self):
        """
        Move ticks and ticklabels (if present) to the right of the axes.
        """
        ...
    
    def tick_left(self):
        """
        Move ticks and ticklabels (if present) to the left of the axes.
        """
        ...
    
    def get_ticks_position(self):
        """
        Return the ticks position (left, right, both or unknown)
        """
        ...
    
    def get_view_interval(self):
        'return the Interval instance for this axis view limits'
        ...
    
    def set_view_interval(self, vmin, vmax, ignore: bool = ...):
        """
        If *ignore* is *False*, the order of vmin, vmax
        does not matter; the original axis orientation will
        be preserved. In addition, the view limits can be
        expanded, but will not be reduced.  This method is
        for mpl internal use; for normal use, see
        :meth:`~matplotlib.axes.Axes.set_ylim`.

        """
        self.stale = ...
    
    def get_minpos(self):
        ...
    
    def get_data_interval(self):
        'return the Interval instance for this axis data limits'
        ...
    
    def set_data_interval(self, vmin, vmax, ignore: bool = ...):
        'set the axis data limits'
        self.stale = ...
    
    def set_default_intervals(self):
        'set the default limits for the axis interval if they are not mutated'
        self.stale = ...
    
    def get_tick_space(self):
        ...
    


