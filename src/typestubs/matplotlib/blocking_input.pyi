"""
This type stub file was generated by pyright.
"""

import logging
from typing import Any, Optional

"""
This provides several classes used for blocking interaction with figure
windows:

:class:`BlockingInput`
    creates a callable object to retrieve events in a blocking way for
    interactive sessions

:class:`BlockingKeyMouseInput`
    creates a callable object to retrieve key or mouse clicks in a blocking
    way for interactive sessions.
    Note: Subclass of BlockingInput. Used by waitforbuttonpress

:class:`BlockingMouseInput`
    creates a callable object to retrieve mouse clicks in a blocking way for
    interactive sessions.
    Note: Subclass of BlockingInput.  Used by ginput

:class:`BlockingContourLabeler`
    creates a callable object to retrieve mouse clicks in a blocking way that
    will then be used to place labels on a ContourSet
    Note: Subclass of BlockingMouseInput.  Used by clabel
"""
_log = logging.getLogger(__name__)
class BlockingInput(object):
    """
    Class that creates a callable object to retrieve events in a
    blocking way.
    """
    def __init__(self, fig, eventslist=...):
        self.fig = ...
        self.eventslist = ...
    
    def on_event(self, event):
        """
        Event handler that will be passed to the current figure to
        retrieve events.
        """
        ...
    
    def post_event(self):
        """For baseclass, do nothing but collect events"""
        ...
    
    def cleanup(self):
        """Disconnect all callbacks"""
        self.callbacks = ...
    
    def add_event(self, event):
        """For base class, this just appends an event to events."""
        ...
    
    def pop_event(self, index=...):
        """
        This removes an event from the event list.  Defaults to
        removing last event, but an index can be supplied.  Note that
        this does not check that there are events, much like the
        normal pop method.  If not events exist, this will throw an
        exception.
        """
        ...
    
    def pop(self, index=...):
        ...
    
    def __call__(self, n=..., timeout=...):
        """
        Blocking call to retrieve n events
        """
        self.n = ...
        self.events = ...
        self.callbacks = ...
    


class BlockingMouseInput(BlockingInput):
    """
    Class that creates a callable object to retrieve mouse clicks in a
    blocking way.

    This class will also retrieve keyboard clicks and treat them like
    appropriate mouse clicks (delete and backspace are like mouse button 3,
    enter is like mouse button 2 and all others are like mouse button 1).
    """
    button_add = ...
    button_pop = ...
    button_stop = ...
    def __init__(self, fig, mouse_add=..., mouse_pop=..., mouse_stop=...):
        self.button_add = ...
        self.button_pop = ...
        self.button_stop = ...
    
    def post_event(self):
        """
        This will be called to process events
        """
        ...
    
    def mouse_event(self):
        '''Process a mouse click event'''
        ...
    
    def key_event(self):
        '''
        Process a key click event.  This maps certain keys to appropriate
        mouse click events.
        '''
        ...
    
    def mouse_event_add(self, event):
        """
        Will be called for any event involving a button other than
        button 2 or 3.  This will add a click if it is inside axes.
        """
        ...
    
    def mouse_event_stop(self, event):
        """
        Will be called for any event involving button 2.
        Button 2 ends blocking input.
        """
        ...
    
    def mouse_event_pop(self, event):
        """
        Will be called for any event involving button 3.
        Button 3 removes the last click.
        """
        ...
    
    def add_click(self, event):
        """
        This add the coordinates of an event to the list of clicks
        """
        ...
    
    def pop_click(self, event, index=...):
        """
        This removes a click from the list of clicks.  Defaults to
        removing the last click.
        """
        ...
    
    def pop(self, event, index=...):
        """
        This removes a click and the associated event from the object.
        Defaults to removing the last click, but any index can be
        supplied.
        """
        ...
    
    def cleanup(self, event: Optional[Any] = ...):
        ...
    
    def __call__(self, n=..., timeout=..., show_clicks: bool = ...):
        """
        Blocking call to retrieve n coordinate pairs through mouse
        clicks.
        """
        self.show_clicks = ...
        self.clicks = ...
        self.marks = ...
    


class BlockingContourLabeler(BlockingMouseInput):
    """
    Class that creates a callable object that uses mouse clicks or key
    clicks on a figure window to place contour labels.
    """
    def __init__(self, cs):
        self.cs = ...
    
    def add_click(self, event):
        ...
    
    def pop_click(self, event, index=...):
        ...
    
    def button1(self, event):
        """
        This will be called if an event involving a button other than
        2 or 3 occcurs.  This will add a label to a contour.
        """
        ...
    
    def button3(self, event):
        """
        This will be called if button 3 is clicked.  This will remove
        a label if not in inline mode.  Unfortunately, if one is doing
        inline labels, then there is currently no way to fix the
        broken contour - once humpty-dumpty is broken, he can't be put
        back together.  In inline mode, this does nothing.
        """
        ...
    
    def __call__(self, inline, inline_spacing=..., n=..., timeout=...):
        self.inline = ...
        self.inline_spacing = ...
    


class BlockingKeyMouseInput(BlockingInput):
    """
    Class that creates a callable object to retrieve a single mouse or
    keyboard click
    """
    def __init__(self, fig):
        ...
    
    def post_event(self):
        """
        Determines if it is a key event
        """
        ...
    
    def __call__(self, timeout=...):
        """
        Blocking call to retrieve a single mouse or key click
        Returns True if key click, False if mouse, or None if timeout
        """
        self.keyormouse = ...
    


