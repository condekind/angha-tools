"""
This type stub file was generated by pyright.
"""

import six
import logging
from typing import Any, Optional

"""
:mod:`~matplotlib.gridspec` is a module which specifies the location
of the subplot in the figure.

    `GridSpec`
        specifies the geometry of the grid that a subplot will be
        placed. The number of rows and number of columns of the grid
        need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.

    `SubplotSpec`
        specifies the location of the subplot in the given `GridSpec`.

"""
_log = logging.getLogger(__name__)
class GridSpecBase(object):
    """
    A base class of GridSpec that specifies the geometry of the grid
    that a subplot will be placed.
    """
    def __init__(self, nrows, ncols, height_ratios: Optional[Any] = ..., width_ratios: Optional[Any] = ...):
        """
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        """
        ...
    
    def get_geometry(self):
        'get the geometry of the grid, e.g., 2,3'
        ...
    
    def get_subplot_params(self, figure: Optional[Any] = ..., fig: Optional[Any] = ...):
        ...
    
    def new_subplotspec(self, loc, rowspan=..., colspan=...):
        """
        create and return a SuplotSpec instance.
        """
        ...
    
    def set_width_ratios(self, width_ratios):
        ...
    
    def get_width_ratios(self):
        ...
    
    def set_height_ratios(self, height_ratios):
        ...
    
    def get_height_ratios(self):
        ...
    
    def get_grid_positions(self, fig, raw: bool = ...):
        """
        return lists of bottom and top position of rows, left and
        right positions of columns.

        If raw=True, then these are all in units relative to the container
        with no margins.  (used for constrained_layout).
        """
        ...
    
    def __getitem__(self, key):
        """Create and return a SuplotSpec instance.
        """
        ...
    


class GridSpec(GridSpecBase):
    """
    A class that specifies the geometry of the grid that a subplot
    will be placed. The location of grid is determined by similar way
    as the SubplotParams.
    """
    def __init__(self, nrows, ncols, figure: Optional[Any] = ..., left: Optional[Any] = ..., bottom: Optional[Any] = ..., right: Optional[Any] = ..., top: Optional[Any] = ..., wspace: Optional[Any] = ..., hspace: Optional[Any] = ..., width_ratios: Optional[Any] = ..., height_ratios: Optional[Any] = ...):
        """
        The number of rows and number of columns of the grid need to be set.
        Optionally, the subplot layout parameters (e.g., left, right, etc.)
        can be tuned.

        Parameters
        ----------
        nrows : int
            Number of rows in grid.

        ncols : int
            Number or columns in grid.

        Notes
        -----
        See `~.figure.SubplotParams` for descriptions of the layout parameters.
        """
        self.left = ...
        self.bottom = ...
        self.right = ...
        self.top = ...
        self.wspace = ...
        self.hspace = ...
        self.figure = ...
    
    _AllowedKeys = ...
    def __getstate__(self):
        ...
    
    def __setstate__(self, state):
        self.__dict__ = ...
    
    def update(self, **kwargs):
        """
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc.
        """
        ...
    
    def get_subplot_params(self, figure: Optional[Any] = ..., fig: Optional[Any] = ...):
        """
        Return a dictionary of subplot layout parameters. The default
        parameters are from rcParams unless a figure attribute is set.
        """
        ...
    
    def locally_modified_subplot_params(self):
        ...
    
    def tight_layout(self, figure, renderer: Optional[Any] = ..., pad=..., h_pad: Optional[Any] = ..., w_pad: Optional[Any] = ..., rect: Optional[Any] = ...):
        """
        Adjust subplot parameters to give specified padding.

        Parameters
        ----------

        pad : float
            Padding between the figure edge and the edges of subplots, as a
            fraction of the font-size.
        h_pad, w_pad : float, optional
            Padding (height/width) between edges of adjacent subplots.
            Defaults to ``pad_inches``.
        rect : tuple of 4 floats, optional
            (left, bottom, right, top) rectangle in normalized figure
            coordinates that the whole subplots area (including labels) will
            fit into.  Default is (0, 0, 1, 1).
        """
        ...
    


class GridSpecFromSubplotSpec(GridSpecBase):
    """
    GridSpec whose subplot layout parameters are inherited from the
    location specified by a given SubplotSpec.
    """
    def __init__(self, nrows, ncols, subplot_spec, wspace: Optional[Any] = ..., hspace: Optional[Any] = ..., height_ratios: Optional[Any] = ..., width_ratios: Optional[Any] = ...):
        """
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        """
        ...
    
    def get_subplot_params(self, figure: Optional[Any] = ..., fig: Optional[Any] = ...):
        """Return a dictionary of subplot layout parameters.
        """
        ...
    
    def get_topmost_subplotspec(self):
        """Get the topmost SubplotSpec instance associated with the subplot."""
        ...
    


class SubplotSpec(object):
    """Specifies the location of the subplot in the given `GridSpec`.
    """
    def __init__(self, gridspec, num1, num2: Optional[Any] = ...):
        """
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index starts from 0.
        """
        self.num1 = ...
        self.num2 = ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state):
        self.__dict__ = ...
    
    def get_gridspec(self):
        ...
    
    def get_geometry(self):
        """
        Get the subplot geometry (``n_rows, n_cols, start, stop``).

        start and stop are the index of the start and stop of the
        subplot.
        """
        ...
    
    def get_rows_columns(self):
        """
        Get the subplot row and column numbers:
        (``n_rows, n_cols, row_start, row_stop, col_start, col_stop``)
        """
        ...
    
    def get_position(self, figure, return_all: bool = ...):
        """Update the subplot position from ``figure.subplotpars``.
        """
        ...
    
    def get_topmost_subplotspec(self):
        'get the topmost SubplotSpec instance associated with the subplot'
        ...
    
    def __eq__(self, other):
        ...
    
    if six.PY2:
        def __ne__(self, other):
            ...
        
    def __hash__(self):
        ...
    


