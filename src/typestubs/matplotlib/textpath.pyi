"""
This type stub file was generated by pyright.
"""

from matplotlib.path import Path
from typing import Any, Optional

class TextToPath(object):
    """
    A class that convert a given text to a path using ttf fonts.
    """
    FONT_SCALE = ...
    DPI = ...
    def __init__(self):
        """
        Initialization
        """
        self.mathtext_parser = ...
        self.tex_font_map = ...
    
    def _get_adobe_standard_encoding(self):
        ...
    
    def _get_font(self, prop):
        """
        find a ttf font.
        """
        ...
    
    def _get_hinting_flag(self):
        ...
    
    def _get_char_id(self, font, ccode):
        """
        Return a unique id for the given font and character-code set.
        """
        ...
    
    def _get_char_id_ps(self, font, ccode):
        """
        Return a unique id for the given font and character-code set (for tex).
        """
        ...
    
    def glyph_to_path(self, font, currx=...):
        """
        convert the ft2font glyph to vertices and codes.
        """
        ...
    
    def get_text_width_height_descent(self, s, prop, ismath):
        ...
    
    def get_text_path(self, prop, s, ismath: bool = ..., usetex: bool = ...):
        """
        convert text *s* to path (a tuple of vertices and codes for
        matplotlib.path.Path).

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. Effective only if usetex == False.


        """
        ...
    
    def get_glyphs_with_font(self, font, s, glyph_map: Optional[Any] = ..., return_new_glyphs_only: bool = ...):
        """
        convert the string *s* to vertices and codes using the
        provided ttf font.
        """
        ...
    
    def get_glyphs_mathtext(self, prop, s, glyph_map: Optional[Any] = ..., return_new_glyphs_only: bool = ...):
        """
        convert the string *s* to vertices and codes by parsing it with
        mathtext.
        """
        ...
    
    def get_texmanager(self):
        """
        return the :class:`matplotlib.texmanager.TexManager` instance
        """
        ...
    
    def get_glyphs_tex(self, prop, s, glyph_map: Optional[Any] = ..., return_new_glyphs_only: bool = ...):
        """
        convert the string *s* to vertices and codes using matplotlib's usetex
        mode.
        """
        ...
    


text_to_path = TextToPath()
class TextPath(Path):
    """
    Create a path from the text.
    """
    def __init__(self, xy, s, size: Optional[Any] = ..., prop: Optional[Any] = ..., _interpolation_steps=..., usetex: bool = ..., *kl, **kwargs):
        """
        Create a path from the text. No support for TeX yet. Note that
        it simply is a path, not an artist. You need to use the
        PathPatch (or other artists) to draw this path onto the
        canvas.

        xy : position of the text.
        s : text
        size : font size
        prop : font property
        """
        ...
    
    def set_size(self, size):
        """
        set the size of the text
        """
        ...
    
    def get_size(self):
        """
        get the size of the text
        """
        ...
    
    def _get_vertices(self):
        """
        Return the cached path after updating it if necessary.
        """
        ...
    
    def _get_codes(self):
        """
        Return the codes
        """
        ...
    
    vertices = ...
    codes = ...
    def _revalidate_path(self):
        """
        update the path if necessary.

        The path for the text is initially create with the font size
        of FONT_SCALE, and this path is rescaled to other size when
        necessary.

        """
        ...
    
    def is_math_text(self, s):
        """
        Returns True if the given string *s* contains any mathtext.
        """
        ...
    
    def text_get_vertices_codes(self, prop, s, usetex):
        """
        convert the string *s* to vertices and codes using the
        provided font property *prop*. Mostly copied from
        backend_svg.py.
        """
        ...
    


