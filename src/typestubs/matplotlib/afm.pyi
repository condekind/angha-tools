"""
This type stub file was generated by pyright.
"""

"""
This is a python interface to Adobe Font Metrics Files.  Although a
number of other python implementations exist, and may be more complete
than this, it was decided not to go with them because they were
either:

  1) copyrighted or used a non-BSD compatible license

  2) had too many dependencies and a free standing lib was needed

  3) Did more than needed and it was easier to write afresh rather than
     figure out how to get just what was needed.

It is pretty easy to use, and requires only built-in python libs:

    >>> from matplotlib import rcParams
    >>> import os.path
    >>> afm_fname = os.path.join(rcParams['datapath'],
    ...                         'fonts', 'afm', 'ptmr8a.afm')
    >>>
    >>> from matplotlib.afm import AFM
    >>> with open(afm_fname, 'rb') as fh:
    ...     afm = AFM(fh)
    >>> afm.string_width_height('What the heck?')
    (6220.0, 694)
    >>> afm.get_fontname()
    'Times-Roman'
    >>> afm.get_kern_dist('A', 'f')
    0
    >>> afm.get_kern_dist('A', 'y')
    -92.0
    >>> afm.get_bbox_char('!')
    [130, -9, 238, 676]

"""
def _to_int(x):
    ...

_to_float = float
def _to_str(x):
    ...

def _to_list_of_ints(s):
    ...

def _to_list_of_floats(s):
    ...

def _to_bool(s):
    ...

def _sanity_check(fh):
    """
    Check if the file at least looks like AFM.
    If not, raise :exc:`RuntimeError`.
    """
    ...

def _parse_header(fh):
    """
    Reads the font metrics header (up to the char metrics) and returns
    a dictionary mapping *key* to *val*.  *val* will be converted to the
    appropriate python type as necessary; e.g.:

        * 'False'->False
        * '0'->0
        * '-168 -218 1000 898'-> [-168, -218, 1000, 898]

    Dictionary keys are

      StartFontMetrics, FontName, FullName, FamilyName, Weight,
      ItalicAngle, IsFixedPitch, FontBBox, UnderlinePosition,
      UnderlineThickness, Version, Notice, EncodingScheme, CapHeight,
      XHeight, Ascender, Descender, StartCharMetrics

    """
    ...

def _parse_char_metrics(fh):
    """
    Return a character metric dictionary.  Keys are the ASCII num of
    the character, values are a (*wx*, *name*, *bbox*) tuple, where
    *wx* is the character width, *name* is the postscript language
    name, and *bbox* is a (*llx*, *lly*, *urx*, *ury*) tuple.

    This function is incomplete per the standard, but thus far parses
    all the sample afm files tried.
    """
    ...

def _parse_kern_pairs(fh):
    """
    Return a kern pairs dictionary; keys are (*char1*, *char2*) tuples and
    values are the kern pair value.  For example, a kern pairs line like
    ``KPX A y -50``

    will be represented as::

      d[ ('A', 'y') ] = -50

    """
    ...

def _parse_composites(fh):
    """
    Return a composites dictionary.  Keys are the names of the
    composites.  Values are a num parts list of composite information,
    with each element being a (*name*, *dx*, *dy*) tuple.  Thus a
    composites line reading:

      CC Aacute 2 ; PCC A 0 0 ; PCC acute 160 170 ;

    will be represented as::

      d['Aacute'] = [ ('A', 0, 0), ('acute', 160, 170) ]

    """
    ...

def _parse_optional(fh):
    """
    Parse the optional fields for kern pair data and composites

    return value is a (*kernDict*, *compositeDict*) which are the
    return values from :func:`_parse_kern_pairs`, and
    :func:`_parse_composites` if the data exists, or empty dicts
    otherwise
    """
    ...

def parse_afm(fh):
    """
    Parse the Adobe Font Metics file in file handle *fh*. Return value
    is a (*dhead*, *dcmetrics_ascii*, *dmetrics_name*, *dkernpairs*,
    *dcomposite*) tuple where
    *dhead* is a :func:`_parse_header` dict,
    *dcmetrics_ascii* and *dcmetrics_name* are the two resulting dicts
    from :func:`_parse_char_metrics`,
    *dkernpairs* is a :func:`_parse_kern_pairs` dict (possibly {}) and
    *dcomposite* is a :func:`_parse_composites` dict (possibly {})
    """
    ...

class AFM(object):
    def __init__(self, fh):
        """
        Parse the AFM file in file object *fh*
        """
        ...
    
    def get_bbox_char(self, c, isord: bool = ...):
        ...
    
    def string_width_height(self, s):
        """
        Return the string width (including kerning) and string height
        as a (*w*, *h*) tuple.
        """
        ...
    
    def get_str_bbox_and_descent(self, s):
        """
        Return the string bounding box
        """
        ...
    
    def get_str_bbox(self, s):
        """
        Return the string bounding box
        """
        ...
    
    def get_name_char(self, c, isord: bool = ...):
        """
        Get the name of the character, i.e., ';' is 'semicolon'
        """
        ...
    
    def get_width_char(self, c, isord: bool = ...):
        """
        Get the width of the character from the character metric WX
        field
        """
        ...
    
    def get_width_from_char_name(self, name):
        """
        Get the width of the character from a type1 character name
        """
        ...
    
    def get_height_char(self, c, isord: bool = ...):
        """
        Get the height of character *c* from the bounding box.  This
        is the ink height (space is 0)
        """
        ...
    
    def get_kern_dist(self, c1, c2):
        """
        Return the kerning pair distance (possibly 0) for chars *c1*
        and *c2*
        """
        ...
    
    def get_kern_dist_from_name(self, name1, name2):
        """
        Return the kerning pair distance (possibly 0) for chars
        *name1* and *name2*
        """
        ...
    
    def get_fontname(self):
        "Return the font name, e.g., 'Times-Roman'"
        ...
    
    def get_fullname(self):
        "Return the font full name, e.g., 'Times-Roman'"
        ...
    
    def get_familyname(self):
        "Return the font family name, e.g., 'Times'"
        ...
    
    @property
    def family_name(self):
        ...
    
    def get_weight(self):
        "Return the font weight, e.g., 'Bold' or 'Roman'"
        ...
    
    def get_angle(self):
        "Return the fontangle as float"
        ...
    
    def get_capheight(self):
        "Return the cap height as float"
        ...
    
    def get_xheight(self):
        "Return the xheight as float"
        ...
    
    def get_underline_thickness(self):
        "Return the underline thickness as float"
        ...
    
    def get_horizontal_stem_width(self):
        """
        Return the standard horizontal stem width as float, or *None* if
        not specified in AFM file.
        """
        ...
    
    def get_vertical_stem_width(self):
        """
        Return the standard vertical stem width as float, or *None* if
        not specified in AFM file.
        """
        ...
    


