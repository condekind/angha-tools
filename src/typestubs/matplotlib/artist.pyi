"""
This type stub file was generated by pyright.
"""

from collections import namedtuple
from . import cbook
from typing import Any, Optional

def allow_rasterization(draw):
    """
    Decorator for Artist.draw method. Provides routines
    that run before and after the draw call. The before and after functions
    are useful for changing artist-dependent renderer attributes or making
    other setup function calls, such as starting and flushing a mixed-mode
    renderer.
    """
    ...

def _stale_axes_callback(self, val):
    ...

_XYPair = namedtuple("_XYPair", "x y")
class Artist(object):
    """
    Abstract base class for someone who renders into a
    :class:`FigureCanvas`.
    """
    aname = ...
    zorder = ...
    _prop_order = ...
    def __init__(self):
        self.stale_callback = ...
        self.figure = ...
        self.clipbox = ...
        self.eventson = ...
    
    def __getstate__(self):
        ...
    
    def remove(self):
        """
        Remove the artist from the figure if possible.  The effect
        will not be visible until the figure is redrawn, e.g., with
        :meth:`matplotlib.axes.Axes.draw_idle`.  Call
        :meth:`matplotlib.axes.Axes.relim` to update the axes limits
        if desired.

        Note: :meth:`~matplotlib.axes.Axes.relim` will not see
        collections even if the collection was added to axes with
        *autolim* = True.

        Note: there is no support for removing the artist's legend entry.
        """
        ...
    
    def have_units(self):
        'Return *True* if units are set on the *x* or *y* axes'
        ...
    
    def convert_xunits(self, x):
        """For artists in an axes, if the xaxis has units support,
        convert *x* using xaxis unit type
        """
        ...
    
    def convert_yunits(self, y):
        """For artists in an axes, if the yaxis has units support,
        convert *y* using yaxis unit type
        """
        ...
    
    @property
    def axes(self):
        """
        The :class:`~matplotlib.axes.Axes` instance the artist
        resides in, or *None*.
        """
        ...
    
    @axes.setter
    def axes(self, new_axes):
        ...
    
    @property
    def stale(self):
        """
        If the artist is 'stale' and needs to be re-drawn for the output to
        match the internal state of the artist.
        """
        ...
    
    @stale.setter
    def stale(self, val):
        ...
    
    def get_window_extent(self, renderer):
        """
        Get the axes bounding box in display space.
        Subclasses should override for inclusion in the bounding box
        "tight" calculation. Default is to return an empty bounding
        box at 0, 0.

        Be careful when using this function, the results will not update
        if the artist window extent of the artist changes.  The extent
        can change due to any changes in the transform stack, such as
        changing the axes limits, the figure size, or the canvas used
        (as is done when saving a figure).  This can lead to unexpected
        behavior where interactive figures will look fine on the screen,
        but will save incorrectly.
        """
        ...
    
    def add_callback(self, func):
        """
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        """
        ...
    
    def remove_callback(self, oid):
        """
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        """
        ...
    
    def pchanged(self):
        """
        Fire an event when property changed, calling all of the
        registered callbacks.
        """
        ...
    
    def is_transform_set(self):
        """
        Returns *True* if :class:`Artist` has a transform explicitly
        set.
        """
        ...
    
    def set_transform(self, t):
        """
        Set the artist transform.

        Parameters
        ----------
        t : `.Transform`
            .. ACCEPTS: `.Transform`
        """
        self.stale = ...
    
    def get_transform(self):
        """
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this artist.
        """
        ...
    
    @cbook.deprecated("2.2")
    def hitlist(self, event):
        """
        List the children of the artist which contain the mouse event *event*.
        """
        ...
    
    def get_children(self):
        """
        Return a list of the child :class:`Artist`s this
        :class:`Artist` contains.
        """
        ...
    
    def contains(self, mouseevent):
        """Test whether the artist contains the mouse event.

        Returns the truth value and a dictionary of artist specific details of
        selection, such as which points are contained in the pick radius.  See
        individual artists for details.
        """
        ...
    
    def set_contains(self, picker):
        """
        Replace the contains test used by this artist. The new picker
        should be a callable function which determines whether the
        artist is hit by the mouse event::

            hit, props = picker(artist, mouseevent)

        If the mouse event is over the artist, return *hit* = *True*
        and *props* is a dictionary of properties you want returned
        with the contains test.

        Parameters
        ----------
        picker : callable
            .. ACCEPTS: a callable function
        """
        ...
    
    def get_contains(self):
        """
        Return the _contains test used by the artist, or *None* for default.
        """
        ...
    
    def pickable(self):
        'Return *True* if :class:`Artist` is pickable.'
        ...
    
    def pick(self, mouseevent):
        """
        Process pick event

        each child artist will fire a pick event if *mouseevent* is over
        the artist and the artist has picker set
        """
        ...
    
    def set_picker(self, picker):
        """
        Set the epsilon for picking used by this artist

        *picker* can be one of the following:

          * *None*: picking is disabled for this artist (default)

          * A boolean: if *True* then picking will be enabled and the
            artist will fire a pick event if the mouse event is over
            the artist

          * A float: if picker is a number it is interpreted as an
            epsilon tolerance in points and the artist will fire
            off an event if it's data is within epsilon of the mouse
            event.  For some artists like lines and patch collections,
            the artist may provide additional data to the pick event
            that is generated, e.g., the indices of the data within
            epsilon of the pick event

          * A function: if picker is callable, it is a user supplied
            function which determines whether the artist is hit by the
            mouse event::

              hit, props = picker(artist, mouseevent)

            to determine the hit test.  if the mouse event is over the
            artist, return *hit=True* and props is a dictionary of
            properties you want added to the PickEvent attributes.

        Parameters
        ----------
        picker : None or bool or float or callable
            .. ACCEPTS: [None | bool | float | callable]
        """
        ...
    
    def get_picker(self):
        """Return the picker object used by this artist."""
        ...
    
    @cbook.deprecated("2.2", "artist.figure is not None")
    def is_figure_set(self):
        """Returns whether the artist is assigned to a `.Figure`."""
        ...
    
    def get_url(self):
        """Returns the url."""
        ...
    
    def set_url(self, url):
        """
        Sets the url for the artist.

        Parameters
        ----------
        url : str
            .. ACCEPTS: a url string
        """
        ...
    
    def get_gid(self):
        """Returns the group id."""
        ...
    
    def set_gid(self, gid):
        """
        Sets the (group) id for the artist.

        Parameters
        ----------
        gid : str
            .. ACCEPTS: an id string
        """
        ...
    
    def get_snap(self):
        """
        Returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        """
        ...
    
    def set_snap(self, snap):
        """
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.

        Parameters
        ----------
        snap : bool or None
            .. ACCEPTS: bool or None
        """
        self.stale = ...
    
    def get_sketch_params(self):
        """
        Returns the sketch parameters for the artist.

        Returns
        -------
        sketch_params : tuple or `None`

        A 3-tuple with the following elements:

          * `scale`: The amplitude of the wiggle perpendicular to the
            source line.

          * `length`: The length of the wiggle along the line.

          * `randomness`: The scale factor by which the length is
            shrunken or expanded.

        May return `None` if no sketch parameters were set.
        """
        ...
    
    def set_sketch_params(self, scale: Optional[Any] = ..., length: Optional[Any] = ..., randomness: Optional[Any] = ...):
        """
        Sets the sketch parameters.

        Parameters
        ----------

        scale : float, optional
            The amplitude of the wiggle perpendicular to the source
            line, in pixels.  If scale is `None`, or not provided, no
            sketch filter will be provided.

        length : float, optional
             The length of the wiggle along the line, in pixels
             (default 128.0)

        randomness : float, optional
            The scale factor by which the length is shrunken or
            expanded (default 16.0)

            .. ACCEPTS: (scale: float, length: float, randomness: float)
        """
        self.stale = ...
    
    def set_path_effects(self, path_effects):
        """Set the path effects.

        Parameters
        ----------
        path_effects : `.AbstractPathEffect`
            .. ACCEPTS: `.AbstractPathEffect`
        """
        self.stale = ...
    
    def get_path_effects(self):
        ...
    
    def get_figure(self):
        """Return the `.Figure` instance the artist belongs to."""
        ...
    
    def set_figure(self, fig):
        """
        Set the `.Figure` instance the artist belongs to.

        Parameters
        ----------
        fig : `.Figure`
            .. ACCEPTS: a `.Figure` instance
        """
        self.figure = ...
        self.stale = ...
    
    def set_clip_box(self, clipbox):
        """
        Set the artist's clip `.Bbox`.

        Parameters
        ----------
        clipbox : `.Bbox`
            .. ACCEPTS: a `.Bbox` instance
        """
        self.clipbox = ...
        self.stale = ...
    
    def set_clip_path(self, path, transform: Optional[Any] = ...):
        """
        Set the artist's clip path, which may be:

        - a :class:`~matplotlib.patches.Patch` (or subclass) instance; or
        - a :class:`~matplotlib.path.Path` instance, in which case a
          :class:`~matplotlib.transforms.Transform` instance, which will be
          applied to the path before using it for clipping, must be provided;
          or
        - ``None``, to remove a previously set clipping path.

        For efficiency, if the path happens to be an axis-aligned rectangle,
        this method will set the clipping box to the corresponding rectangle
        and set the clipping path to ``None``.

        ACCEPTS: [(`~matplotlib.path.Path`, `.Transform`) | `.Patch` | None]
        """
        self.stale = ...
    
    def get_alpha(self):
        """
        Return the alpha value used for blending - not supported on all
        backends
        """
        ...
    
    def get_visible(self):
        "Return the artist's visiblity"
        ...
    
    def get_animated(self):
        "Return the artist's animated state"
        ...
    
    def get_clip_on(self):
        'Return whether artist uses clipping'
        ...
    
    def get_clip_box(self):
        'Return artist clipbox'
        ...
    
    def get_clip_path(self):
        'Return artist clip path'
        ...
    
    def get_transformed_clip_path_and_affine(self):
        '''
        Return the clip path with the non-affine part of its
        transformation applied, and the remaining affine part of its
        transformation.
        '''
        ...
    
    def set_clip_on(self, b):
        """
        Set whether artist uses clipping.

        When False artists will be visible out side of the axes which
        can lead to unexpected results.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        """
        self.stale = ...
    
    def _set_gc_clip(self, gc):
        'Set the clip properly for the gc'
        ...
    
    def get_rasterized(self):
        """Return whether the artist is to be rasterized."""
        ...
    
    def set_rasterized(self, rasterized):
        """
        Force rasterized (bitmap) drawing in vector backend output.

        Defaults to None, which implies the backend's default behavior.

        Parameters
        ----------
        rasterized : bool or None
            .. ACCEPTS: bool or None
        """
        ...
    
    def get_agg_filter(self):
        """Return filter function to be used for agg filter."""
        ...
    
    def set_agg_filter(self, filter_func):
        """Set the agg filter.

        Parameters
        ----------
        filter_func : callable
            A filter function, which takes a (m, n, 3) float array and a dpi
            value, and returns a (m, n, 3) array.

            .. ACCEPTS: a filter function, which takes a (m, n, 3) float array
                and a dpi value, and returns a (m, n, 3) array
        """
        self.stale = ...
    
    def draw(self, renderer, *args, **kwargs):
        'Derived classes drawing method'
        self.stale = ...
    
    def set_alpha(self, alpha):
        """
        Set the alpha value used for blending - not supported on
        all backends.

        Parameters
        ----------
        alpha : float
            .. ACCEPTS: float (0.0 transparent through 1.0 opaque)
        """
        self.stale = ...
    
    def set_visible(self, b):
        """
        Set the artist's visibility.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        """
        self.stale = ...
    
    def set_animated(self, b):
        """
        Set the artist's animation state.

        Parameters
        ----------
        b : bool
            .. ACCEPTS: bool
        """
        ...
    
    def update(self, props):
        """
        Update this artist's properties from the dictionary *prop*.
        """
        self.eventson = ...
    
    def get_label(self):
        """Get the label used for this artist in the legend."""
        ...
    
    def set_label(self, s):
        """
        Set the label to *s* for auto legend.

        Parameters
        ----------
        s : object
            *s* will be converted to a string by calling `str` (`unicode` on
            Py2).

            .. ACCEPTS: object
        """
        self.stale = ...
    
    def get_zorder(self):
        """Return the artist's zorder."""
        ...
    
    def set_zorder(self, level):
        """
        Set the zorder for the artist.  Artists with lower zorder
        values are drawn first.

        Parameters
        ----------
        level : float
            .. ACCEPTS: float
        """
        self.zorder = ...
        self.stale = ...
    
    @property
    def sticky_edges(self):
        """
        `x` and `y` sticky edge lists.

        When performing autoscaling, if a data limit coincides with a value in
        the corresponding sticky_edges list, then no margin will be added--the
        view limit "sticks" to the edge. A typical usecase is histograms,
        where one usually expects no margin on the bottom edge (0) of the
        histogram.

        This attribute cannot be assigned to; however, the `x` and `y` lists
        can be modified in place as needed.

        Examples
        --------

        >>> artist.sticky_edges.x[:] = (xmin, xmax)
        >>> artist.sticky_edges.y[:] = (ymin, ymax)

        """
        ...
    
    def update_from(self, other):
        'Copy properties from *other* to *self*.'
        self.clipbox = ...
        self.stale = ...
    
    def properties(self):
        """
        return a dictionary mapping property name -> value for all Artist props
        """
        ...
    
    def set(self, **kwargs):
        """A property batch setter. Pass *kwargs* to set properties.
        """
        ...
    
    def findobj(self, match: Optional[Any] = ..., include_self: bool = ...):
        """
        Find artist objects.

        Recursively find all :class:`~matplotlib.artist.Artist` instances
        contained in self.

        *match* can be

          - None: return all objects contained in artist.

          - function with signature ``boolean = match(artist)``
            used to filter matches

          - class instance: e.g., Line2D.  Only return artists of class type.

        If *include_self* is True (default), include self in the list to be
        checked for a match.

        """
        ...
    
    def get_cursor_data(self, event):
        """
        Get the cursor data for a given event.
        """
        ...
    
    def format_cursor_data(self, data):
        """
        Return *cursor data* string formatted.
        """
        ...
    
    @property
    def mouseover(self):
        ...
    
    @mouseover.setter
    def mouseover(self, val):
        ...
    


class ArtistInspector(object):
    """
    A helper class to inspect an :class:`~matplotlib.artist.Artist`
    and return information about it's settable properties and their
    current values.
    """
    def __init__(self, o):
        r"""
        Initialize the artist inspector with an `Artist` or an iterable of
        `Artist`\s.  If an iterable is used, we assume it is a homogeneous
        sequence (all `Artists` are of the same type) and it is your
        responsibility to make sure this is so.
        """
        self.oorig = ...
        self.o = ...
        self.aliasd = ...
    
    def get_aliases(self):
        """
        Get a dict mapping *fullname* -> *alias* for each *alias* in
        the :class:`~matplotlib.artist.ArtistInspector`.

        e.g., for lines::

          {'markerfacecolor': 'mfc',
           'linewidth'      : 'lw',
          }

        """
        ...
    
    _get_valid_values_regex = ...
    def get_valid_values(self, attr):
        """
        Get the legal arguments for the setter associated with *attr*.

        This is done by querying the docstring of the function *set_attr*
        for a line that begins with "ACCEPTS" or ".. ACCEPTS":

        e.g., for a line linestyle, return
        "[ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'steps'`` | ``'None'``
        ]"
        """
        ...
    
    def _get_setters_and_targets(self):
        """
        Get the attribute strings and a full path to where the setter
        is defined for all setters in an object.
        """
        ...
    
    def get_setters(self):
        """
        Get the attribute strings with setters for object.  e.g., for a line,
        return ``['markerfacecolor', 'linewidth', ....]``.
        """
        ...
    
    def is_alias(self, o):
        """
        Return *True* if method object *o* is an alias for another
        function.
        """
        ...
    
    def aliased_name(self, s):
        """
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME.

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        """
        ...
    
    def aliased_name_rest(self, s, target):
        """
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME formatted for ReST

        e.g., for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        """
        ...
    
    def pprint_setters(self, prop: Optional[Any] = ..., leadingspace=...):
        """
        If *prop* is *None*, return a list of strings of all settable
        properties and their valid values.

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        """
        ...
    
    def pprint_setters_rest(self, prop: Optional[Any] = ..., leadingspace=...):
        """
        If *prop* is *None*, return a list of strings of all settable
        properties and their valid values.  Format the output for ReST

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        """
        ...
    
    def properties(self):
        """
        return a dictionary mapping property name -> value
        """
        ...
    
    def pprint_getters(self):
        """
        Return the getters and actual values as list of strings.
        """
        ...
    


def getp(obj, property: Optional[Any] = ...):
    """
    Return the value of object's property.  *property* is an optional string
    for the property you want to return

    Example usage::

        getp(obj)  # get all the object properties
        getp(obj, 'linestyle')  # get the linestyle property

    *obj* is a :class:`Artist` instance, e.g.,
    :class:`~matplotllib.lines.Line2D` or an instance of a
    :class:`~matplotlib.axes.Axes` or :class:`matplotlib.text.Text`.
    If the *property* is 'somename', this function returns

      obj.get_somename()

    :func:`getp` can be used to query all the gettable properties with
    ``getp(obj)``. Many properties have aliases for shorter typing, e.g.
    'lw' is an alias for 'linewidth'.  In the output, aliases and full
    property names will be listed as:

      property or alias = value

    e.g.:

      linewidth or lw = 2
    """
    ...

get = getp
def setp(obj, *args, **kwargs):
    """
    Set a property on an artist object.

    matplotlib supports the use of :func:`setp` ("set property") and
    :func:`getp` to set and get object properties, as well as to do
    introspection on the object.  For example, to set the linestyle of a
    line to be dashed, you can do::

      >>> line, = plot([1,2,3])
      >>> setp(line, linestyle='--')

    If you want to know the valid types of arguments, you can provide
    the name of the property you want to set without a value::

      >>> setp(line, 'linestyle')
          linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]

    If you want to see all the properties that can be set, and their
    possible values, you can do::

      >>> setp(line)
          ... long output listing omitted

    You may specify another output file to `setp` if `sys.stdout` is not
    acceptable for some reason using the `file` keyword-only argument::

      >>> with fopen('output.log') as f:
      >>>     setp(line, file=f)

    :func:`setp` operates on a single instance or a iterable of
    instances. If you are in query mode introspecting the possible
    values, only the first instance in the sequence is used. When
    actually setting values, all the instances will be set.  e.g.,
    suppose you have a list of two lines, the following will make both
    lines thicker and red::

      >>> x = arange(0,1.0,0.01)
      >>> y1 = sin(2*pi*x)
      >>> y2 = sin(4*pi*x)
      >>> lines = plot(x, y1, x, y2)
      >>> setp(lines, linewidth=2, color='r')

    :func:`setp` works with the MATLAB style string/value pairs or
    with python kwargs.  For example, the following are equivalent::

      >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style
      >>> setp(lines, linewidth=2, color='r')        # python style
    """
    ...

def kwdoc(a):
    ...

