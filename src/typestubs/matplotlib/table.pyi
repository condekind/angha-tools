"""
This type stub file was generated by pyright.
"""

from .artist import Artist, allow_rasterization
from .patches import Rectangle
from typing import Any, Optional

"""
Place a table below the x-axis at location loc.

The table consists of a grid of cells.

The grid need not be rectangular and can have holes.

Cells are added by specifying their row and column.

For the purposes of positioning the cell at (0, 0) is
assumed to be at the top left and the cell at (max_row, max_col)
is assumed to be at bottom right.

You can add additional cells outside this range to have convenient
ways of positioning more interesting grids.

Author    : John Gill <jng@europe.renre.com>
Copyright : 2004 John Gill and John Hunter
License   : matplotlib license

"""
class Cell(Rectangle):
    """
    A cell is a Rectangle with some associated text.

    """
    PAD = ...
    def __init__(self, xy, width, height, edgecolor=..., facecolor=..., fill: bool = ..., text=..., loc: Optional[Any] = ..., fontproperties: Optional[Any] = ...):
        ...
    
    def set_transform(self, trans):
        self.stale = ...
    
    def set_figure(self, fig):
        ...
    
    def get_text(self):
        'Return the cell Text intance'
        ...
    
    def set_fontsize(self, size):
        self.stale = ...
    
    def get_fontsize(self):
        'Return the cell fontsize'
        ...
    
    def auto_set_font_size(self, renderer):
        """ Shrink font size until text fits. """
        ...
    
    @allow_rasterization
    def draw(self, renderer):
        self.stale = ...
    
    def _set_text_position(self, renderer):
        """ Set text up so it draws in the right place.

        Currently support 'left', 'center' and 'right'
        """
        ...
    
    def get_text_bounds(self, renderer):
        """ Get text bounds in axes co-ordinates. """
        ...
    
    def get_required_width(self, renderer):
        """ Get width required for this cell. """
        ...
    
    def set_text_props(self, **kwargs):
        'update the text properties with kwargs'
        self.stale = ...
    


class CustomCell(Cell):
    """
    A subclass of Cell where the sides may be visibly toggled.

    """
    _edges = ...
    _edge_aliases = ...
    def __init__(self, *args, **kwargs):
        self.visible_edges = ...
    
    @property
    def visible_edges(self):
        ...
    
    @visible_edges.setter
    def visible_edges(self, value):
        self.stale = ...
    
    def get_path(self):
        'Return a path where the edges specified by _visible_edges are drawn'
        ...
    


class Table(Artist):
    """
    Create a table of cells.

    Table can have (optional) row and column headers.

    Each entry in the table can be either text or patches.

    Column widths and row heights for the table can be specified.

    Return value is a sequence of text, line and patch instances that make
    up the table
    """
    codes = ...
    FONTSIZE = ...
    AXESPAD = ...
    def __init__(self, ax, loc: Optional[Any] = ..., bbox: Optional[Any] = ..., **kwargs):
        ...
    
    def add_cell(self, row, col, *args, **kwargs):
        """
        Add a cell to the table.

        Parameters
        ----------
        row : int
            Row index
        col : int
            Column index

        Returns
        -------
        `CustomCell`: Automatically created cell

        """
        ...
    
    def __setitem__(self, position, cell):
        """
        Set a customcell in a given position
        """
        self.stale = ...
    
    def __getitem__(self, position):
        """
        Retreive a custom cell from a given position
        """
        ...
    
    @property
    def edges(self):
        ...
    
    @edges.setter
    def edges(self, value):
        self.stale = ...
    
    def _approx_text_height(self):
        ...
    
    @allow_rasterization
    def draw(self, renderer):
        self.stale = ...
    
    def _get_grid_bbox(self, renderer):
        """Get a bbox, in axes co-ordinates for the cells.

        Only include those in the range (0,0) to (maxRow, maxCol)"""
        ...
    
    def contains(self, mouseevent):
        """Test whether the mouse event occurred in the table.

        Returns T/F, {}
        """
        ...
    
    def get_children(self):
        'Return the Artists contained by the table'
        ...
    
    get_child_artists = ...
    def get_window_extent(self, renderer):
        'Return the bounding box of the table in window coords'
        ...
    
    def _do_cell_alignment(self):
        """ Calculate row heights and column widths.

        Position cells accordingly.
        """
        ...
    
    def auto_set_column_width(self, col):
        """ Given column indexs in either List, Tuple or int. Will be able to
        automatically set the columns into optimal sizes.

        Here is the example of the input, which triger automatic adjustment on
        columns to optimal size by given index numbers.
        -1: the row labling
        0: the 1st column
        1: the 2nd column

        Args:
            col(List): list of indexs
            >>>table.auto_set_column_width([-1,0,1])

            col(Tuple): tuple of indexs
            >>>table.auto_set_column_width((-1,0,1))

            col(int): index integer
            >>>table.auto_set_column_width(-1)
            >>>table.auto_set_column_width(0)
            >>>table.auto_set_column_width(1)
        """
        self.stale = ...
    
    def _auto_set_column_width(self, col, renderer):
        """ Automagically set width for column.
        """
        ...
    
    def auto_set_font_size(self, value: bool = ...):
        """ Automatically set font size. """
        self.stale = ...
    
    def _auto_set_font_size(self, renderer):
        ...
    
    def scale(self, xscale, yscale):
        """ Scale column widths by xscale and row heights by yscale. """
        ...
    
    def set_fontsize(self, size):
        """
        Set the fontsize of the cell text

        ACCEPTS: a float in points
        """
        self.stale = ...
    
    def _offset(self, ox, oy):
        'Move all the artists by ox,oy (axes coords)'
        ...
    
    def _update_positions(self, renderer):
        ...
    
    def get_celld(self):
        'return a dict of cells in the table'
        ...
    


def table(ax, cellText: Optional[Any] = ..., cellColours: Optional[Any] = ..., cellLoc=..., colWidths: Optional[Any] = ..., rowLabels: Optional[Any] = ..., rowColours: Optional[Any] = ..., rowLoc=..., colLabels: Optional[Any] = ..., colColours: Optional[Any] = ..., colLoc=..., loc=..., bbox: Optional[Any] = ..., edges=..., **kwargs):
    """
    TABLE(cellText=None, cellColours=None,
          cellLoc='right', colWidths=None,
          rowLabels=None, rowColours=None, rowLoc='left',
          colLabels=None, colColours=None, colLoc='center',
          loc='bottom', bbox=None, edges='closed')

    Factory function to generate a Table instance.

    Thanks to John Gill for providing the class and table.
    """
    ...

