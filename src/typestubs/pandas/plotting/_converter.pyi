"""
This type stub file was generated by pyright.
"""

import matplotlib.units as units
import matplotlib.dates as dates
from matplotlib.ticker import Formatter, Locator
from typing import Any, Optional

HOURS_PER_DAY = 24
MIN_PER_HOUR = 60
SEC_PER_MIN = 60
SEC_PER_HOUR = SEC_PER_MIN * MIN_PER_HOUR
SEC_PER_DAY = SEC_PER_HOUR * HOURS_PER_DAY
MUSEC_PER_DAY = 1000000 * SEC_PER_DAY
_WARN = True
_mpl_units = {  }
def get_pairs():
    ...

def register(explicit: bool = ...):
    """Register Pandas Formatters and Converters with matplotlib

    This function modifies the global ``matplotlib.units.registry``
    dictionary. Pandas adds custom converters for

    * pd.Timestamp
    * pd.Period
    * np.datetime64
    * datetime.datetime
    * datetime.date
    * datetime.time

    See Also
    --------
    deregister_matplotlib_converter
    """
    ...

def deregister():
    """Remove pandas' formatters and converters

    Removes the custom converters added by :func:`register`. This
    attempts to set the state of the registry back to the state before
    pandas registered its own units. Converters for pandas' own types like
    Timestamp and Period are removed completely. Converters for types
    pandas overwrites, like ``datetime.datetime``, are restored to their
    original value.

    See Also
    --------
    deregister_matplotlib_converters
    """
    ...

def _check_implicitly_registered():
    ...

def _to_ordinalf(tm):
    ...

def time2num(d):
    ...

class TimeConverter(units.ConversionInterface):
    @staticmethod
    def convert(value, unit, axis):
        ...
    
    @staticmethod
    def axisinfo(unit, axis):
        ...
    
    @staticmethod
    def default_units(x, axis):
        ...
    


class TimeFormatter(Formatter):
    def __init__(self, locs):
        self.locs = ...
    
    def __call__(self, x, pos=...):
        ...
    


class PeriodConverter(dates.DateConverter):
    @staticmethod
    def convert(values, units, axis):
        ...
    
    @staticmethod
    def _convert_1d(values, units, axis):
        ...
    


def get_datevalue(date, freq):
    ...

def _dt_to_float_ordinal(dt):
    """
    Convert :mod:`datetime` to the Gregorian date as UTC float days,
    preserving hours, minutes, seconds and microseconds.  Return value
    is a :func:`float`.
    """
    ...

class DatetimeConverter(dates.DateConverter):
    @staticmethod
    def convert(values, unit, axis):
        ...
    
    @staticmethod
    def _convert_1d(values, unit, axis):
        ...
    
    @staticmethod
    def axisinfo(unit, axis):
        """
        Return the :class:`~matplotlib.units.AxisInfo` for *unit*.

        *unit* is a tzinfo instance or None.
        The *axis* argument is required but not used.
        """
        ...
    


class PandasAutoDateFormatter(dates.AutoDateFormatter):
    def __init__(self, locator, tz: Optional[Any] = ..., defaultfmt=...):
        ...
    


class PandasAutoDateLocator(dates.AutoDateLocator):
    def get_locator(self, dmin, dmax):
        'Pick the best locator based on a distance.'
        ...
    
    def _get_unit(self):
        ...
    


class MilliSecondLocator(dates.DateLocator):
    UNIT = ...
    def __init__(self, tz):
        ...
    
    def _get_unit(self):
        ...
    
    @staticmethod
    def get_unit_generic(freq):
        ...
    
    def __call__(self):
        ...
    
    def _get_interval(self):
        ...
    
    def autoscale(self):
        """
        Set the view limits to include the data range.
        """
        ...
    


def _from_ordinal(x, tz: Optional[Any] = ...):
    ...

def _get_default_annual_spacing(nyears):
    """
    Returns a default spacing between consecutive ticks for annual data.
    """
    ...

def period_break(dates, period):
    """
    Returns the indices where the given period changes.

    Parameters
    ----------
    dates : PeriodIndex
        Array of intervals to monitor.
    period : string
        Name of the period to monitor.
    """
    ...

def has_level_label(label_flags, vmin):
    """
    Returns true if the ``label_flags`` indicate there is at least one label
    for this level.

    if the minimum view limit is not an exact integer, then the first tick
    label won't be shown, so we must adjust for that.
    """
    ...

def _daily_finder(vmin, vmax, freq):
    ...

def _monthly_finder(vmin, vmax, freq):
    ...

def _quarterly_finder(vmin, vmax, freq):
    ...

def _annual_finder(vmin, vmax, freq):
    ...

def get_finder(freq):
    ...

class TimeSeries_DateLocator(Locator):
    """
    Locates the ticks along an axis controlled by a :class:`Series`.

    Parameters
    ----------
    freq : {var}
        Valid frequency specifier.
    minor_locator : {False, True}, optional
        Whether the locator is for minor ticks (True) or not.
    dynamic_mode : {True, False}, optional
        Whether the locator should work in dynamic mode.
    base : {int}, optional
    quarter : {int}, optional
    month : {int}, optional
    day : {int}, optional
    """
    def __init__(self, freq, minor_locator: bool = ..., dynamic_mode: bool = ..., base=..., quarter=..., month=..., day=..., plot_obj: Optional[Any] = ...):
        self.freq = ...
        self.base = ...
        self.isminor = ...
        self.isdynamic = ...
        self.offset = ...
        self.plot_obj = ...
        self.finder = ...
    
    def _get_default_locs(self, vmin, vmax):
        "Returns the default locations of ticks."
        ...
    
    def __call__(self):
        'Return the locations of the ticks.'
        ...
    
    def autoscale(self):
        """
        Sets the view limits to the nearest multiples of base that contain the
        data.
        """
        ...
    


class TimeSeries_DateFormatter(Formatter):
    """
    Formats the ticks along an axis controlled by a :class:`PeriodIndex`.

    Parameters
    ----------
    freq : {int, string}
        Valid frequency specifier.
    minor_locator : {False, True}
        Whether the current formatter should apply to minor ticks (True) or
        major ticks (False).
    dynamic_mode : {True, False}
        Whether the formatter works in dynamic mode or not.
    """
    def __init__(self, freq, minor_locator: bool = ..., dynamic_mode: bool = ..., plot_obj: Optional[Any] = ...):
        self.format = ...
        self.freq = ...
        self.locs = ...
        self.formatdict = ...
        self.isminor = ...
        self.isdynamic = ...
        self.offset = ...
        self.plot_obj = ...
        self.finder = ...
    
    def _set_default_format(self, vmin, vmax):
        "Returns the default ticks spacing."
        self.formatdict = ...
    
    def set_locs(self, locs):
        'Sets the locations of the ticks'
        self.locs = ...
    
    def __call__(self, x, pos=...):
        ...
    


class TimeSeries_TimedeltaFormatter(Formatter):
    """
    Formats the ticks along an axis controlled by a :class:`TimedeltaIndex`.
    """
    @staticmethod
    def format_timedelta_ticks(x, pos, n_decimals):
        """
        Convert seconds to 'D days HH:MM:SS.F'
        """
        ...
    
    def __call__(self, x, pos=...):
        ...
    


