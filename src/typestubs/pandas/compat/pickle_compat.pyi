"""
This type stub file was generated by pyright.
"""

import pickle as pkl
from pandas import compat
from typing import Any, Optional

"""
Support pre-0.12 series pickle compatibility.
"""
def load_reduce(self):
    ...

_class_locations_map = { ('pandas.core.base', 'FrozenNDArray'): ('pandas.core.indexes.frozen', 'FrozenNDArray'),('pandas.core.base', 'FrozenList'): ('pandas.core.indexes.frozen', 'FrozenList'),('pandas.core.series', 'TimeSeries'): ('pandas.core.series', 'Series'),('pandas.sparse.series', 'SparseTimeSeries'): ('pandas.core.sparse.series', 'SparseSeries'),('pandas._sparse', 'BlockIndex'): ('pandas._libs.sparse', 'BlockIndex'),('pandas.tslib', 'Timestamp'): ('pandas._libs.tslib', 'Timestamp'),('pandas.tslib', '__nat_unpickle'): ('pandas._libs.tslib', '__nat_unpickle'),('pandas._period', 'Period'): ('pandas._libs.period', 'Period'),('pandas.sparse.array', 'SparseArray'): ('pandas.core.sparse.array', 'SparseArray'),('pandas.sparse.series', 'SparseSeries'): ('pandas.core.sparse.series', 'SparseSeries'),('pandas.sparse.frame', 'SparseDataFrame'): ('pandas.core.sparse.frame', 'SparseDataFrame'),('pandas.indexes.base', '_new_Index'): ('pandas.core.indexes.base', '_new_Index'),('pandas.indexes.base', 'Index'): ('pandas.core.indexes.base', 'Index'),('pandas.indexes.numeric', 'Int64Index'): ('pandas.core.indexes.numeric', 'Int64Index'),('pandas.indexes.range', 'RangeIndex'): ('pandas.core.indexes.range', 'RangeIndex'),('pandas.indexes.multi', 'MultiIndex'): ('pandas.core.indexes.multi', 'MultiIndex'),('pandas.tseries.index', '_new_DatetimeIndex'): ('pandas.core.indexes.datetimes', '_new_DatetimeIndex'),('pandas.tseries.index', 'DatetimeIndex'): ('pandas.core.indexes.datetimes', 'DatetimeIndex'),('pandas.tseries.period', 'PeriodIndex'): ('pandas.core.indexes.period', 'PeriodIndex') }
if compat.PY3:
    class Unpickler(pkl._Unpickler):
        def find_class(self, module, name):
            ...
        
    
    
else:
    class Unpickler(pkl.Unpickler):
        def find_class(self, module, name):
            ...
        
    
    
def load_newobj(self):
    ...

def load_newobj_ex(self):
    ...

def load(fh, encoding: Optional[Any] = ..., compat: bool = ..., is_verbose: bool = ...):
    """load a pickle, with a provided encoding

    if compat is True:
       fake the old class hierarchy
       if it works, then return the new type objects

    Parameters
    ----------
    fh: a filelike object
    encoding: an optional encoding
    compat: provide Series compatibility mode, boolean, default False
    is_verbose: show exception output
    """
    ...

