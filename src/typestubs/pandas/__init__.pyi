"""
This type stub file was generated by pyright.
"""

import pandas.core.config_init
import pandas.tools.plotting
import pandas.testing
from pandas.compat.numpy import *
from datetime import datetime
from pandas.core.api import *
from pandas.core.sparse.api import *
from pandas.stats.api import *
from pandas.tseries.api import *
from pandas.core.computation.api import *
from pandas.core.reshape.api import *
from pandas.util._print_versions import show_versions
from pandas.io.api import *
from pandas.util._tester import test
from pandas.util._depr_module import _DeprecatedModule
from .__version import version as __version__

__docformat__ = 'restructuredtext'
hard_dependencies = ("numpy", "pytz", "dateutil")
missing_dependencies = []
if missing_dependencies:
    ...
plot_params = pandas.plotting._style._Options(deprecated=True)
scatter_matrix = pandas.util._decorators.deprecate('pandas.scatter_matrix', pandas.plotting.scatter_matrix, 'pandas.plotting.scatter_matrix')
json = _DeprecatedModule(deprmod='pandas.json', moved={ 'dumps': 'pandas.io.json.dumps','loads': 'pandas.io.json.loads' })
parser = _DeprecatedModule(deprmod='pandas.parser', removals=['na_values'], moved={ 'CParserError': 'pandas.errors.ParserError' })
lib = _DeprecatedModule(deprmod='pandas.lib', deprmodto=False, moved={ 'Timestamp': 'pandas.Timestamp','Timedelta': 'pandas.Timedelta','NaT': 'pandas.NaT','infer_dtype': 'pandas.api.types.infer_dtype' })
tslib = _DeprecatedModule(deprmod='pandas.tslib', moved={ 'Timestamp': 'pandas.Timestamp','Timedelta': 'pandas.Timedelta','NaT': 'pandas.NaT','NaTType': 'type(pandas.NaT)','OutOfBoundsDatetime': 'pandas.errors.OutOfBoundsDatetime' })
__doc__ = """
pandas - a powerful data analysis and manipulation library for Python
=====================================================================

**pandas** is a Python package providing fast, flexible, and expressive data
structures designed to make working with "relational" or "labeled" data both
easy and intuitive. It aims to be the fundamental high-level building block for
doing practical, **real world** data analysis in Python. Additionally, it has
the broader goal of becoming **the most powerful and flexible open source data
analysis / manipulation tool available in any language**. It is already well on
its way toward this goal.

Main Features
-------------
Here are just a few of the things that pandas does well:

  - Easy handling of missing data in floating point as well as non-floating
    point data
  - Size mutability: columns can be inserted and deleted from DataFrame and
    higher dimensional objects
  - Automatic and explicit data alignment: objects can  be explicitly aligned
    to a set of labels, or the user can simply ignore the labels and let
    `Series`, `DataFrame`, etc. automatically align the data for you in
    computations
  - Powerful, flexible group by functionality to perform split-apply-combine
    operations on data sets, for both aggregating and transforming data
  - Make it easy to convert ragged, differently-indexed data in other Python
    and NumPy data structures into DataFrame objects
  - Intelligent label-based slicing, fancy indexing, and subsetting of large
    data sets
  - Intuitive merging and joining data sets
  - Flexible reshaping and pivoting of data sets
  - Hierarchical labeling of axes (possible to have multiple labels per tick)
  - Robust IO tools for loading data from flat files (CSV and delimited),
    Excel files, databases, and saving/loading data from the ultrafast HDF5
    format
  - Time series-specific functionality: date range generation and frequency
    conversion, moving window statistics, moving window linear regressions,
    date shifting and lagging, etc.
"""
