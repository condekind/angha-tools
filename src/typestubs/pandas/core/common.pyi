"""
This type stub file was generated by pyright.
"""

import sys
from pandas._libs import lib
from typing import Any, Optional

"""
Misc tools for implementing data structures
"""
m = sys.modules['pandas.core.common']
def array_equivalent(*args, **kwargs):
    ...

class SettingWithCopyError(ValueError):
    ...


class SettingWithCopyWarning(Warning):
    ...


class AbstractMethodError(NotImplementedError):
    """Raise this error instead of NotImplementedError for abstract methods
    while keeping compatibility with Python 2 and Python 3.
    """
    def __init__(self, class_instance):
        self.class_instance = ...
    
    def __str__(self):
        ...
    


def flatten(l):
    """Flatten an arbitrarily nested sequence.

    Parameters
    ----------
    l : sequence
        The non string sequence to flatten

    Notes
    -----
    This doesn't consider strings sequences.

    Returns
    -------
    flattened : generator
    """
    ...

def _consensus_name_attr(objs):
    ...

def _maybe_match_name(a, b):
    ...

def _get_info_slice(obj, indexer):
    """Slice the info axis of `obj` with `indexer`."""
    ...

def _maybe_box(indexer, values, obj, key):
    ...

def _maybe_box_datetimelike(value):
    ...

_values_from_object = lib.values_from_object
def is_bool_indexer(key):
    ...

def _default_index(n):
    ...

def _mut_exclusive(**kwargs):
    ...

def _not_none(*args):
    """Returns a generator consisting of the arguments that are not None"""
    ...

def _any_none(*args):
    """Returns a boolean indicating if any argument is None"""
    ...

def _all_none(*args):
    """Returns a boolean indicating if all arguments are None"""
    ...

def _any_not_none(*args):
    """Returns a boolean indicating if any argument is not None"""
    ...

def _all_not_none(*args):
    """Returns a boolean indicating if all arguments are not None"""
    ...

def _count_not_none(*args):
    """Returns the count of arguments that are not None"""
    ...

def _try_sort(iterable):
    ...

def iterpairs(seq):
    """
    Parameters
    ----------
    seq : sequence

    Returns
    -------
    iterator returning overlapping pairs of elements

    Examples
    --------
    >>> list(iterpairs([1, 2, 3, 4]))
    [(1, 2), (2, 3), (3, 4)]
    """
    ...

def split_ranges(mask):
    """ Generates tuples of ranges which cover all True value in mask

    >>> list(split_ranges([1,0,0,1,0]))
    [(0, 1), (3, 4)]
    """
    ...

def _long_prod(vals):
    ...

class groupby(dict):
    """
    A simple groupby different from the one in itertools.

    Does not require the sequence elements to be sorted by keys,
    however it is slower.
    """
    def __init__(self, seq, key=...):
        ...
    


def map_indices_py(arr):
    """
    Returns a dictionary with (element, index) pairs for each element in the
    given array/list
    """
    ...

def union(*seqs):
    ...

def difference(a, b):
    ...

def intersection(*seqs):
    ...

def _asarray_tuplesafe(values, dtype: Optional[Any] = ...):
    ...

def _index_labels_to_array(labels):
    ...

def _maybe_make_list(obj):
    ...

def is_null_slice(obj):
    """ we have a null slice """
    ...

def is_true_slices(l):
    """
    Find non-trivial slices in "l": return a list of booleans with same length.
    """
    ...

def is_full_slice(obj, l):
    """ we have a full length slice """
    ...

def _get_callable_name(obj):
    ...

def _apply_if_callable(maybe_callable, obj, **kwargs):
    """
    Evaluate possibly callable input using obj and kwargs if it is callable,
    otherwise return as it is

    Parameters
    ----------
    maybe_callable : possibly a callable
    obj : NDFrame
    **kwargs
    """
    ...

def _where_compat(mask, arr1, arr2):
    ...

def _dict_compat(d):
    """
    Helper function to convert datetimelike-keyed dicts to Timestamp-keyed dict

    Parameters
    ----------
    d: dict like object

    Returns
    -------
    dict

    """
    ...

def standardize_mapping(into):
    """
    Helper function to standardize a supplied mapping.

    .. versionadded:: 0.21.0

    Parameters
    ----------
    into : instance or subclass of collections.Mapping
        Must be a class, an initialized collections.defaultdict,
        or an instance of a collections.Mapping subclass.

    Returns
    -------
    mapping : a collections.Mapping subclass or other constructor
        a callable object that can accept an iterator to create
        the desired Mapping.

    See Also
    --------
    DataFrame.to_dict
    Series.to_dict
    """
    ...

def sentinel_factory():
    class Sentinel(object):
        ...
    
    

def in_interactive_session():
    """ check if we're running in an interactive shell

    returns True if running under python/ipython interactive shell
    """
    ...

def in_qtconsole():
    """
    check if we're inside an IPython qtconsole

    .. deprecated:: 0.14.1
       This is no longer needed, or working, in IPython 3 and above.
    """
    ...

def in_ipnb():
    """
    check if we're inside an IPython Notebook

    .. deprecated:: 0.14.1
       This is no longer needed, or working, in IPython 3 and above.
    """
    ...

def in_ipython_frontend():
    """
    check if we're inside an an IPython zmq frontend
    """
    ...

def _random_state(state: Optional[Any] = ...):
    """
    Helper function for processing random_state arguments.

    Parameters
    ----------
    state : int, np.random.RandomState, None.
        If receives an int, passes to np.random.RandomState() as seed.
        If receives an np.random.RandomState object, just returns object.
        If receives `None`, returns np.random.
        If receives anything else, raises an informative ValueError.
        Default None.

    Returns
    -------
    np.random.RandomState
    """
    ...

def _get_distinct_objs(objs):
    """
    Return a list with distinct elements of "objs" (different ids).
    Preserves order.
    """
    ...

def _pipe(obj, func, *args, **kwargs):
    """
    Apply a function ``func`` to object ``obj`` either by passing obj as the
    first argument to the function or, in the case that the func is a tuple,
    interpret the first element of the tuple as a function and pass the obj to
    that function as a keyword argument whose key is the value of the second
    element of the tuple.

    Parameters
    ----------
    func : callable or tuple of (callable, string)
        Function to apply to this object or, alternatively, a
        ``(callable, data_keyword)`` tuple where ``data_keyword`` is a
        string indicating the keyword of `callable`` that expects the
        object.
    args : iterable, optional
        positional arguments passed into ``func``.
    kwargs : dict, optional
        a dictionary of keyword arguments passed into ``func``.

    Returns
    -------
    object : the return type of ``func``.
    """
    ...

