"""
This type stub file was generated by pyright.
"""

import abc
from pandas.core.computation.ops import _mathops, _reductions

"""
Engine classes for :func:`~pandas.eval`
"""
_ne_builtins = frozenset(_mathops + _reductions)
class NumExprClobberingError(NameError):
    ...


def _check_ne_builtin_clash(expr):
    """Attempt to prevent foot-shooting in a helpful way.

    Parameters
    ----------
    terms : Term
        Terms can contain
    """
    ...

class AbstractEngine(object):
    """Object serving as a base class for all engines."""
    __metaclass__ = ...
    has_neg_frac = ...
    def __init__(self, expr):
        self.expr = ...
        self.aligned_axes = ...
        self.result_type = ...
    
    def convert(self):
        """Convert an expression for evaluation.

        Defaults to return the expression as a string.
        """
        ...
    
    def evaluate(self):
        """Run the engine on the expression

        This method performs alignment which is necessary no matter what engine
        is being used, thus its implementation is in the base class.

        Returns
        -------
        obj : object
            The result of the passed expression.
        """
        ...
    
    @property
    def _is_aligned(self):
        ...
    
    @abc.abstractmethod
    def _evaluate(self):
        """Return an evaluated expression.

        Parameters
        ----------
        env : Scope
            The local and global environment in which to evaluate an
            expression.

        Notes
        -----
        Must be implemented by subclasses.
        """
        ...
    


class NumExprEngine(AbstractEngine):
    """NumExpr engine class"""
    has_neg_frac = ...
    def __init__(self, expr):
        ...
    
    def convert(self):
        ...
    
    def _evaluate(self):
        ...
    


class PythonEngine(AbstractEngine):
    """Evaluate an expression in Python space.

    Mostly for testing purposes.
    """
    has_neg_frac = ...
    def __init__(self, expr):
        ...
    
    def evaluate(self):
        ...
    
    def _evaluate(self):
        ...
    


_engines = { 'numexpr': NumExprEngine,'python': PythonEngine }
