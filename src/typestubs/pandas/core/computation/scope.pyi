"""
This type stub file was generated by pyright.
"""

import datetime
import numpy as np
import pandas
from pandas.core.base import StringMixin
from typing import Any, Optional

"""
Module for scope operations
"""
def _ensure_scope(level, global_dict: Optional[Any] = ..., local_dict: Optional[Any] = ..., resolvers=..., target: Optional[Any] = ..., **kwargs):
    """Ensure that we are grabbing the correct scope."""
    ...

def _replacer(x):
    """Replace a number with its hexadecimal representation. Used to tag
    temporary variables with their calling scope's id.
    """
    ...

def _raw_hex_id(obj):
    """Return the padded hexadecimal id of ``obj``."""
    ...

_DEFAULT_GLOBALS = { 'Timestamp': pandas._libs.lib.Timestamp,'datetime': datetime.datetime,'True': True,'False': False,'list': list,'tuple': tuple,'inf': np.inf,'Inf': np.inf }
def _get_pretty_string(obj):
    """Return a prettier version of obj

    Parameters
    ----------
    obj : object
        Object to pretty print

    Returns
    -------
    s : str
        Pretty print object repr
    """
    ...

class Scope(StringMixin):
    """Object to hold scope, with a few bells to deal with some custom syntax
    and contexts added by pandas.

    Parameters
    ----------
    level : int
    global_dict : dict or None, optional, default None
    local_dict : dict or Scope or None, optional, default None
    resolvers : list-like or None, optional, default None
    target : object

    Attributes
    ----------
    level : int
    scope : DeepChainMap
    target : object
    temps : dict
    """
    __slots__ = ...
    def __init__(self, level, global_dict: Optional[Any] = ..., local_dict: Optional[Any] = ..., resolvers=..., target: Optional[Any] = ...):
        self.level = ...
        self.scope = ...
        self.target = ...
        self.resolvers = ...
        self.temps = ...
    
    def __unicode__(self):
        ...
    
    @property
    def has_resolvers(self):
        """Return whether we have any extra scope.

        For example, DataFrames pass Their columns as resolvers during calls to
        ``DataFrame.eval()`` and ``DataFrame.query()``.

        Returns
        -------
        hr : bool
        """
        ...
    
    def resolve(self, key, is_local):
        """Resolve a variable name in a possibly local context

        Parameters
        ----------
        key : text_type
            A variable name
        is_local : bool
            Flag indicating whether the variable is local or not (prefixed with
            the '@' symbol)

        Returns
        -------
        value : object
            The value of a particular variable
        """
        ...
    
    def swapkey(self, old_key, new_key, new_value: Optional[Any] = ...):
        """Replace a variable name, with a potentially new value.

        Parameters
        ----------
        old_key : str
            Current variable name to replace
        new_key : str
            New variable name to replace `old_key` with
        new_value : object
            Value to be replaced along with the possible renaming
        """
        ...
    
    def _get_vars(self, stack, scopes):
        """Get specifically scoped variables from a list of stack frames.

        Parameters
        ----------
        stack : list
            A list of stack frames as returned by ``inspect.stack()``
        scopes : sequence of strings
            A sequence containing valid stack frame attribute names that
            evaluate to a dictionary. For example, ('locals', 'globals')
        """
        ...
    
    def update(self, level):
        """Update the current scope by going back `level` levels.

        Parameters
        ----------
        level : int or None, optional, default None
        """
        ...
    
    def add_tmp(self, value):
        """Add a temporary variable to the scope.

        Parameters
        ----------
        value : object
            An arbitrary object to be assigned to a temporary variable.

        Returns
        -------
        name : basestring
            The name of the temporary variable created.
        """
        ...
    
    @property
    def ntemps(self):
        """The number of temporary variables in this scope"""
        ...
    
    @property
    def full_scope(self):
        """Return the full scope for use with passing to engines transparently
        as a mapping.

        Returns
        -------
        vars : DeepChainMap
            All variables in this scope.
        """
        ...
    


