"""
This type stub file was generated by pyright.
"""

import pandas.core.indexes.base as ibase
from pandas.core.indexes.base import _index_shared_docs
from pandas.util._decorators import Appender, cache_readonly
from typing import Any, Optional

"""
Base and utility classes for tseries type pandas objects.
"""
_index_doc_kwargs = dict(ibase._index_doc_kwargs)
class DatelikeOps(object):
    """ common ops for DatetimeIndex/PeriodIndex, but not TimedeltaIndex """
    def strftime(self, date_format):
        ...
    


class TimelikeOps(object):
    """ common ops for TimedeltaIndex/DatetimeIndex, but not PeriodIndex """
    _round_doc = ...
    def _round(self, freq, rounder):
        ...
    
    @Appender(_round_doc % "round")
    def round(self, freq, *args, **kwargs):
        ...
    
    @Appender(_round_doc % "floor")
    def floor(self, freq):
        ...
    
    @Appender(_round_doc % "ceil")
    def ceil(self, freq):
        ...
    


class DatetimeIndexOpsMixin(object):
    """ common ops mixin to support a unified inteface datetimelike Index """
    def equals(self, other):
        """
        Determines if two Index objects contain the same elements.
        """
        ...
    
    def __iter__(self):
        ...
    
    @staticmethod
    def _join_i8_wrapper(joinf, dtype, with_indexers: bool = ...):
        """ create the join wrapper methods """
        ...
    
    def _evaluate_compare(self, other, op):
        """
        We have been called because a comparison between
        8 aware arrays. numpy >= 1.11 will
        now warn about NaT comparisons
        """
        ...
    
    def _ensure_localized(self, result):
        """
        ensure that we are re-localized

        This is for compat as we can then call this on all datetimelike
        indexes generally (ignored for Period/Timedelta)

        Parameters
        ----------
        result : DatetimeIndex / i8 ndarray

        Returns
        -------
        localized DTI
        """
        ...
    
    @property
    def _box_func(self):
        """
        box function to get object from internal representation
        """
        ...
    
    def _box_values(self, values):
        """
        apply box func to passed values
        """
        ...
    
    def _format_with_header(self, header, **kwargs):
        ...
    
    @Appender(_index_shared_docs['__contains__'] % _index_doc_kwargs)
    def __contains__(self, key):
        ...
    
    contains = ...
    def __getitem__(self, key):
        """
        This getitem defers to the underlying array, which by-definition can
        only handle list-likes, slices, and integer scalars
        """
        ...
    
    @property
    def freqstr(self):
        """
        Return the frequency object as a string if its set, otherwise None
        """
        ...
    
    @cache_readonly
    def inferred_freq(self):
        """
        Trys to return a string representing a frequency guess,
        generated by infer_freq.  Returns None if it can't autodetect the
        frequency.
        """
        ...
    
    def _nat_new(self, box: bool = ...):
        """
        Return Index or ndarray filled with NaT which has the same
        length as the caller.

        Parameters
        ----------
        box : boolean, default True
            - If True returns a Index as the same as caller.
            - If False returns ndarray of np.int64.
        """
        ...
    
    def map(self, f):
        ...
    
    def sort_values(self, return_indexer: bool = ..., ascending: bool = ...):
        """
        Return sorted copy of Index
        """
        ...
    
    @Appender(_index_shared_docs['take'] % _index_doc_kwargs)
    def take(self, indices, axis=..., allow_fill: bool = ..., fill_value: Optional[Any] = ..., **kwargs):
        ...
    
    def get_duplicates(self):
        ...
    
    _can_hold_na = ...
    _na_value = ...
    @cache_readonly
    def _isnan(self):
        """ return if each value is nan"""
        ...
    
    @property
    def asobject(self):
        """
        return object Index which contains boxed values

        *this is an internal non-public method*
        """
        ...
    
    def _convert_tolerance(self, tolerance, target):
        ...
    
    def _maybe_mask_results(self, result, fill_value: Optional[Any] = ..., convert: Optional[Any] = ...):
        """
        Parameters
        ----------
        result : a ndarray
        convert : string/dtype or None

        Returns
        -------
        result : ndarray with values replace by the fill_value

        mask the result if needed, convert to the provided dtype if its not
        None

        This is an internal routine
        """
        ...
    
    def tolist(self):
        """
        return a list of the underlying data
        """
        ...
    
    def min(self, axis: Optional[Any] = ..., *args, **kwargs):
        """
        Return the minimum value of the Index or minimum along
        an axis.

        See also
        --------
        numpy.ndarray.min
        """
        ...
    
    def argmin(self, axis: Optional[Any] = ..., *args, **kwargs):
        """
        Returns the indices of the minimum values along an axis.
        See `numpy.ndarray.argmin` for more information on the
        `axis` parameter.

        See also
        --------
        numpy.ndarray.argmin
        """
        ...
    
    def max(self, axis: Optional[Any] = ..., *args, **kwargs):
        """
        Return the maximum value of the Index or maximum along
        an axis.

        See also
        --------
        numpy.ndarray.max
        """
        ...
    
    def argmax(self, axis: Optional[Any] = ..., *args, **kwargs):
        """
        Returns the indices of the maximum values along an axis.
        See `numpy.ndarray.argmax` for more information on the
        `axis` parameter.

        See also
        --------
        numpy.ndarray.argmax
        """
        ...
    
    @property
    def _formatter_func(self):
        ...
    
    def _format_attrs(self):
        """
        Return a list of tuples of the (attr,formatted_value)
        """
        ...
    
    @cache_readonly
    def _resolution(self):
        ...
    
    @cache_readonly
    def resolution(self):
        """
        Returns day, hour, minute, second, millisecond or microsecond
        """
        ...
    
    def _convert_scalar_indexer(self, key, kind: Optional[Any] = ...):
        """
        we don't allow integer or float indexing on datetime-like when using
        loc

        Parameters
        ----------
        key : label of the slice bound
        kind : {'ix', 'loc', 'getitem', 'iloc'} or None
        """
        ...
    
    def _add_datelike(self, other):
        ...
    
    def _sub_datelike(self, other):
        ...
    
    def _sub_period(self, other):
        ...
    
    @classmethod
    def _add_datetimelike_methods(cls):
        """
        add in the datetimelike methods (as we may have to override the
        superclass)
        """
        ...
    
    def _add_delta(self, other):
        ...
    
    def _add_delta_td(self, other):
        ...
    
    def _add_delta_tdi(self, other):
        ...
    
    def isin(self, values):
        """
        Compute boolean array of whether each index value is found in the
        passed set of values

        Parameters
        ----------
        values : set or sequence of values

        Returns
        -------
        is_contained : ndarray (boolean dtype)
        """
        ...
    
    def shift(self, n, freq: Optional[Any] = ...):
        """
        Specialized shift which produces a DatetimeIndex

        Parameters
        ----------
        n : int
            Periods to shift by
        freq : DateOffset or timedelta-like, optional

        Returns
        -------
        shifted : DatetimeIndex
        """
        ...
    
    def repeat(self, repeats, *args, **kwargs):
        """
        Analogous to ndarray.repeat
        """
        ...
    
    @Appender(_index_shared_docs['where'] % _index_doc_kwargs)
    def where(self, cond, other: Optional[Any] = ...):
        ...
    
    def summary(self, name: Optional[Any] = ...):
        """
        return a summarized representation
        """
        ...
    
    def _concat_same_dtype(self, to_concat, name):
        """
        Concatenate to_concat which has the same class
        """
        ...
    


def _ensure_datetimelike_to_i8(other):
    """ helper for coercing an input scalar or array to i8 """
    ...

