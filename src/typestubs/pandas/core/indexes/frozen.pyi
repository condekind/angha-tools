"""
This type stub file was generated by pyright.
"""

import numpy as np
from pandas.core.base import PandasObject
from typing import Any, Optional

"""
frozen (immutable) data structures to support MultiIndexing

These are used for:

- .names (FrozenList)
- .levels & .labels (FrozenNDArray)

"""
class FrozenList(PandasObject, list):
    """
    Container that doesn't allow setting item *but*
    because it's technically non-hashable, will be used
    for lookups, appropriately, etc.
    """
    def __add__(self, other):
        ...
    
    __iadd__ = ...
    def __getslice__(self, i, j):
        ...
    
    def __getitem__(self, n):
        ...
    
    def __radd__(self, other):
        ...
    
    def __eq__(self, other):
        ...
    
    __req__ = ...
    def __mul__(self, other):
        ...
    
    __imul__ = ...
    def __reduce__(self):
        ...
    
    def __hash__(self):
        ...
    
    def _disabled(self, *args, **kwargs):
        """This method will not function because object is immutable."""
        ...
    
    def __unicode__(self):
        ...
    
    def __repr__(self):
        ...
    
    __setitem__ = ...
    pop = ...


class FrozenNDArray(PandasObject, np.ndarray):
    def __new__(cls, data, dtype: Optional[Any] = ..., copy: bool = ...):
        ...
    
    def _disabled(self, *args, **kwargs):
        """This method will not function because object is immutable."""
        ...
    
    __setitem__ = ...
    put = ...
    def _shallow_copy(self):
        ...
    
    def values(self):
        """returns *copy* of underlying array"""
        ...
    
    def __unicode__(self):
        """
        Return a string representation for this object.

        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
        py2/py3.
        """
        ...
    
    def searchsorted(self, v, side=..., sorter: Optional[Any] = ...):
        """
        Find indices where elements of v should be inserted
        in a to maintain order.

        For full documentation, see `numpy.searchsorted`

        See Also
        --------
        numpy.searchsorted : equivalent function
        """
        ...
    


def _ensure_frozen(array_like, categories, copy: bool = ...):
    ...

