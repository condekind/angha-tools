"""
This type stub file was generated by pyright.
"""

from pandas.core.indexes.base import _index_shared_docs
from pandas.core.indexes.numeric import Int64Index
from pandas.core.base import _shared_docs
from pandas.util._decorators import Appender, Substitution, deprecate_kwarg
from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin, TimelikeOps
from typing import Any, Optional

""" implement the TimedeltaIndex """
def _field_accessor(name, alias, docstring: Optional[Any] = ...):
    ...

def _td_index_cmp(opname, nat_result: bool = ...):
    """
    Wrap comparison operations to convert timedelta-like to timedelta64
    """
    ...

class TimedeltaIndex(DatetimeIndexOpsMixin, TimelikeOps, Int64Index):
    """
    Immutable ndarray of timedelta64 data, represented internally as int64, and
    which can be boxed to timedelta objects

    Parameters
    ----------
    data  : array-like (1-dimensional), optional
        Optional timedelta-like data to construct index with
    unit: unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional
        which is an integer/float number
    freq: a frequency for the index, optional
    copy  : bool
        Make a copy of input ndarray
    start : starting value, timedelta-like, optional
        If data is None, start is used as the start point in generating regular
        timedelta data.
    periods  : int, optional, > 0
        Number of periods to generate, if generating index. Takes precedence
        over end argument
    end   : end time, timedelta-like, optional
        If periods is none, generated index will extend to first conforming
        time on or just past end argument
    closed : string or None, default None
        Make the interval closed with respect to the given frequency to
        the 'left', 'right', or both sides (None)
    name : object
        Name to be stored in the index

    Notes
    -----

    To learn more about the frequency strings, please see `this link
    <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.

    See Also
    ---------
    Index : The base pandas Index type
    Timedelta : Represents a duration between two dates or times.
    DatetimeIndex : Index of datetime64 data
    PeriodIndex : Index of Period data
    """
    _typ = ...
    _join_precedence = ...
    def _join_i8_wrapper(joinf, **kwargs):
        ...
    
    _inner_indexer = ...
    _outer_indexer = ...
    _left_indexer = ...
    _left_indexer_unique = ...
    _arrmap = ...
    _other_ops = ...
    _bool_ops = ...
    _object_ops = ...
    _field_ops = ...
    _datetimelike_ops = ...
    _datetimelike_methods = ...
    __eq__ = ...
    __ne__ = ...
    __lt__ = ...
    __gt__ = ...
    __le__ = ...
    __ge__ = ...
    _engine_type = ...
    _comparables = ...
    _attributes = ...
    _is_numeric_dtype = ...
    _infer_as_myclass = ...
    freq = ...
    def __new__(cls, data: Optional[Any] = ..., unit: Optional[Any] = ..., freq: Optional[Any] = ..., start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., copy: bool = ..., name: Optional[Any] = ..., closed: Optional[Any] = ..., verify_integrity: bool = ..., **kwargs):
        ...
    
    @classmethod
    def _generate(cls, start, end, periods, name, offset, closed: Optional[Any] = ...):
        ...
    
    @property
    def _box_func(self):
        ...
    
    @classmethod
    def _simple_new(cls, values, name: Optional[Any] = ..., freq: Optional[Any] = ..., **kwargs):
        ...
    
    @property
    def _formatter_func(self):
        ...
    
    def __setstate__(self, state):
        """Necessary for making this object picklable"""
        ...
    
    _unpickle_compat = ...
    def _maybe_update_attributes(self, attrs):
        """ Update Index attributes (e.g. freq) depending on op """
        ...
    
    def _add_delta(self, delta):
        ...
    
    def _evaluate_with_timedelta_like(self, other, op, opstr):
        ...
    
    def _add_datelike(self, other):
        ...
    
    def _sub_datelike(self, other):
        ...
    
    def _format_native_types(self, na_rep=..., date_format: Optional[Any] = ..., **kwargs):
        ...
    
    days = ...
    seconds = ...
    microseconds = ...
    nanoseconds = ...
    @property
    def components(self):
        """
        Return a dataframe of the components (days, hours, minutes,
        seconds, milliseconds, microseconds, nanoseconds) of the Timedeltas.

        Returns
        -------
        a DataFrame
        """
        ...
    
    def total_seconds(self):
        """
        Total duration of each element expressed in seconds.

        .. versionadded:: 0.17.0
        """
        ...
    
    def to_pytimedelta(self):
        """
        Return TimedeltaIndex as object ndarray of datetime.timedelta objects

        Returns
        -------
        datetimes : ndarray
        """
        ...
    
    @Appender(_index_shared_docs['astype'])
    def astype(self, dtype, copy: bool = ...):
        ...
    
    def union(self, other):
        """
        Specialized union for TimedeltaIndex objects. If combine
        overlapping ranges with the same DateOffset, will be much
        faster than Index.union

        Parameters
        ----------
        other : TimedeltaIndex or array-like

        Returns
        -------
        y : Index or TimedeltaIndex
        """
        ...
    
    def join(self, other, how=..., level: Optional[Any] = ..., return_indexers: bool = ..., sort: bool = ...):
        """
        See Index.join
        """
        ...
    
    def _wrap_joined_index(self, joined, other):
        ...
    
    def _can_fast_union(self, other):
        ...
    
    def _fast_union(self, other):
        ...
    
    def _wrap_union_result(self, other, result):
        ...
    
    def intersection(self, other):
        """
        Specialized intersection for TimedeltaIndex objects. May be much faster
        than Index.intersection

        Parameters
        ----------
        other : TimedeltaIndex or array-like

        Returns
        -------
        y : Index or TimedeltaIndex
        """
        ...
    
    def _maybe_promote(self, other):
        ...
    
    def get_value(self, series, key):
        """
        Fast lookup of value from 1-dimensional ndarray. Only use this if you
        know what you're doing
        """
        ...
    
    def get_value_maybe_box(self, series, key):
        ...
    
    def get_loc(self, key, method: Optional[Any] = ..., tolerance: Optional[Any] = ...):
        """
        Get integer location for requested label

        Returns
        -------
        loc : int
        """
        ...
    
    def _maybe_cast_slice_bound(self, label, side, kind):
        """
        If label is a string, cast it to timedelta according to resolution.


        Parameters
        ----------
        label : object
        side : {'left', 'right'}
        kind : {'ix', 'loc', 'getitem'}

        Returns
        -------
        label :  object

        """
        ...
    
    def _get_string_slice(self, key, use_lhs: bool = ..., use_rhs: bool = ...):
        ...
    
    def _partial_td_slice(self, key, freq, use_lhs: bool = ..., use_rhs: bool = ...):
        ...
    
    @Substitution(klass='TimedeltaIndex')
    @Appender(_shared_docs['searchsorted'])
    @deprecate_kwarg(old_arg_name='key', new_arg_name='value')
    def searchsorted(self, value, side=..., sorter: Optional[Any] = ...):
        ...
    
    def is_type_compatible(self, typ):
        ...
    
    @property
    def inferred_type(self):
        ...
    
    @property
    def dtype(self):
        ...
    
    @property
    def is_all_dates(self):
        ...
    
    def insert(self, loc, item):
        """
        Make new Index inserting new item at location

        Parameters
        ----------
        loc : int
        item : object
            if not either a Python datetime or a numpy integer-like, returned
            Index dtype will be object rather than datetime.

        Returns
        -------
        new_index : Index
        """
        ...
    
    def delete(self, loc):
        """
        Make a new DatetimeIndex with passed location(s) deleted.

        Parameters
        ----------
        loc: int, slice or array of ints
            Indicate which sub-arrays to remove.

        Returns
        -------
        new_index : TimedeltaIndex
        """
        ...
    


def _is_convertible_to_index(other):
    """
    return a boolean whether I can attempt conversion to a TimedeltaIndex
    """
    ...

def _is_convertible_to_td(key):
    ...

def _to_m8(key):
    """
    Timedelta-like => dt64
    """
    ...

def _generate_regular_range(start, end, periods, offset):
    ...

def timedelta_range(start: Optional[Any] = ..., end: Optional[Any] = ..., periods: Optional[Any] = ..., freq=..., name: Optional[Any] = ..., closed: Optional[Any] = ...):
    """
    Return a fixed frequency TimedeltaIndex, with day as the default
    frequency

    Parameters
    ----------
    start : string or timedelta-like, default None
        Left bound for generating timedeltas
    end : string or timedelta-like, default None
        Right bound for generating timedeltas
    periods : integer, default None
        Number of periods to generate
    freq : string or DateOffset, default 'D' (calendar daily)
        Frequency strings can have multiples, e.g. '5H'
    name : string, default None
        Name of the resulting TimedeltaIndex
    closed : string, default None
        Make the interval closed with respect to the given frequency to
        the 'left', 'right', or both sides (None)

    Returns
    -------
    rng : TimedeltaIndex

    Notes
    -----
    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two
    must be specified.

    To learn more about the frequency strings, please see `this link
    <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.

    Examples
    --------

    >>> pd.timedelta_range(start='1 day', periods=4)
    TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],
                   dtype='timedelta64[ns]', freq='D')

    The ``closed`` parameter specifies which endpoint is included.  The default
    behavior is to include both endpoints.

    >>> pd.timedelta_range(start='1 day', periods=4, closed='right')
    TimedeltaIndex(['2 days', '3 days', '4 days'],
                   dtype='timedelta64[ns]', freq='D')

    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.
    Only fixed frequencies can be passed, non-fixed frequencies such as
    'M' (month end) will raise.

    >>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')
    TimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',
                    '1 days 18:00:00', '2 days 00:00:00'],
                   dtype='timedelta64[ns]', freq='6H')
    """
    ...

