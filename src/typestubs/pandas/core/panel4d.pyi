"""
This type stub file was generated by pyright.
"""

from pandas.core.panelnd import create_nd_panel_factory
from pandas.core.panel import Panel
from typing import Any, Optional

""" Panel4D: a 4-d dict like collection of panels """
Panel4D = create_nd_panel_factory(klass_name='Panel4D', orders=['labels', 'items', 'major_axis', 'minor_axis'], slices={ 'labels': 'labels','items': 'items','major_axis': 'major_axis','minor_axis': 'minor_axis' }, slicer=Panel, aliases={ 'major': 'major_axis','minor': 'minor_axis' }, stat_axis=2, ns=dict(__doc__="""
    Panel4D is a 4-Dimensional named container very much like a Panel, but
    having 4 named dimensions. It is intended as a test bed for more
    N-Dimensional named containers.

    .. deprecated:: 0.19.0
       The recommended way to represent these types of n-dimensional data
       are with the `xarray package <http://xarray.pydata.org/en/stable/>`__.
       Pandas provides a `.to_xarray()` method to automate this conversion.

    Parameters
    ----------
    data : ndarray (labels x items x major x minor), or dict of Panels

    labels : Index or array-like : axis=0
    items  : Index or array-like : axis=1
    major_axis : Index or array-like: axis=2
    minor_axis : Index or array-like: axis=3

    dtype : dtype, default None
    Data type to force, otherwise infer
    copy : boolean, default False
    Copy data from inputs. Only affects DataFrame / 2d ndarray input
    """))
def panel4d_init(self, data: Optional[Any] = ..., labels: Optional[Any] = ..., items: Optional[Any] = ..., major_axis: Optional[Any] = ..., minor_axis: Optional[Any] = ..., copy: bool = ..., dtype: Optional[Any] = ...):
    ...

def panel4d_reindex(self, labs: Optional[Any] = ..., labels: Optional[Any] = ..., items: Optional[Any] = ..., major_axis: Optional[Any] = ..., minor_axis: Optional[Any] = ..., axis: Optional[Any] = ..., **kwargs):
    ...

