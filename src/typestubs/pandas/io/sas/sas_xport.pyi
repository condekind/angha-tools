"""
This type stub file was generated by pyright.
"""

from pandas.io.common import BaseIterator
from pandas.util._decorators import Appender
from typing import Any, Optional

"""
Read a SAS XPort format file into a Pandas DataFrame.

Based on code from Jack Cushman (github.com/jcushman/xport).

The file format is defined here:

https://support.sas.com/techsup/technote/ts140.pdf
"""
_correct_line1 = "HEADER RECORD*******LIBRARY HEADER RECORD!!!!!!!" "000000000000000000000000000000  "
_correct_header1 = "HEADER RECORD*******MEMBER  HEADER RECORD!!!!!!!" "000000000000000001600000000"
_correct_header2 = "HEADER RECORD*******DSCRPTR HEADER RECORD!!!!!!!" "000000000000000000000000000000  "
_correct_obs_header = "HEADER RECORD*******OBS     HEADER RECORD!!!!!!!" "000000000000000000000000000000  "
_fieldkeys = ['ntype', 'nhfun', 'field_length', 'nvar0', 'name', 'label', 'nform', 'nfl', 'num_decimals', 'nfj', 'nfill', 'niform', 'nifl', 'nifd', 'npos', '_']
_base_params_doc = """\
Parameters
----------
filepath_or_buffer : string or file-like object
    Path to SAS file or object implementing binary read method."""
_params2_doc = """\
index : identifier of index column
    Identifier of column that should be used as index of the DataFrame.
encoding : string
    Encoding for text data.
chunksize : int
    Read file `chunksize` lines at a time, returns iterator."""
_format_params_doc = """\
format : string
    File format, only `xport` is currently supported."""
_iterator_doc = """\
iterator : boolean, default False
    Return XportReader object for reading file incrementally."""
_read_sas_doc = """Read a SAS file into a DataFrame.

%(_base_params_doc)s
%(_format_params_doc)s
%(_params2_doc)s
%(_iterator_doc)s

Returns
-------
DataFrame or XportReader

Examples
--------
Read a SAS Xport file:

>>> df = pandas.read_sas('filename.XPT')

Read a Xport file in 10,000 line chunks:

>>> itr = pandas.read_sas('filename.XPT', chunksize=10000)
>>> for chunk in itr:
>>>     do_something(chunk)

.. versionadded:: 0.17.0
""" % { "_base_params_doc": _base_params_doc,"_format_params_doc": _format_params_doc,"_params2_doc": _params2_doc,"_iterator_doc": _iterator_doc }
_xport_reader_doc = """\
Class for reading SAS Xport files.

%(_base_params_doc)s
%(_params2_doc)s

Attributes
----------
member_info : list
    Contains information about the file
fields : list
    Contains information about the variables in the file
""" % { "_base_params_doc": _base_params_doc,"_params2_doc": _params2_doc }
_read_method_doc = """\
Read observations from SAS Xport file, returning as data frame.

Parameters
----------
nrows : int
    Number of rows to read from data file; if None, read whole
    file.

Returns
-------
A DataFrame.
"""
def _parse_date(datestr):
    """ Given a date in xport format, return Python date. """
    ...

def _split_line(s, parts):
    """
    Parameters
    ----------
    s: string
        Fixed-length string to split
    parts: list of (name, length) pairs
        Used to break up string, name '_' will be filtered from output.

    Returns
    -------
    Dict of name:contents of string at given location.
    """
    ...

def _handle_truncated_float_vec(vec, nbytes):
    ...

def _parse_float_vec(vec):
    """
    Parse a vector of float values representing IBM 8 byte floats into
    native 8 byte floats.
    """
    ...

class XportReader(BaseIterator):
    __doc__ = ...
    def __init__(self, filepath_or_buffer, index: Optional[Any] = ..., encoding=..., chunksize: Optional[Any] = ...):
        ...
    
    def close(self):
        ...
    
    def _get_row(self):
        ...
    
    def _read_header(self):
        self.file_info = ...
        self.member_info = ...
        self.fields = ...
        self.record_length = ...
        self.record_start = ...
        self.nobs = ...
        self.columns = ...
    
    def __next__(self):
        ...
    
    def _record_count(self):
        """
        Get number of records in file.

        This is maybe suboptimal because we have to seek to the end of
        the file.

        Side effect: returns file position to record_start.
        """
        ...
    
    def get_chunk(self, size: Optional[Any] = ...):
        """
        Reads lines from Xport file and returns as dataframe

        Parameters
        ----------
        size : int, defaults to None
            Number of lines to read.  If None, reads whole file.

        Returns
        -------
        DataFrame
        """
        ...
    
    def _missing_double(self, vec):
        ...
    
    @Appender(_read_method_doc)
    def read(self, nrows: Optional[Any] = ...):
        ...
    


