"""
This type stub file was generated by pyright.
"""

from pandas.io.common import BaseIterator
from typing import Any, Optional

"""
Read SAS7BDAT files

Based on code written by Jared Hobbs:
  https://bitbucket.org/jaredhobbs/sas7bdat

See also:
  https://github.com/BioStatMatt/sas7bdat

Partial documentation of the file format:
  https://cran.r-project.org/web/packages/sas7bdat/vignettes/sas7bdat.pdf

Reference for binary data compression:
  http://collaboration.cmc.ec.gc.ca/science/rpn/biblio/ddj/Website/articles/CUJ/1992/9210/ross/ross.htm
"""
class _subheader_pointer(object):
    ...


class _column(object):
    ...


class SAS7BDATReader(BaseIterator):
    """
    Read SAS files in SAS7BDAT format.

    Parameters
    ----------
    path_or_buf : path name or buffer
        Name of SAS file or file-like object pointing to SAS file
        contents.
    index : column identifier, defaults to None
        Column to use as index.
    convert_dates : boolean, defaults to True
        Attempt to convert dates to Pandas datetime values.  Note that
        some rarely used SAS date formats may be unsupported.
    blank_missing : boolean, defaults to True
        Convert empty strings to missing values (SAS uses blanks to
        indicate missing character variables).
    chunksize : int, defaults to None
        Return SAS7BDATReader object for iterations, returns chunks
        with given number of lines.
    encoding : string, defaults to None
        String encoding.
    convert_text : bool, defaults to True
        If False, text variables are left as raw bytes.
    convert_header_text : bool, defaults to True
        If False, header text, including column names, are left as raw
        bytes.
    """
    def __init__(self, path_or_buf, index: Optional[Any] = ..., convert_dates: bool = ..., blank_missing: bool = ..., chunksize: Optional[Any] = ..., encoding: Optional[Any] = ..., convert_text: bool = ..., convert_header_text: bool = ...):
        self.index = ...
        self.convert_dates = ...
        self.blank_missing = ...
        self.chunksize = ...
        self.encoding = ...
        self.convert_text = ...
        self.convert_header_text = ...
        self.default_encoding = ...
        self.compression = ...
        self.column_names_strings = ...
        self.column_names = ...
        self.column_types = ...
        self.column_formats = ...
        self.columns = ...
    
    def close(self):
        ...
    
    def _get_properties(self):
        self.name = ...
        self.file_type = ...
        self.date_created = ...
        self.date_modified = ...
        self.header_length = ...
        self.sas_release = ...
        self.server_type = ...
        self.os_version = ...
    
    def __next__(self):
        ...
    
    def _read_float(self, offset, width):
        ...
    
    def _read_int(self, offset, width):
        ...
    
    def _read_bytes(self, offset, length):
        ...
    
    def _parse_metadata(self):
        ...
    
    def _process_page_meta(self):
        ...
    
    def _read_page_header(self):
        ...
    
    def _process_page_metadata(self):
        ...
    
    def _get_subheader_index(self, signature, compression, ptype):
        ...
    
    def _process_subheader_pointers(self, offset, subheader_pointer_index):
        ...
    
    def _read_subheader_signature(self, offset):
        ...
    
    def _process_subheader(self, subheader_index, pointer):
        ...
    
    def _process_rowsize_subheader(self, offset, length):
        self.row_length = ...
        self.row_count = ...
        self.col_count_p1 = ...
        self.col_count_p2 = ...
    
    def _process_columnsize_subheader(self, offset, length):
        self.column_count = ...
    
    def _process_subheader_counts(self, offset, length):
        ...
    
    def _process_columntext_subheader(self, offset, length):
        ...
    
    def _process_columnname_subheader(self, offset, length):
        ...
    
    def _process_columnattributes_subheader(self, offset, length):
        self.column_types = ...
    
    def _process_columnlist_subheader(self, offset, length):
        ...
    
    def _process_format_subheader(self, offset, length):
        ...
    
    def read(self, nrows: Optional[Any] = ...):
        ...
    
    def _read_next_page(self):
        ...
    
    def _chunk_to_dataframe(self):
        ...
    


