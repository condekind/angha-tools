"""
This type stub file was generated by pyright.
"""

import numpy as np
from pandas.compat import u
from pandas.io.msgpack import Packer as _Packer, Unpacker as _Unpacker
from typing import Any, Optional

"""
Msgpack serializer support for reading and writing pandas data structures
to disk

portions of msgpack_numpy package, by Lev Givon were incorporated
into this module (and tests_packers.py)

License
=======

Copyright (c) 2013, Lev Givon.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.
* Neither the name of Lev Givon nor the names of any
  contributors may be used to endorse or promote products derived
  from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
compressor = None
def to_msgpack(path_or_buf, *args, **kwargs):
    """
    msgpack (serialize) object to input file path

    THIS IS AN EXPERIMENTAL LIBRARY and the storage format
    may not be stable until a future release.

    Parameters
    ----------
    path_or_buf : string File path, buffer-like, or None
                  if None, return generated string
    args : an object or objects to serialize
    encoding: encoding for unicode objects
    append : boolean whether to append to an existing msgpack
             (default is False)
    compress : type of compressor (zlib or blosc), default to None (no
               compression)
    """
    ...

def read_msgpack(path_or_buf, encoding=..., iterator: bool = ..., **kwargs):
    """
    Load msgpack pandas object from the specified
    file path

    THIS IS AN EXPERIMENTAL LIBRARY and the storage format
    may not be stable until a future release.

    Parameters
    ----------
    path_or_buf : string File path, BytesIO like or string
    encoding: Encoding for decoding msgpack str type
    iterator : boolean, if True, return an iterator to the unpacker
               (default is False)

    Returns
    -------
    obj : type of object stored in file

    """
    ...

dtype_dict = { 21: np.dtype('M8[ns]'),u('datetime64[ns]'): np.dtype('M8[ns]'),u('datetime64[us]'): np.dtype('M8[us]'),22: np.dtype('m8[ns]'),u('timedelta64[ns]'): np.dtype('m8[ns]'),u('timedelta64[us]'): np.dtype('m8[us]'),7: np.dtype('int64'),'category': 'category' }
def dtype_for(t):
    """ return my dtype mapping, whether number or name """
    ...

c2f_dict = { 'complex': np.float64,'complex128': np.float64,'complex64': np.float32 }
if hasattr(np, 'float128'):
    ...
def c2f(r, i, ctype_name):
    """
    Convert strings to complex number instance with specified numpy type.
    """
    ...

def convert(values):
    """ convert the numpy values to a list """
    ...

def unconvert(values, dtype, compress: Optional[Any] = ...):
    ...

def encode(obj):
    """
    Data encoder
    """
    ...

def decode(obj):
    """
    Decoder for deserializing numpy data types.
    """
    ...

def pack(o, default=..., encoding=..., unicode_errors=..., use_single_float: bool = ..., autoreset=..., use_bin_type=...):
    """
    Pack an object and return the packed bytes.
    """
    ...

def unpack(packed, object_hook=..., list_hook: Optional[Any] = ..., use_list: bool = ..., encoding=..., unicode_errors=..., object_pairs_hook: Optional[Any] = ..., max_buffer_size=..., ext_hook=...):
    """
    Unpack a packed object, return an iterator
    Note: packed lists will be returned as tuples
    """
    ...

class Packer(_Packer):
    def __init__(self, default=..., encoding=..., unicode_errors=..., use_single_float: bool = ..., autoreset=..., use_bin_type=...):
        ...
    


class Unpacker(_Unpacker):
    def __init__(self, file_like: Optional[Any] = ..., read_size=..., use_list: bool = ..., object_hook=..., object_pairs_hook: Optional[Any] = ..., list_hook: Optional[Any] = ..., encoding=..., unicode_errors=..., max_buffer_size=..., ext_hook=...):
        ...
    


class Iterator(object):
    """ manage the unpacking iteration,
        close the file on completion """
    def __init__(self, path, **kwargs):
        self.path = ...
        self.kwargs = ...
    
    def __iter__(self):
        ...
    


