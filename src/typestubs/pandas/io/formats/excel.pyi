"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""Utilities for conversion to writer-agnostic Excel representation
"""
class ExcelCell(object):
    __fields__ = ...
    __slots__ = ...
    def __init__(self, row, col, val, style: Optional[Any] = ..., mergestart: Optional[Any] = ..., mergeend: Optional[Any] = ...):
        self.row = ...
        self.col = ...
        self.val = ...
        self.style = ...
        self.mergestart = ...
        self.mergeend = ...
    


header_style = { "font": { "bold": True },"borders": { "top": "thin","right": "thin","bottom": "thin","left": "thin" },"alignment": { "horizontal": "center","vertical": "top" } }
class CSSToExcelConverter(object):
    """A callable for converting CSS declarations to ExcelWriter styles

    Supports parts of CSS 2.2, with minimal CSS 3.0 support (e.g. text-shadow),
    focusing on font styling, backgrounds, borders and alignment.

    Operates by first computing CSS styles in a fairly generic
    way (see :meth:`compute_css`) then determining Excel style
    properties from CSS properties (see :meth:`build_xlstyle`).

    Parameters
    ----------
    inherited : str, optional
        CSS declarations understood to be the containing scope for the
        CSS processed by :meth:`__call__`.
    """
    def __init__(self, inherited: Optional[Any] = ...):
        self.inherited = ...
    
    compute_css = ...
    def __call__(self, declarations_str):
        """Convert CSS declarations to ExcelWriter style

        Parameters
        ----------
        declarations_str : str
            List of CSS declarations.
            e.g. "font-weight: bold; background: blue"

        Returns
        -------
        xlstyle : dict
            A style as interpreted by ExcelWriter when found in
            ExcelCell.style.
        """
        ...
    
    def build_xlstyle(self, props):
        ...
    
    VERTICAL_MAP = ...
    def build_alignment(self, props):
        ...
    
    def build_border(self, props):
        ...
    
    def _border_style(self, style, width):
        ...
    
    def build_fill(self, props):
        ...
    
    BOLD_MAP = ...
    ITALIC_MAP = ...
    def build_font(self, props):
        ...
    
    NAMED_COLORS = ...
    def color_to_excel(self, val):
        ...
    


class ExcelFormatter(object):
    """
    Class for formatting a DataFrame to a list of ExcelCells,

    Parameters
    ----------
    df : DataFrame or Styler
    na_rep: na representation
    float_format : string, default None
            Format string for floating point numbers
    cols : sequence, optional
        Columns to write
    header : boolean or list of string, default True
        Write out column names. If a list of string is given it is
        assumed to be aliases for the column names
    index : boolean, default True
        output row names (index)
    index_label : string or sequence, default None
            Column label for index column(s) if desired. If None is given, and
            `header` and `index` are True, then the index names are used. A
            sequence should be given if the DataFrame uses MultiIndex.
    merge_cells : boolean, default False
            Format MultiIndex and Hierarchical Rows as merged cells.
    inf_rep : string, default `'inf'`
        representation for np.inf values (which aren't representable in Excel)
        A `'-'` sign will be added in front of -inf.
    style_converter : callable, optional
        This translates Styler styles (CSS) into ExcelWriter styles.
        Defaults to ``CSSToExcelConverter()``.
        It should have signature css_declarations string -> excel style.
        This is only called for body cells.
    """
    def __init__(self, df, na_rep=..., float_format: Optional[Any] = ..., cols: Optional[Any] = ..., header: bool = ..., index: bool = ..., index_label: Optional[Any] = ..., merge_cells: bool = ..., inf_rep=..., style_converter: Optional[Any] = ...):
        self.rowcounter = ...
        self.na_rep = ...
        self.df = ...
        self.columns = ...
        self.float_format = ...
        self.index = ...
        self.index_label = ...
        self.header = ...
        self.merge_cells = ...
        self.inf_rep = ...
    
    def _format_value(self, val):
        ...
    
    def _format_header_mi(self):
        self.rowcounter = ...
    
    def _format_header_regular(self):
        ...
    
    def _format_header(self):
        ...
    
    def _format_body(self):
        ...
    
    def _format_regular_rows(self):
        ...
    
    def _format_hierarchical_rows(self):
        ...
    
    def _generate_body(self, coloffset):
        ...
    
    def get_formatted_cells(self):
        ...
    
    def write(self, writer, sheet_name=..., startrow=..., startcol=..., freeze_panes: Optional[Any] = ..., engine: Optional[Any] = ...):
        """
        writer : string or ExcelWriter object
            File path or existing ExcelWriter
        sheet_name : string, default 'Sheet1'
            Name of sheet which will contain DataFrame
        startrow :
            upper left cell row to dump data frame
        startcol :
            upper left cell column to dump data frame
        freeze_panes : tuple of integer (length 2), default None
            Specifies the one-based bottommost row and rightmost column that
            is to be frozen
        engine : string, default None
            write engine to use if writer is a path - you can also set this
            via the options ``io.excel.xlsx.writer``, ``io.excel.xls.writer``,
            and ``io.excel.xlsm.writer``.
        """
        ...
    


